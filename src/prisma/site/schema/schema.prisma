generator client {
    provider        = "prisma-client"
    output          = "../.generated"
    previewFeatures = ["relationJoins"]
    runtime         = "nodejs"
    engineType      = "client"
}

datasource db {
    provider     = "postgresql"
    url          = env("SITE_DATABASE_URL")
    directUrl    = env("SITE_DIRECT_URL")
    relationMode = "foreignKeys"
}

model Account {
    id                String    @id @default(cuid(2))
    userId            String
    accountId         String
    providerId        String
    accessToken       String?
    refreshToken      String?
    idToken           String?
    accessTokenExpiresAt DateTime?
    refreshTokenExpiresAt DateTime?
    scope             String?
    password          String?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([providerId, accountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid(2))
    token        String   @unique
    userId       String
    expiresAt    DateTime
    ipAddress    String?
    userAgent    String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Verification {
    id         String   @id @default(cuid(2))
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, value])
}

model Token {
    id         String    @id @default(cuid(2))
    name       String
    hashedKey  String    @unique
    partialKey String
    expires    DateTime?
    lastUsed   DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    userId     String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String    @id @default(cuid(2))
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    alias               String    @unique @default(cuid(2))
    name                String
    email               String    @unique
    emailVerified       Boolean   @default(false)
    image               String?
    onboardingCompleted Boolean   @default(false)
    role                String    @default("USER")
    tier                UserTier  @default(FREE)
    banned              Boolean   @default(false)
    banReason           String?
    note                String?   @db.Text

    accounts Account[]
    sessions Session[]
    tokens   Token[]

    @@index([alias])
    @@index([email])
    @@index([role])
    @@index([tier])
}

enum UserRole {
    USER
    ADMIN
}

enum UserTier {
    FREE
    PRO
    MAX
}
