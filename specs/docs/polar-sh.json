[
  {
    "title": "Polar: Turn Your Software into a Business - Polar",
    "url": "https://polar.sh/docs/introduction",
    "html": "Bootup\nPolar: Turn Your Software into a Business\nCopy page\n\nThe next generation unicorns will be built by smaller teams. Polar makes that dream possible.\n\n​\nWhat is Polar?\nTurn your software into a business with Polar. Sell digital products, subscriptions, and more without the hassle of traditional payment systems.\nBeyond Payment Processing\nUnlike Stripe that only handles transactions, we provide complete billing infrastructure with tax compliance, product management, and automated access & delivery.\nMerchant of Record\nWe handle all international tax compliance, so you can sell globally without worrying about VAT, GST, or sales tax regulations.\n​\nProblems We Solve\n\nTax Compliance Nightmare\n\nComplex Billing Infrastructure\n\nManual Access & Delivery Overhead\n\nHigh Processing Costs\n\n​\nCore Features\n​\nFlexible Product Management\nOne-time Purchases\nSell digital products, courses, templates, or software licenses with instant delivery\nSubscriptions\nRecurring billing with automatic renewals and dunning management\nFlexible Pricing\nFixed price, pay-what-you-want, or free products with optional minimums\n​\nPowerful Checkout Experience\nCheckout Links\nNo-code solution for quick product sales. Create and share instantly.\nEmbedded Checkout\nIntegrate seamlessly into your website with customizable branding.\nCheckout API\nProgrammatically create dynamic checkout sessions for custom flows.\n​\nAutomated Benefits (Entitlements)\nSet it and forget it: Configure once, and customers get instant access to their benefits automatically. No manual work required.\nLicense Keys\nGenerate and deliver software licenses automatically with custom formats\nFile Downloads\nSecure delivery of digital assets up to 10GB with download tracking\nGitHub Access\nAuto-invite customers to private repositories and manage permissions\nDiscord Access\nAutomatic role assignment and server invites for community access\n​\nGlobal Merchant of Record\nWorldwide Tax Compliance - We handle VAT, GST, and sales tax in all jurisdictions\nEU VAT Handling - Proper B2B reverse charge and B2C tax collection\nAutomatic Tax Calculation - Real-time tax rates for every transaction\n​\nQuick Start Guide\n1\n\nCreate Your Account\n\nSign up for Polar using GitHub, Google, or email. Create an organization to manage your products and customers.\n2\n\nCreate Your First Product\n\nSet up a digital product in minutes:\nChoose between one-time purchase or subscription\nSet your pricing (fixed, pay-what-you-want, or free)\nConfigure automated benefits for instant delivery\nLearn more about Products →\n3\n\nChoose Your Integration\n\nPick the approach that fits your needs:\nNo-Code (Fastest)\nEmbedded\nFull API (Maximum Control)\nPerfect for getting started quickly:\nCreate Checkout Links from your dashboard\nShare via email, social media, or embed in websites\nStart accepting payments immediately\n4\n\nSet Up Webhooks\n\nStay synchronized with customer events:\nConfigure webhook endpoints in your dashboard\nReact to purchases, subscription changes, and customer events\nKeep your database in sync automatically\nRead the Webhooks guide →\n​\nIntegration Options\n​\nFramework Adapters (Recommended)\nNext.js\nReact-based full-stack framework with App Router support\nBetterAuth\nPayments and billing empowered by authentication & authorization\nLaravel\nPHP web application framework with Eloquent ORM integration\nDeno\nA modern runtime for TypeScript\n\nShow All 12 supported frameworks\n\n​\nNative SDKs\nJS/TS\nFor web and Node.js applications\nPython\nFor Django, Flask, FastAPI frameworks\nGo\nFor Go web services and applications\nPHP\nFor WordPress, Laravel, and PHP apps\n​\nWhy Choose Polar?\nIndividual Developers\nSmall Teams\nGrowing Businesses\nShip Faster\nFocus on your product, not billing infrastructure. Get to market weeks faster.\nGlobal Reach\nSell worldwide without worrying about tax compliance or regional restrictions.\nAutomated Delivery\nLicense keys and downloads handled automatically. No manual work required.\nLower Costs\n20% cheaper than competitors with transparent, pay-as-you-earn pricing.\n​\nTransparent Pricing\n4% + 40¢\nPer successful transaction\nSimple, transparent pricing with no surprises\n$0\nMonthly fees or setup costs\nPay only when you earn, no fixed costs\nAdditional fees may apply: Some transactions may incur additional fees (international cards, subscriptions). Payout fees are charged by payment providers. See our detailed fees page for complete information.\n​\nOpen Source & Community\nPolar is built in the open with full transparency and a growing community of contributors.\nOpen Source Codebase\nApache 2.0 license with 36+ contributors and growing\nPublic Development\nFeature requests, roadmap, and issues - all developed in public\nTransparent Pricing\nNo hidden fees or surprise charges. What you see is what you pay.\nCommunity Support\nJoin our Discord for help, feedback, and feature discussions\nWhile self-hosting is technically possible, we recommend using our hosted service to get the full Merchant of Record benefits including global tax compliance.\n​\nReady to Start?\nCreate Account\nFree signup, no credit card required\nGet started in under 2 minutes\nRead the Guides\nFramework-specific tutorials\nStep-by-step integration guides\nExplore the API\nComplete API documentation\nInteractive examples and SDKs\nJoin Our Community\nGet help from our team\nActive community and support\n\nWas this page helpful?\n\nYes\nNo\nMigrate to Polar\nGet set up on Polar in minutes from an existing store\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Products - Polar",
    "url": "https://polar.sh/docs/features/products",
    "html": "Features\nProducts\nCopy page\n\nCreate digital products on Polar in minutes\n\nEverything is a product\nSubscriptions or pay once products are both considered a product in Polar (API & data model). Just with different pricing & billing logic. So both are shown & managed under Products with the ability to filter based on pricing model.\n​\nCreate a product\n​\nName & Description\nStarting off with the basic.\nName The title of your product.\nDescription Markdown is supported here too.\n​\nPricing\nDetermine how you want to charge your customers for this product.\n1\n\nBilling cycle\n\nOne-time purchase Customer is charged once and gets access to the product forever.\nMonthly Customer is charged every month.\nYearly Customer is charged every year.\n2\n\nPricing type\n\nFixed price Set a fixed price for the product.\nPay what you want Let customers decide how much they want to pay.\nFree No charge for the product.\n3\n\nPrice\n\nFor fixed price products, set the amount you want to charge.\nFor pay what you want products, you can set a minimum amount and a default amount that will be preset on checkout.\nBilling cycle and pricing type cannot be changed after the product is created.\nWhat if I want both a monthly and yearly pricing?\nPolar has a unique approach to what the industry typically calls variants. Each product has a single pricing model, but you can create multiple products with different pricing models, and showcase them both at checkout.\n​\nTrial Period\nFor recurring products, you can set a trial period during which the customer won’t be charged. Toggle Enable trial period to enable it. Then, you’ll be able to set the duration of the trial period, given a number and a unit (days, weeks, months or years).\nYou can read more about how trials work here.\n​\nProduct Media\nYou can upload public product images to be displayed on product pages\nThey can be up to 10MB each\nYou can remove and re-arrange images\n​\nCheckout Fields\nYou can collect additional information from your customers at checkout. This can be useful for things like phone number, terms of service agreement or specific data you need to collect.\nFields are managed from your organization settings, and you can choose which fields to show on a per-product basis, and set if they are required or not. We support the following field types:\nText\nNumber\nDate\nCheckbox\nSelect\nIf you make a checkbox required, the customer will need to check it before confirming their purchase. Very handy for legal terms!\nThe data collected will be available in the order and subscription details.\n​\nAutomated Entitlements\nFinally, you can enable or create new entitlements (what we call Benefits) that you tie to the product.\nRead more in our product benefits guide on how they work and how to customize the built-in ones we offer:\nLicense Keys\nDiscord Server Role\nGitHub Repository Access\nFile Downloads\nCustom Benefit\n​\nVariants\nPolar has a unique approach regarding what the industry typically calls variants.\nWe believe having a single product with multiple pricing models and benefits adds unnecessary complexity to the user and to the API. Instead, we chose to treat everything as a product, giving you maximum flexibility about the pricing and benefits you want to offer.\nYou can showcase several products at checkout, allowing the customer to switch between them. Typically, you can offer a monthly and a yearly product, with specific pricing and benefits for each. Read more about how to do so using Checkout Links or the Checkout Session API.\n​\nUpdate a product\nYou can edit any product details, except the billing cycle and pricing type.\nFor fixed price products, you can change the price. Existing subscribers will remain on their current pricing.\nIf you add benefits, existing subscribers will get them automatically. If you remove benefits, existing subscribers will lose access to them.\n​\nArchive a product\nProducts on Polar can’t be deleted, but they can be archived. You can do so by clicking the Archive button on the bottom right of the product page.\nExisting customers will keep their access to the product, and subscriptions will continue to renew. However, the product will no longer be available for new purchases.\nIt’s possible to unarchive a product using the Products Update API.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nIntroduction\nUsage based billing using ingested events\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Trials - Polar",
    "url": "https://polar.sh/docs/features/trials",
    "html": "Features\nTrials\nCopy page\n\nOffer free trials on your subscriptions\n\nTrials are a great way to let potential customers experience your product before committing to a subscription. With Polar, you can easily set up free trials for your subscription products.\n​\nSetting up a trial\nYou can set up a trial period through the following means:\nWhen creating or editing a product.\nWhen creating or editing a checkout link.\nWhen creating a Checkout Session through the API.\nIf you set a trial period on the Checkout Link or Checkout Session, it will override the trial period set on the product.\nThe trial period consists of two parameters:\nA unit: day, week, month, or year.\nA duration: a number representing how many units the trial will last.\n​\nStarting a trial\nWhen a customer checks out a subscription product with a trial period, they will not be charged immediately. Instead, they will have access to the product for the duration of the trial period.\nWe’ll still collect their payment information at checkout, but they won’t be charged until the trial period ends. This means that if they decide to cancel before the trial ends, they won’t be charged at all.\nOnce the trial period ends, the customer will be automatically charged for the subscription, and their billing cycle will begin.\n​\nAdding, extending or canceling a trial\nFor existing subscriptions, youu can add, extend or cancel a customer’s trial period at any time through the dashboard, from the subscription details page. Click on Update Subscription, then click on the Trial tab.\nTo add or extend a trial, set a new trial end date in the future. If the subscription was active, its status will be changed to trialing, and the billing will be postponed until the end of the trial.\nTo cancel a trial, click on the End trial button. The subscription will become active immediately, and the customer will be charged immediately for a new billing cycle.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nSeat-Based Pricing\nSell team products with assignable seats and tiered pricing\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Seat-Based Pricing - Polar",
    "url": "https://polar.sh/docs/features/seat-based-pricing",
    "html": "Features\nSeat-Based Pricing\nCopy page\n\nSell team products with assignable seats and tiered pricing\n\nSeat-based pricing allows you to sell products where a billing manager purchases a specific number of seats and can assign them to team members. Each seat holder gets their own access to the product benefits, making it perfect for team subscriptions, perpetual licenses, and multi-user products.\nSeat-based pricing is ideal for:\nTeam subscriptions where one billing manager pays for multiple users\nPerpetual team licenses with one-time payment\nOrganizational licenses with per-seat pricing\nProducts with volume-based tiering (e.g., $10/seat for 1-4 seats, $9/seat for 5+)\n​\nFeature Flag\nSeat-based pricing is controlled by a feature flag at the organization level. You can enable this feature on the organization settings page.\n​\nHow it works\nWith seat-based pricing, a billing manager purchases a product (subscription or one-time) with a specific number of seats. They can then:\nAssign seats to team members via email or external customer ID\nManage seats by resending invitations or revoking access\nScale up by purchasing additional seats (or a new order for one-time products)\nTrack usage by viewing which seats are claimed, pending, or available\nTeam members receive an invitation email with a claim link. Once they claim their seat, benefits are automatically granted.\n​\nSubscriptions vs One-Time Purchases\nSeat-based pricing works for both recurring subscriptions and one-time purchases:\nFeature\tSubscriptions\tOne-Time Purchases\nPayment\tRecurring (monthly/yearly)\tSingle payment\nSeat Duration\tActive while subscribed\tPerpetual (never expire)\nAdding Seats\tModify subscription\tPurchase new order\nBilling\tRenews automatically\tNo renewals\nBenefits\tWhile subscription active\tForever after claim\nUse subscriptions for ongoing team access. Use one-time purchases for perpetual team licenses.\n​\nCreating a seat-based product\n1\n\nCreate a new product\n\nFrom your dashboard, navigate to Products and click Create Product.\n2\n\nConfigure basic settings\n\nSet your product name, description, and media as usual.\n3\n\nSelect seat-based pricing\n\nUnder Pricing, select:\nProduct type: Subscription or One-time\nBilling cycle (subscriptions only): Monthly or Yearly\nPricing type: Seat-based\n4\n\nConfigure seat tiers\n\nDefine your pricing tiers based on seat quantity:\nMin seats: Minimum number of seats required to purchase\nTiers: For each tier, set:\nMax seats: Upper limit for this tier (leave empty for unlimited)\nPrice per seat: Amount charged per seat in this tier (in cents)\nExample tiered pricing:\n1-4 seats: $10/seat per month\n5-9 seats: $9/seat per month\n10+ seats: $8/seat per month\n5\n\nAdd benefits\n\nConfigure the benefits that seat holders will receive. These are only granted when a seat is claimed, not when purchased.\nUnlike standard subscriptions, seat-based products do not grant benefits to the billing manager. Benefits are only granted to team members who claim their assigned seats.\n​\nPurchasing seats\nWhen a customer purchases a seat-based product, they specify how many seats they want during checkout. The total amount is calculated based on your tiered pricing.\nThe checkout experience clearly shows:\nNumber of seats being purchased\nPrice per seat based on volume\nTotal amount\nFor subscriptions: recurring billing cycle\nFor one-time: perpetual access indication\nOnce payment is completed, the billing manager can immediately start assigning seats to their team.\nFor one-time purchases, each order is independent. If customers want more seats later, they purchase a new order with its own seat pool. All purchased seats remain perpetual.\n​\nManaging seats\n​\nAssigning seats\nBilling managers can assign seats through:\nCustomer Portal: Accessible via the customer portal with billing manager permissions\nAPI: Programmatically assign seats using the Customer Seats API\nTo assign a seat, provide:\nSubscription ID (for subscriptions) or Order ID (for one-time purchases)\nEmail address (creates a new customer if needed)\nExternal customer ID (optional, for syncing with your system)\nCustomer ID (if customer already exists in Polar)\nMetadata (optional, up to 10 keys for custom data like role, department)\nAn invitation email is automatically sent to the recipient with a secure claim link (valid for 24 hours).\n​\nSeat statuses\nEach seat can have one of three statuses:\nPending: Seat assigned, invitation sent, awaiting claim\nClaimed: Seat claimed by team member, benefits granted\nRevoked: Seat revoked, benefits removed, can be reassigned\n​\nResending invitations\nFor pending seats, billing managers can resend the invitation email if it was lost or expired.\n​\nRevoking seats\nBilling managers can revoke a claimed seat at any time:\nBenefits are immediately removed from the seat holder\nThe seat becomes available for reassignment\nThe seat holder loses access to all product benefits\nThe revoked seat can be assigned to a different team member\nRevoking a seat does not issue a refund. The billing manager continues to pay for the total number of seats in their subscription.\n​\nClaiming seats\nWhen a team member receives a seat invitation:\nThey click the claim link in the email\nA claim page displays the product details and organization info\nThey click Claim Seat to accept\nBenefits are automatically granted\nThey receive a customer session token for immediate portal access\nThey can access their benefits through the customer portal\nClaim links are single-use and expire after 24 hours for security. If expired, the billing manager can resend the invitation.\n​\nScaling seats\n​\nAdding seats\nFor subscriptions:\nBilling managers can upgrade their subscription to add more seats:\nThe new seat count is applied immediately\nProrated charges are calculated for the current billing period\nFuture renewals bill at the new seat count\nNew seats can be assigned right away\nIf adding seats moves to a different pricing tier, the new per-seat rate applies to all seats, not just the additional ones.\nFor one-time purchases:\nBilling managers purchase a new order with additional seats:\nCreate a new checkout for the same product with desired seat quantity\nOnce paid, a new independent order is created\nEach order has its own seat pool\nAll seats remain perpetual across all orders\n​\nReducing seats\nFor subscriptions:\nTo reduce seats, the billing manager should:\nRevoke seats until the desired count is reached\nUpdate the subscription to reflect the lower seat count\nThe change takes effect at the next renewal\nYou cannot reduce subscription seats below the number of currently claimed seats. Revoke seats first before reducing the subscription seat count.\nFor one-time purchases:\nSeats cannot be reduced or refunded as they are perpetual. The billing manager can:\nRevoke unwanted seats to make them unassigned\nThe seats remain available for future assignment\nNo refund is issued for revoked seats\n​\nAPI Integration\nSeat-based pricing provides full API support for:\nCreating seat-based products with tiered pricing\nChecking out with seat quantities\nAssigning seats programmatically\nListing seats and their statuses\nRevoking seats\nSDK Version Requirement\nTo use seat-based pricing features, ensure you have the latest version of the Polar SDK installed:\nTypeScript/JavaScript: npm install @polar-sh/sdk@latest\nPython: pip install --upgrade polar-sdk\nOlder SDK versions may not include seat-based pricing support.\nSee the Customer Seats API Reference for complete documentation.\n​\nExample: Assign a seat (subscription)\nCopy\nAsk AI\nawait polar.customerSeats.assign({\n  subscription_id: \"sub_123\",\n  email: \"engineer@company.com\",\n  metadata: {\n    department: \"Engineering\",\n    role: \"Developer\"\n  }\n});\n\n​\nExample: Assign a seat (one-time purchase)\nCopy\nAsk AI\nawait polar.customerSeats.assign({\n  order_id: \"order_456\",\n  email: \"engineer@company.com\",\n  metadata: {\n    department: \"Engineering\",\n    role: \"Developer\"\n  }\n});\n\n​\nExample: List seats for subscription\nCopy\nAsk AI\nconst seats = await polar.customerSeats.list({\n  subscription_id: \"sub_123\"\n});\n\nconsole.log(`Available: ${seats.available_seats}/${seats.total_seats}`);\n\n​\nExample: List seats for order\nCopy\nAsk AI\nconst seats = await polar.customerSeats.list({\n  order_id: \"order_456\"\n});\n\nconsole.log(`Available: ${seats.available_seats}/${seats.total_seats}`);\n\n​\nWebhooks\nSeat-based pricing triggers webhooks for both subscriptions and orders:\nSubscription events:\nsubscription.created - When seat-based subscription is purchased\nsubscription.updated - When seat count changes\nsubscription.canceled - When subscription is cancelled\nOrder events:\norder.created - When seat-based one-time purchase is completed\norder.updated - When order is updated\nSeat and benefit events (both types):\nbenefit_grant.created - When a seat is claimed and benefits granted\nbenefit_grant.revoked - When a seat is revoked and benefits removed\nFor both subscriptions and one-time purchases, benefit_grant.created events are triggered per seat claim, not at purchase time.\n​\nBest Practices\n​\nUse tiered pricing strategically\nStructure your tiers to incentivize volume:\nLower per-seat prices as quantity increases\nCreate tiers at natural team sizes (5, 10, 25, etc.)\nConsider flat pricing for very large teams\n​\nLeverage metadata\nUse seat metadata to store:\nTeam member roles\nDepartments or cost centers\n​\nMonitor seat utilization\nTrack how many purchased seats are actually claimed to identify:\nOrganizations that may need more seats\nUnused capacity that could be reduced\nPatterns in team adoption\n​\nCommunicate clearly\nEnsure product pages clearly explain:\nThe billing manager will not get direct access\nSeats must be assigned to team members\nPricing structure and volume discounts\nSeat assignment and claiming process\n​\nLimitations\nSeats must be assigned individually (no bulk import via dashboard, use API instead)\nClaim links expire after 24 hours\nBilling manager does not receive product benefits\nMaximum of 1,000 seats per subscription\nMetadata limited to 10 keys and 1KB total size per seat\nUsage-based pricing with shared emails: If you sell to multiple businesses and different businesses assign seats to the same email address (e.g., “john@gmail.com”), and usage-based pricing is enabled, separate meters should be created for each business to properly segregate usage. This is a rare scenario since employees from different businesses typically don’t share the same email address.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCustom Fields\nLearn how to add custom input fields to your checkout with Polar\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Custom Fields - Polar",
    "url": "https://polar.sh/docs/features/custom-fields",
    "html": "Features\nCustom Fields\nCopy page\n\nLearn how to add custom input fields to your checkout with Polar\n\nBy default, the Checkout form will only ask basic information from the customer to fulfill the order: a name, an email address, billing information, etc. But you might need more! A few examples:\nA checkbox asking the customer to accept your terms\nAn opt-in newsletter consent\nA select menu to ask where they heard from you\n…\nWith Polar, you can easily add such fields to your checkout using Custom Fields.\n​\nCreate Custom Fields\nCustom Fields are managed at an organization’s level. To create them, go to Settings and Custom Fields. You’ll see the list of all the available fields on your organization.\nClick on New Custom Field to create a new one.\n​\nType\nThe type of the field is the most important thing to select. It determines what type of input will be displayed to the customer during checkout.\nThe type can’t be changed after the field is created.\nWe support five types of fields:\n​\nText\nThis will display a simple text field to input textual data. By default, it’ll render a simple input field but you can render a textarea by toggling the option under Form input options.\nUnder Validation constraints, you can add minimum and maximum length validation.\nUnderneath, the data will be stored as a string.\n​\nNumber\nThis will display a number input field. Under Validation constraints, you can add minimum and maximum validation.\nUnderneath, the data will be stored as a number.\n​\nDate\nThis will display a date input field. Under Validation constraints, you can add minimum and maximum validation.\nUnderneath, the data will be stored as a string using the ISO 8601 format.\n​\nCheckbox\nThis will display a checkbox field.\nUnderneath, the data will be stored as a boolean (true or false).\n​\nSelect\nThis will display a select field with a predefined set of options. Each option is a pair of Value and Label, the first one being the value that’ll be stored underneath and the latter the one that will be shown to the customer.\n​\nSlug and name\nThe slug determines the key that’ll be used to store the data inside objects related to the checkout, like Orders and Subscriptions. It must be unique across your organization. You can change it afterwards, we’ll automatically update the data to reflect the new slug.\nThe name is what we’ll be displayed to you to recognize the field across your dashboard. By default, it’ll also be the label of the field displayed to the customer, unless you customize it under Form input options.\n​\nForm input options\nThose options allow you to customize how the field is displayed to the customer. You can set:\nThe label, displayed above the field\nThe help text, displayed below the field\nThe placeholder, displayed inside the field when there is no value\nThe label and help text supports basic Markdown syntax, so you can add bold, italic or even links.\n​\nAdd Custom Field to Checkout\nCustom Fields are enabled on Checkout specifically on each product. While creating or updating a product, you can select the custom fields you want to include in the checkout for this product.\nNote that you can make the field Required.\nIf you make a checkbox field required, customers will have to check the box before submitting the checkout. Very useful for terms acceptance!\nThe fields are now added as part of the Checkout form for this product.\n​\nRead data\nOnce you have added Custom Fields to your organization, they’ll be automatically displayed as a column in your Sales page, both on Orders and Subscriptions. From there, you’ll be able to see the data input by the customer.\nThis data is also available from the Orders and Subscriptions API, under the custom_field_data property. Each value is referenced by the slug of the field.\nCopy\nAsk AI\n{\n  // ...\n  \"custom_field_value\": {\n    \"terms\": true,\n    \"source\": \"social_media\"\n  }\n}\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDiscounts\nCreate discounts on products and subscriptions\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Discounts - Polar",
    "url": "https://polar.sh/docs/features/discounts",
    "html": "Features\nDiscounts\nCopy page\n\nCreate discounts on products and subscriptions\n\nDiscounts are a way to reduce the price of a product or subscription. They can be applied to one-time purchasable products or subscriptions.\n​\nCreate a discount\nGo to the Products page and click on the Discounts tab.\n​\nName\nDisplayed to the customer when they apply the discount.\n​\nCode\nOptional code (case insensitive) that the customer can use to apply the discount. If left empty, the discount can only be applied through a Checkout Link or the API.\n​\nPercentage Discount\nThe percentage discount to apply to the product or subscription.\n​\nFixed Amount Discount\nThe discount deducts a fixed amount from the price of the product or subscription.\n​\nRecurring Discount\nThe percentage discount to apply to the product or subscription.\nOnce The discount is applied once.\nSeveral Months The discount is applied for a fixed number of months.\nForever The discount is applied indefinitely.\n​\nRestrictions\nProducts The discount can only be applied to specific products. By default the discount can be applied to all products, also ones created after the discount was created.\nStarts at The discount can only be applied after this date\nEnds at The discount can only be applied before this date\nMaximum redemptions The maximum number of times the discount can be applied.\n​\nApply a discount\nDiscounts can be applied to a Checkout Link or a Checkout Session.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nOrders & Subscriptions\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Orders & Subscriptions - Polar",
    "url": "https://polar.sh/docs/features/orders",
    "html": "Features\nOrders & Subscriptions\nCopy page\n​\nSales\nThe sales view shows you all sales in a paginated list.\n​\nOrder & Subscription Details\nEach sale has metadata attached to it. Common properties like\nAmount\nTax Amount\nInvoices\nCustomer\nBasic Customer Details\nPast Orders\n​\nCheckouts\nYou can also have an overview of all checkout sessions. You can filter them by customer email, status and product.\nA checkout can be in the following states:\nOpen: The checkout session is open and waiting for the customer to complete the payment.\nConfirmed: The customer clicked the Pay or Subscribe button and the payment is being processed.\nSucceeded: The payment was successful and the order was created.\nExpired: The checkout session expired and the customer can no longer complete it. A new checkout session must be created.\nIf you click on a Checkout, you can have more details on the payment attempts, in particular, why a payment has failed or has been declined.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRefunds\nYou can easily refund orders on Polar - both in full or in parts.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Manage Refunds - Polar",
    "url": "https://polar.sh/docs/features/refunds",
    "html": "Features\nManage Refunds\nCopy page\n\nYou can easily refund orders on Polar - both in full or in parts.\n\nNo matter what refund policy you offer to customers, Polar makes it easy to offer both full and partial refunds to easily deliver the customer experience and refund policy you want.\nHowever, even in case you have a “no refund” policy, Polar reserves the right to issue refunds within 60 days of purchase - at our own discretion. We reserve this right in an effort to automatically and proactively reduce costly chargebacks.\nPolar can issue refunds on your behalf\nPolar reserves the right to issue refunds within 60 days of purchase, at its own discretion, in order to prevent chargebacks. So if you choose to have a “no refunds” policy, be aware that Polar could still issue refunds in an effort to proactively prevent chargebacks.\n​\nIssuing a refund\nGo to the order details page for the specific order you want to refund\nScroll down to the “Refund” section\nClick “Refund”\nAmount\nSpecify the amount to refund. By default it’s the full order amount, but you can reduce this to issue a partial refund instead.\nPayment fees are not refunded\nUnfortunately, credit card networks and PSPs charge us for the underlying transactions regardless of whether it’s later refunded (industry standard). Therefore, we cannot offer a refund on our fees since the costs remain constant.\nExample: An order of \n30\n𝑐\n𝑜\n𝑠\n𝑡\n𝑠\n \n30costs 1.6 in fees to Polar. You can still refund the customer \n30\n,\n𝑏\n𝑢\n𝑡\n𝑡\nℎ\n𝑒\n \n30,butthe 1.6 fee remains and is deducted on your balance from other purchases.\nReason\nSelect the reason for the refund - helpful for future reference.\nRevoke Benefits (One-time purchases)\nFor one-time purchases, you can revoke the customers access to product benefits, e.g file downloads, license keys or Discord/GitHub invites. By default this is selected since we default to a full refund, but can be disabled.\nRevoke Benefits (Subscriptions)\nYou cannot revoke access by refunding an order associated with a subscription. Instead the subscription is required to be canceled and Polar will then automatically revoke access once the subscription itself is revoked.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAnalytics\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Analytics - Polar",
    "url": "https://polar.sh/docs/features/analytics",
    "html": "Features\nAnalytics\nCopy page\n​\nSales Metrics\nPolar offers a professional metrics dashboard out of the box. So you can stay focused on increasing revenue vs. how to measure it.\nMissing any metrics? Let us know so we can add it.\n​\nFilters\nYou can easily slice and dice metrics with the filters below.\n​\nPeriod\nChange the time period in the X-axis to one of:\nYearly\nMonthly\nWeekly\nDaily\nHourly\n​\nTimeframe\nYou can choose a date range to view all metrics for.\n​\nProduct\nBy default metrics reflect the total across all products. However, you can specify individual products or subscription tiers to filter metrics by.\n​\nMetrics\n​\nRevenue\nHow much revenue you’ve earned before fees.\n​\nOrders\nHow many product sales and subscription payments have been made.\n​\nAverage Order Value (AOV)\nThe average earning per order, i.e revenue / orders.\n​\nOne-Time Products\nAmount of products sold.\n​\nOne-Time Products Revenue\nAmount of revenue earned from products.\n​\nNew Subscriptions\nAmount of new subscriptions.\n​\nNew Subscription Revenue\nAmount of revenue earned from new subscriptions.\n​\nRenewed Subscriptions\nAmount of renewed subscriptions.\n​\nRenewed Subscription Revenue\nAmount of revenue earned from renewed subscriptions.\n​\nActive Subscriptions\nAmount of active subscriptions (new + renewed)\n​\nMonthly Recurring Revenue (MRR)\nAmount of revenue earned from active subscriptions.\n​\nCheckouts\nNumber of created checkouts.\n​\nSucceeded Checkouts\nNumber of successful checkouts, i.e. checkouts that lead to a new order or subscription.\n​\nCheckouts Conversion Rate\nThe percentage of successful checkouts out of all created checkouts.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCustomer Management\nGet insights on your customers and sales\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Customer Management - Polar",
    "url": "https://polar.sh/docs/features/customer-management",
    "html": "Features\nCustomer Management\nCopy page\n\nGet insights on your customers and sales\n\n​\nManaging Customers\nPolar has a built in feature to view and manage your Customers.\nEveryone who has ever purchased something from you will be recorded as a Customer to your Organization. You’re able to see past orders and their ongoing subscriptions, as well as some additional metrics.\n​\nExternal ID\nQuite often, you’ll have our own users management system in your application, where your customer already have an ID. To ease reconciliation between Polar and your system, we have a dedicated external_id field on Customers. It’s unique across your organization and can’t be changed once set.\nWe have dedicated API endpoints that work with the external_id field, so you don’t even have to store the internal Polar ID in your system.\nGet Customer by External ID\nUpdate Customer by External ID\nDelete Customer by External ID\n​\nMetadata\nYou may set additional metadata on Customers. This can be very useful to store additional data about your customer you want to be available through our API and webhooks.\nIt can be set through the dashboard or through the API. It can also be pre-set when creating a Checkout Session by using the customer_metadata field. This way, after a successful checkout, the metadata will automatically be set on the newly created Customer.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCustomer Portal\nEnable customers to view & manage orders and subscriptions easily\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Customer Portal - Polar",
    "url": "https://polar.sh/docs/features/customer-portal",
    "html": "Features\nCustomer Portal\nCopy page\n\nEnable customers to view & manage orders and subscriptions easily\n\nThe Customer Portal is a destination where your customers can see their orders and ongoing subscriptions. It’s also where they’re able to get hands on receipts, benefits, and more.\n​\nRedirect to your Customer Portal\nThe customer portal is directly available from the URL https://polar.sh/your-org-slug/portal. Your customers will be able to authenticate there by entering the email they used to purchase or subscribe to your products.\nCustomer Portal Sign In\n​\nCreating an authenticated Customer Portal Link\nYou can provide a pre-authenticated Customer Portal Link to your customers. This is handy if you want to redirect them directly from your application.\nUsing the Polar API, all you need is to call the customerSessions endpoint. Here’s an example using our TypeScript SDK.\nCopy\nAsk AI\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.customerSessions.create({\n    customerId: \"<value>\",\n  });\n\n  redirect(result.customerPortalUrl)\n}\n\nrun();\n\nOr, if you use NextJS as your framework, we have a handy utility which shortens down your code significantly.\nCopy\nAsk AI\n// app/portal/route.ts\nimport { CustomerPortal } from \"@polar-sh/nextjs\";\n\nexport const GET = CustomerPortal({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n  getCustomerId: async (req) => '<value>',\n  server: 'sandbox' // Use sandbox if you're testing Polar - pass 'production' otherwise\n});\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nPayout Accounts\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Introduction - Polar",
    "url": "https://polar.sh/docs/guides/introduction",
    "html": "Guides\nIntroduction\nCopy page\n\nA collection of how-tos with Polar in form of step-by-step guides and tutorials.\n\nThis section is your starting point for learning how to use Polar with various stacks, environments, etc. Here you will find step-by-step guides and tutorials to help you integrate Polar into your projects, set up your environment, and make the most of our platform.\n​\nGet Started\nBrowse the guides in the sidebar to find the right one based on your needs.\nIf you want to request a new guide, please create an issue on polarsource/polar.\n\nWas this page helpful?\n\nYes\nNo\nSeat-Based Pricing\nComplete guide to implementing team products with seat-based pricing\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "API Overview - Polar",
    "url": "https://polar.sh/docs/api-reference/introduction",
    "html": "General\nAPI Overview\nCopy page\n\nBase URLs, authentication, pagination, rate limits, and the difference between the Core API and the Customer Portal API\n\nProduction Base URL\nhttps://api.polar.sh/v1\nSandbox Base URL\nhttps://sandbox-api.polar.sh/v1\nAuth (Organization)\nUse an Organization Access Token (OAT) in the Authorization: Bearer header\nAuth (Customer Portal)\nUse a Customer Access Token created via /v1/customer-sessions/\n​\nBase URLs\nEnvironment\tBase URL\tPurpose\nProduction\thttps://api.polar.sh/v1\tReal customers & live payments\nSandbox\thttps://sandbox-api.polar.sh/v1\tSafe testing & integration work\nThe sandbox environment is fully isolated—data, users, tokens, and organizations created there do not affect production. Create separate tokens in each environment.\nRead more: Sandbox Environment\n​\nAuthentication\n​\nOrganization Access Tokens (OAT)\nUse an OAT to act on behalf of your organization (manage products, prices, checkouts, orders, subscriptions, benefits, etc.).\nCopy\nAsk AI\nAuthorization: Bearer polar_oat_xxxxxxxxxxxxxxxxx\n\nCreate OATs in your organization settings. See: Organization Access Tokens\nNever expose an OAT in client-side code, public repos, or logs. If leaked, it will be revoked automatically by our secret scanning integrations.\n​\nCustomer Access Tokens\nDo not use OATs in the browser. For customer-facing flows, generate a Customer Session server-side, then use the returned customer access token with the Customer Portal API to let a signed-in customer view their own orders, subscriptions, and benefits.\n​\nCore API vs Customer Portal API\nAspect\tCore API\tCustomer Portal API\nAudience\tYour server / backend\tOne of your customer\nAuth Type\tOrganization Access Token (OAT)\tCustomer Access Token\nScope\tFull org resources (products, orders, subscriptions, benefits, checkout)\tOnly the authenticated customer’s data\nTypical Use\tAdmin dashboards, internal tools, automation, provisioning\tBuilding a custom customer portal or gated app\nToken Creation\tVia dashboard (manual)\tVia /v1/customer-sessions/ (server-side)\nSensitive Operations\tYes (create/update products, issue refunds, etc.)\tNo (read/update only what the customer owns)\nThe Customer Portal API is a restricted surface designed for safe exposure in user-facing contexts (after exchanging a session). It cannot perform privileged org-level mutations like creating products or issuing refunds.\n​\nQuick Examples\ncurl (Production - Core API)\ncurl (Sandbox - Core API)\ncurl (Customer Portal API)\nCopy\nAsk AI\ncurl https://api.polar.sh/v1/products/ \\\n  -H \"Authorization: Bearer $POLAR_OAT\" \\\n  -H \"Accept: application/json\"\n\n​\nUsing SDKs\nAll official SDKs accept a server parameter for sandbox usage:\nTypeScript\nPython\nGo\nPHP\nCopy\nAsk AI\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\naccessToken: process.env.POLAR_ACCESS_TOKEN!,\nserver: \"sandbox\", // omit or use 'production' for live\n});\n\n\n​\nPagination\nList endpoints in the Polar API support pagination to help you efficiently retrieve large datasets. Use the page and limit query parameters to control pagination.\n​\nQuery Parameters\nParameter\tType\tDefault\tMax\tDescription\npage\tinteger\t1\t-\tPage number, starting from 1\nlimit\tinteger\t10\t100\tNumber of items to return per page (window size)\nThe page parameter works as a window offset. For example, page=2&limit=10 means the API will skip the first 10 elements and return the next 10.\n​\nResponse Format\nAll paginated responses include a pagination object with metadata about the current page and total results:\nField\tType\tDescription\ntotal_count\tinteger\tTotal number of items matching your query across all pages\nmax_page\tinteger\tTotal number of pages available, given the current limit value\n​\nExample\nLet’s say you want to fetch products with a limit of 100 items per page:\nRequest\nResponse\nCopy\nAsk AI\ncurl https://api.polar.sh/v1/products/?page=1&limit=100 \\\n  -H \"Authorization: Bearer $POLAR_OAT\" \\\n  -H \"Accept: application/json\"\n\nIn this example:\ntotal_count=250 indicates there are 250 total products\nlimit=100 means each page contains up to 100 products\nmax_page=3 means you need to make 3 requests to retrieve all products (pages 1, 2, and 3)\nTo retrieve all pages, increment the page parameter from 1 to max_page. Our SDKs provide built-in pagination helpers to automatically iterate through all pages.\n​\nRate Limits\nPolar API has rate limits to ensure fair usage and maintain performance. The limits are as follows:\n300 requests per minute per organization/customer or OAuth2 Client.\n3 requests per second for unauthenticated license key validation, activation, and deactivation endpoints.\nIf you exceed the rate limit, you will receive a 429 Too Many Requests response. The response will include a Retry-After header indicating how long you should wait before making another request.\nOrganizations requiring higher rate limits for production workloads may contact our support team to discuss elevated limits.\n\nWas this page helpful?\n\nYes\nNo\nCreate Checkout Session\nCreate a checkout session. **Scopes**: `checkouts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Checkout Links - Polar",
    "url": "https://polar.sh/docs/features/checkout/links",
    "html": "Checkout\nCheckout Links\nCopy page\n\nSell your digital products with ease by sharing a checkout link to select products\n\nCheckout links can be shared or linked on your website which automatically creates a checkout session for customers.\nLooking for a way to generate Checkout session programmatically? Checkout Links might not be the right tool for you. Instead, you should use the Checkout API.\n​\nCreate a Checkout Link\nCheckout Links can be managed from the Checkout Links tabs of the Products section. Click on New Link to create a new one.\n​\nLabel\nThis is an internal name for the Checkout Link. It’s only visible to you.\n​\nProducts\nYou can select one or several products. With several products, customers will be able to switch between them on the checkout page.\n​\nDiscount\nYou can disable discount codes, if you wish to prevent customers from using them.\nYou can also preset a discount: it’ll be automatically applied when the customer lands on the checkout page.\n​\nMetadata\nThis is an optional key-value object allowing you to store additional information which may be useful for you when handling the order. This metadata will be copied to the generated Checkout object and, if the checkout succeeds, to the resulting Order and/or Subscription.\n​\nUsing Checkout Links\nYou can share the Checkout Link URL on your webpage, social media, or directly to customers.\nCheckout Links will go against our API, and redirect to short-lived Checkout session. This means that the Checkout page the user will end up on, are temporary and expires after a while if no successful purchase is made.\nThis means that you need to make sure to always use this Checkout Link URL (as shown above). If you mistakenly copy the URL from a Checkout Session, the link will expire.\n​\nQuery parameters\nYou can pass optional query parameters to your Checkout Links.\n​\nPrepopulate fields\nYou can prefill the checkout fields with the following query parameters:\n​\ncustomer_email\nstring\nPrefill customer email at checkout\n​\ncustomer_name\nstring\nPrefill customer name at checkout\n​\ndiscount_code\nstring\nPrefill discount code\n​\namount\nstring\nPrefill amount in case of Pay What You Want pricing\n​\ncustom_field_data.{slug}\nstring\nPrefill checkout fields data, where {slug} is the slug of the custom field.\n​\nStore attribution and reference metadata\nThe following query parameters will automatically be set on Checkout metadata.\n​\nreference_id\nstring\nYour own reference ID for the checkout session.\n​\nutm_source\nstring\nUTM source of the checkout session.\n​\nutm_medium\nstring\nUTM medium of the checkout session.\n​\nutm_campaign\nstring\nUTM campaign of the checkout session.\n​\nutm_content\nstring\nUTM content of the checkout session.\n​\nutm_term\nstring\nUTM term of the checkout session.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nEmbedded Checkout\nEmbed our checkout directly on your site\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Embedded Checkout - Polar",
    "url": "https://polar.sh/docs/features/checkout/embed",
    "html": "Checkout\nEmbedded Checkout\nCopy page\n\nEmbed our checkout directly on your site\n\nYou can either copy and paste our code snippet to get up and running in a second or use our JavaScript library for more advanced integrations. Our embedded checkout allows you to provide a seamless purchasing experience without redirecting users away from your site.\n​\nCode Snippet\nThe code snippet can be used on any website or CMS that allows you to insert HTML.\nFirst, create a Checkout Link as described in the previous section. The code snippet can directly be copied from there by clicking on Copy Embed Code.\nThe snippet looks like this:\nCopy\nAsk AI\n<a\n  href=\"__CHECKOUT_LINK__\"\n  data-polar-checkout\n  data-polar-checkout-theme=\"light\"\n>\n  Purchase\n</a>\n<script\n  src=\"https://cdn.jsdelivr.net/npm/@polar-sh/checkout@0.1/dist/embed.global.js\"\n  defer\n  data-auto-init\n></script>\n\nThis will display a Purchase link which will open an inline checkout when clicked.\nYou can style the trigger element any way you want, as long as you keep the data-polar-checkout attribute.\n​\nImport Library\nIf you have a more advanced project in JavaScript, like a React app, adding the <script> tag may not be an option. In this case, you can install our dedicated library.\nnpm\npnpm\nyarn\nCopy\nAsk AI\nnpm install @polar-sh/checkout\n\nThen, you should import the PolarEmbedCheckout helper class and manually call PolarEmbedCheckout.init(). This will add the required handlers on elements having the data-polar-checkout attribute.\nHere is an example in React:\nCopy\nAsk AI\nimport { PolarEmbedCheckout } from '@polar-sh/checkout/embed'\nimport { useEffect } from 'react'\n\nconst PurchaseLink = () => {\n  useEffect(() => {\n    PolarEmbedCheckout.init()\n  }, [])\n\n  return (\n    <a\n      href=\"__CHECKOUT_LINK__\"\n      data-polar-checkout\n      data-polar-checkout-theme=\"light\"\n    >\n      Purchase\n    </a>\n  )\n}\n\nexport default PurchaseLink\n\nInstead of a Checkout Link, you can also use a Checkout Session URL created dynamically from the API.\nFor this to work, make sure to set the embed_origin parameter correctly when creating the Checkout Session. For example, if your checkout page is served on the URL https://example.com/checkout, you should set embed_origin to https://example.com.\n​\nAdvanced Integration\nFor users who need more control over the embedded checkout flow, the PolarEmbedCheckout class provides several advanced features.\n​\nProgrammatically creating an embed\nInstead of using declarative triggers with data-polar-checkout attributes, you can programmatically create and control checkout instances:\nCopy\nAsk AI\nimport { PolarEmbedCheckout } from \"@polar-sh/checkout/embed\";\n\n// Open checkout programmatically when needed\nconst openCheckout = async () => {\n  const checkoutLink = \"__CHECKOUT_LINK__\";\n  const theme = \"light\"; // or 'dark'\n\n  try {\n    // This creates the checkout iframe and returns a Promise\n    // that resolves when the checkout is fully loaded\n    const checkout = await PolarEmbedCheckout.create(checkoutLink, theme);\n\n    // Now you can interact with the checkout instance\n    return checkout;\n  } catch (error) {\n    console.error(\"Failed to open checkout\", error);\n  }\n};\n\n// Example: Trigger checkout when a button is clicked\ndocument.getElementById(\"buy-button\").addEventListener(\"click\", () => {\n  openCheckout();\n});\n\n​\nListening for checkout events\nYou can listen for checkout events to respond to user interactions:\nCopy\nAsk AI\nimport { PolarEmbedCheckout } from \"@polar-sh/checkout/embed\";\n\nconst openCheckoutWithEvents = async () => {\n  const checkout = await PolarEmbedCheckout.create(\"__CHECKOUT_LINK__\");\n\n  // Listen for when the checkout is loaded\n  checkout.addEventListener(\"loaded\", (event) => {\n    console.log(\"Checkout loaded\");\n    // Call event.preventDefault() if you want to prevent the standard behavior\n    // event.preventDefault()\n    // Note: This would prevent removing the loader if it's still visible\n  });\n\n  // Listen for when the checkout has been closed\n  checkout.addEventListener(\"close\", (event) => {\n    console.log(\"Checkout has been closed\");\n    // Call event.preventDefault() if you want to prevent the standard behavior\n    // event.preventDefault()\n  });\n\n  // Listen for when the checkout has been confirmed (payment processing)\n  checkout.addEventListener(\"confirmed\", (event) => {\n    console.log(\"Order confirmed, processing payment\");\n    // Call event.preventDefault() if you want to prevent the standard behavior\n    // event.preventDefault()\n    // Note: This would prevent setting the checkout as non-closable\n  });\n\n  // Listen for successful completion\n  checkout.addEventListener(\"success\", (event) => {\n    console.log(\"Purchase successful!\", event.detail);\n\n    // Call event.preventDefault() if you want to prevent the standard behavior\n    // event.preventDefault()\n    // Note: For success event, this prevents automatic redirection if redirect is true\n\n    // If redirect is false, you can show your own success message\n    if (!event.detail.redirect) {\n      showSuccessMessage();\n    }\n    // Otherwise, the user will be redirected to the success URL (unless prevented)\n  });\n\n  return checkout;\n};\n\n​\nReact Integration with event handling\nHere’s a more complete React example that handles checkout events:\nCopy\nAsk AI\nimport { PolarEmbedCheckout } from '@polar-sh/checkout/embed'\nimport { useState, useEffect } from 'react'\n\nconst CheckoutButton = () => {\n  const [checkoutInstance, setCheckoutInstance] = useState(null)\n\n  // Clean up checkout instance on unmount\n  useEffect(() => {\n    return () => {\n      if (checkoutInstance) {\n        checkoutInstance.close()\n      }\n    }\n  }, [checkoutInstance])\n\n  const handleCheckout = async () => {\n      try {\n        const checkout = await PolarEmbedCheckout.create(\n          '__CHECKOUT_LINK__',\n          'light'\n        )\n\n      setCheckoutInstance(checkout)\n\n      checkout.addEventListener('success', (event) => {\n        // Track successful purchase\n        analytics.track('Purchase Completed', {\n          productId: 'your-product-id',\n          // Add other analytics data\n        })\n\n        // Show success message or redirect\n        if (!event.detail.redirect) {\n          // Handle success in your app\n        }\n      })\n\n      checkout.addEventListener('close', (event) => {\n        // Clean up our reference when checkout is closed\n        setCheckoutInstance(null)\n      })\n    } catch (error) {\n      console.error('Failed to open checkout', error)\n    }\n  }\n\n  return (\n    <button onClick={handleCheckout}>\n      Complete Purchase\n    </button>\n  )\n}\n\nexport default CheckoutButton\n\n​\nProgrammatically closing checkout\nIn some cases, you might need to programmatically close the checkout - for instance, if you detect that a user needs to take an action elsewhere in your application first:\nCopy\nAsk AI\nimport { PolarEmbedCheckout } from \"@polar-sh/checkout/embed\";\n\n// Example: open checkout and store the instance\nlet activeCheckout = null;\n\nasync function openCheckout() {\n  const checkout = await PolarEmbedCheckout.create(\"__CHECKOUT_LINK__\");\n  activeCheckout = checkout;\n  return checkout;\n}\n\n// Later, close it programmatically when needed\nfunction closeCheckout() {\n  if (activeCheckout) {\n    activeCheckout.close();\n    // The 'close' event will fire automatically\n    // Don't set activeCheckout to null here, as we'll handle that in the event listener\n  }\n}\n\n// Add a listener to update our reference when checkout is closed\nfunction setupCheckout(checkout) {\n  checkout.addEventListener(\"close\", (event) => {\n    // Reset our reference when checkout is closed\n    activeCheckout = null;\n  });\n  return checkout;\n}\n\n// Example usage\ndocument.getElementById(\"open-checkout\").addEventListener(\"click\", async () => {\n  const checkout = await openCheckout();\n  setupCheckout(checkout);\n});\ndocument\n  .getElementById(\"close-checkout\")\n  .addEventListener(\"click\", closeCheckout);\n\n​\nEnabling Wallet Payment Methods (Apple Pay, Google Pay, etc.)\nWallet payment methods such as Apple Pay and Google Pay are supported in the checkout with the following conditions:\nApple Pay appears automatically in the checkout if:\nThe user is on an Apple device\nThe browser is Safari\nThe device is connected to an Apple account with Apple Pay configured\nGoogle Pay appears automatically in the checkout if:\nThe user is on Google Chrome\nThe browser is connected to a Google account with Google Pay configured\nNo additional action is required if you meet these conditions and are not using an embedded checkout.\n​\nEnabling Wallet Payments for Embedded Checkout\nBy default, wallet payment methods (Apple Pay, Google Pay, etc.) are not enabled when you embed our checkout form into your website. For security reasons, your website domain needs to be manually validated before enabling these payment methods in embedded mode.\nTo enable wallet payment methods on your embedded checkout, please email us with:\nYour organization slug\nThe domain you wish to allow for wallet payments\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCheckout API\nCreate checkout sessions programmatically for complete control\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Automate Customer License Key Management - Polar",
    "url": "https://polar.sh/docs/features/benefits/license-keys",
    "html": "Benefits\nAutomate Customer License Key Management\nCopy page\n\nSell license key access to your service, software or APIs with ease\n\nYou can easily sell software license keys with Polar without having to deal with sales tax or hosting an API to validate them in real-time. License keys with Polar come with a lot of powerful features built-in.\nBrandable prefixes, e.g POLAR_*****\nAutomatic expiration after N days, months or years\nLimited number of user activations, e.g devices\nCustom validation conditions\nUsage quotas per license key\nAutomatic revokation upon cancelled subscriptions\n​\nCreate License Key Benefit\nGo to Benefits in the sidebar\nClick + New Benefit to create a new benefit\nChoose License Keys as the Type\n​\nCustom Branding\nMake your license keys standout with brandable prefixes, e.g MYAPP_<AUTO_GENERATED_UUID4>\n​\nAutomatic Expiration\nWant license keys to expire automatically after a certain time period from when the customer bought them? No problem.\n​\nActivation Limits\nYou can require license keys to be activated before future validation. A great feature in case you want to limit license key usage to a certain number of devices, IPs or other conditions.\nEnable user to deactivate instances via Polar. Instead of building your own custom admin for customers to manage their activation instances - leave it to Polar instead.\n​\nUsage Limit\nOffering OpenAI tokens or anything else with a variable usage cost? You can set a custom usage quota per license key and increment usage upon validation.\n​\nCustomer Experience\nOnce customers buy your product or subscribes to your tier, they will automatically receive a unique license key. It’s easily accessible to them under their purchases page.\nCustomers can:\nView & copy their license key\nSee expiration date (if applicable)\nSee usage left (if applicable)\nDeactivate activations (if enabled)\n​\nIntegrate API\nIt’s super easy and straightforward to integrate Polar license keys into your application, library or API.\n​\nActivate License Keys (Optional)\nIn case you’ve setup license keys to have a maximum amount of activation instances, e.g user devices. You’ll then need to create an activation instance prior to validating license keys / activation.\nNo activation limit? You can skip this step.\nCopy\nAsk AI\ncurl -X POST https://api.polar.sh/v1/customer-portal/license-keys/activate\n-H \"Content-Type: application/json\"\n-d '{\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"label\": \"hello\",\n  \"conditions\": { \"major_version\": 1 },\n  \"meta\": { \"ip\": \"84.19.145.194\" }\n}'\n\n​\nkey\nstringrequired\nReplace with the users license key (from input in your app).\n​\norganization_id\nstringrequired\nReplace with your organization ID here found in your settings.\n​\nlabel\nstringrequired\nSet a label to associate with this specific activation.\n​\nconditions\nobject\nJSON object with custom conditions to validate against in the future, e.g IP, mac address, major version etc.\n​\nmeta\nobject\nJSON object with metadata to store for the users activation.\n​\nResponse (200 OK)\nCopy\nAsk AI\n{\n  \"id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n  \"license_key_id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n  \"label\": \"hello\",\n  \"meta\": {\n    \"ip\": \"84.19.145.194\"\n  },\n  \"created_at\": \"2024-09-02T13:48:13.251621Z\",\n  \"modified_at\": null,\n  \"license_key\": {\n    \"id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n    \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n    \"user_id\": \"d910050c-be66-4ca0-b4cc-34fde514f227\",\n    \"benefit_id\": \"32a8eda4-56cf-4a94-8228-792d324a519e\",\n    \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n    \"display_key\": \"****-E304DA\",\n    \"status\": \"granted\",\n    \"limit_activations\": 3,\n    \"usage\": 0,\n    \"limit_usage\": 100,\n    \"validations\": 0,\n    \"last_validated_at\": null,\n    \"expires_at\": \"2026-08-30T08:40:34.769148Z\"\n  }\n}\n\n​\nValidate License Keys\nFor each session of your premium app, library or API, we recommend you validate the users license key via the /v1/customer-portal/license-keys/validate endpoint.\nCopy\nAsk AI\ncurl -X POST https://api.polar.sh/v1/customer-portal/license-keys/validate\n-H \"Content-Type: application/json\"\n-d '{\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"activation_id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n  \"conditions\": { \"major_version\": 1 },\n  \"increment_usage\": 15\n}'\n\n​\nkey\nstringrequired\nReplace with the users license key (from input in your app).\n​\norganization_id\nstringrequired\nReplace with your organization ID here found in your settings.\n​\nactivation_id\nstring\nThe activation ID to validate - required in case activations limit is enabled and used (above).\n​\nconditions\nobject\nIn case of activation instances. Same exact JSON object as upon registration of the activation.\n​\nincrement_usage\ninteger\nIn case you want to increment usage upon validation.\n​\nResponse (200 OK)\nCopy\nAsk AI\n{\n  \"id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n  \"organization_id\": \"fda84e25-7b55-4d67-916d-60ead04ff61f\",\n  \"user_id\": \"d910050c-be66-4ca0-b4cc-34fde514f227\",\n  \"benefit_id\": \"32a8eda4-56cf-4a94-8228-792d324a519e\",\n  \"key\": \"1C285B2D-6CE6-4BC7-B8BE-ADB6A7E304DA\",\n  \"display_key\": \"****-E304DA\",\n  \"status\": \"granted\",\n  \"limit_activations\": 3,\n  \"usage\": 15,\n  \"limit_usage\": 100,\n  \"validations\": 5,\n  \"last_validated_at\": \"2024-09-02T13:57:00.977363Z\",\n  \"expires_at\": \"2026-08-30T08:40:34.769148Z\",\n  \"activation\": {\n    \"id\": \"b6724bc8-7ad9-4ca0-b143-7c896fcbb6fe\",\n    \"license_key_id\": \"508176f7-065a-4b5d-b524-4e9c8a11ed63\",\n    \"label\": \"hello\",\n    \"meta\": {\n      \"ip\": \"84.19.145.194\"\n    },\n    \"created_at\": \"2024-09-02T13:48:13.251621Z\",\n    \"modified_at\": null\n  }\n}\n\nValidate benefit_id in case of multiple license keys\nWe require organization_id to be provided to avoid cases of Polar license keys being used across Polar organizations erroneously. Otherwise, a valid license key for one organization could be used on another.However, you are required to validate and scope license keys more narrowly within your organization if necessary. Offering more than one type of license key? Be sure to validate their unique benefit_id in the responses.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nFile Downloads\nOffer digital file downloads with ease\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Automate Customer File Downloads - Polar",
    "url": "https://polar.sh/docs/features/benefits/file-downloads",
    "html": "Benefits\nAutomate Customer File Downloads\nCopy page\n\nOffer digital file downloads with ease\n\n​\nSell Digital Products\nYou can easily offer customers and subscribers access to downloadable files with Polar.\nUp to 10GB per file\nUpload any type of file - from ebooks to full-fledged applications\nSHA-256 checksum validation throughout for you and your customers (if desired)\nCustomers get a signed & personal downloadable URL\n​\nCreate Downloadable Benefit\nGo to Benefits in the Dashboard sidebar\nClick + Add Benefit to create a new benefit\nChoose File Downloads as the Type\nYou can now upload the files you want to offer as downloadables for customers.\nDrag & drop files to the dropzone (Feed me some bytes)\nOr click on that area to open a file browser\n​\nChange filename\nClick on the filename to change it inline.\n​\nChange order of files\nYou can drag and drop the files in the order you want.\n​\nReview SHA-256 checksum\nClick on the contextual menu dots and then Copy SHA-256 Checksum\n​\nDelete a file\nClick on the contextual menu dots and then Delete in the menu.\nActive subscribers & customers will lose access too!\nDeleting a file permanently deletes it from Polar and our S3 buckets except for the metadata. Disable the file instead if you don’t want it permanently deleted.\n​\nDisable & Enable Files\nYou can disable files at any point to prevent new customers getting access to it.\nExisting customers retain their access\nCustomers who purchased before the file was disabled will still have access to legacy files. Only new customers will be impacted.\nEnabling or adding files grants access retroactively\nIn case you add more files or re-enable existing ones, all current customers and subscribers with the benefit will be granted access.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDiscord Access\nSell Discord access & roles with ease\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Automate Private GitHub Repo(s) Access - Polar",
    "url": "https://polar.sh/docs/features/benefits/github-access",
    "html": "Benefits\nAutomate Private GitHub Repo(s) Access\nCopy page\n\nSell premium GitHub repository access with ease\n\n​\nSell GitHub Repository Access\nWith Polar you can seamlessly offer your customers and subscribers automated access to private GitHub repositories.\nFully automated collaborator invites\nUnlimited repositories (via multiple benefits) from your organization(s)\nUsers get access upon subscribing & removed on cancellation\nOr get lifetime access upon paying a one-time price (product)\n​\nUse cases\nSponsorware\nAccess to private GitHub discussions & issues for sponsors\nEarly access to new feature development before upstream push\nPremium educational materials & code\nSelf-hosting products\nCourses, starter kits, open core software & more…\n​\nCreate GitHub Repository Benefit\nGo to Benefits in the sidebar\nClick + New Benefit to create a new benefit\nChoose GitHub Repository Access as the Type\nYou first need to Connect your GitHub Account and install a dedicated Polar App for this benefit across the repositories you want to use it with.\nClick Connect your GitHub Account\nWhy do I need to connect GitHub again and install a separate app?\nThis feature requires permission to manage repository collaborators. GitHub Apps does not support progressive permission scope requests. So instead of requesting this sensitive permission from all users (unnecessarily) in our core GitHub Login this feature uses a standalone app instead.\nOnce you’ve authorized our dedicated GitHub App for this feature you’ll be redirected back to Polar and the benefit form - now connected and updated.\n​\nRepository\nSelect the desired repository you want to automate collaborator invites for.\nWhy can I only connect organization repositories vs. personal ones?\nGitHub does not support granular permissions for collaborators on personal repositories - granting them all write permissions instead. Since collaborators would then be able to push changes, releases and more, we do not support personal repositories by default.Want this still? Reach out to us and we can enable it.\n​\nRole\nSelect the role you want to grant collaborators.\nRead (Default & Highly recommended)\nTriage\nWrite\nMaintain\nAdmin\nRead access (read-only) is what 99.9% of cases should use and the others are highly discouraged unless you have special use cases & absolutely know the impact of these permissions. Checkout the GitHub documentation for reference.\nAnyone with read access to a repository can create a pull request (source).\nAdditional Costs for Paid GitHub Organizations\nGitHub treats collaborators as a seat and they will incurr charges accordingly to your billing unless you’re using a free GitHub organization plan. So make sure to confirm you’re on a free plan OR charge sufficiently to offset the costs you’ll need to pay to GitHub.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCredits\nCreate your own Credits benefit\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Automate Discord Invites & Roles - Polar",
    "url": "https://polar.sh/docs/features/benefits/discord-access",
    "html": "Benefits\nAutomate Discord Invites & Roles\nCopy page\n\nSell Discord access & roles with ease\n\nAutomating Discord server invites and roles for customers or subscribers is super easy and powerful with Polar.\nFully automated Discord server invitations\nYou can even setup multiple Discord servers, or…\nOffer different roles for different subscription tiers or products\n​\nCreate Discord Benefit\nClick on Connect your Discord server. You’ll be redirected to Discord where you can grant the Polar App for your desired server.\nNext, you’ll be prompted to approve the permissions our app requires to function. It needs all of them.\n​\nManage Roles\nAccess to your Discord roles. You’ll be able to select which ones to grant to your customers later.\n​\nKick Members\nAbility to kick members who have this benefit and connected Discord with Polar.\n​\nCreate Invite\nAbility to invite members who purchase a product or subscribes to a tier with this benefit.\nYou’re now redirected back to Polar and can finish setting up the Discord benefit on our end.\n​\nConnected Discord server\nThe Discord server you connected cannot be changed. However, you can create multiple benefits and connect more Discord servers if you want.\n​\nGranted role\nWhich Discord role do you want to grant as part of this benefit?\n​\nAdding Benefit to Product\nHead over to the product you want to associate this new Discord benefit with. You should be able to toggle the benefit in the bottom of the Edit Product form.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGitHub Access\nSell premium GitHub repository access with ease\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Integrate Polar with Next.js - Polar",
    "url": "https://polar.sh/docs/guides/nextjs",
    "html": "Framework Guides\nIntegrate Polar with Next.js\nCopy page\n\nIn this guide, we’ll show you how to integrate Polar with Next.js.\n\nFeel free to use our quick-start script to get started inside a new Next.js project:\nCopy\nAsk AI\n# Inside a new Next.js project\nnpx polar-init\n\nConsider following this guide while using the Polar Sandbox Environment. This will allow you to test your integration without affecting your production data.\nA complete code-example of this guide can be found on GitHub.\n​\nInstall the Polar JavaScript SDK\nTo get started, you need to install the Polar JavaScript SDK and the Polar Nextjs helper package. You can do this by running the following command:\nCopy\nAsk AI\npnpm install @polar-sh/sdk @polar-sh/nextjs\n\n​\nSetting up environment variables\n​\nPolar Access Token\nTo authenticate with Polar, you need to create an access token, and supply it to Next.js using a POLAR_ACCESS_TOKEN environment variable.\nYou can create an organization access token from your organization settings.\n​\nConfiguring a Polar API Client\nTo interact with the Polar API, you need to create a new instance of the Polar class. This class uses the provided access token to authenticate with the Polar API.\nCopy\nAsk AI\n// src/polar.ts\nimport { Polar } from \"@polar-sh/sdk\";\n\nexport const api = new Polar({\n  accessToken: process.env.POLAR_ACCESS_TOKEN!,\n  server: \"sandbox\", // Use this option if you're using the sandbox environment - else use 'production' or omit the parameter\n});\n\nRemember to replace sandbox with production when you’re ready to switch to the production environment.\n​\nGenerating Polar Checkout Sessions\nNext up, we need to create a checkout endpoint to handle the creation of checkout sessions.\nGo ahead and create a new GET route in Next.js.\nCopy\nAsk AI\n// src/app/checkout/route.ts\nimport { Checkout } from \"@polar-sh/nextjs\";\n\nexport const GET = Checkout({\n  accessToken: process.env.POLAR_ACCESS_TOKEN!,\n  successUrl: \"/confirmation?checkout_id={CHECKOUT_ID}\",\n  server: \"sandbox\", // Use this option if you're using the sandbox environment - else use 'production' or omit the parameter\n});\n\n​\nHandling Polar Webhooks\nPolar can send you events about various things happening in your organization. This is very useful for keeping your database in sync with Polar checkouts, orders, subscriptions, etc.\nConfiguring a webhook is simple. Head over to your organization’s settings page and click on the “Add Endpoint” button to create a new webhook.\n​\nTunneling webhook events to your local development environment\nIf you’re developing locally, you can use a tool like ngrok to tunnel webhook events to your local development environment. This will allow you to test your webhook handlers without deploying them to a live server.\nRun the following command to start an ngrok tunnel:\nCopy\nAsk AI\nngrok http 3000\n\n​\nAdd Webhook Endpoint\nPoint the Webhook to your-app.com/api/webhook/polar. This must be an absolute URL which Polar can reach. If you use ngrok, the URL will look something like this: https://<your-ngrok-id>.ngrok-free.app/api/webhook/polar.\nSelect which events you want to be notified about. You can read more about the available events in the Events section.\nGenerate a secret key to sign the requests. This will allow you to verify that the requests are truly coming from Polar.\nAdd the secret key to your environment variables.\nCopy\nAsk AI\n# .env\nPOLAR_ACCESS_TOKEN=\"polar_pat...\"\nPOLAR_WEBHOOK_SECRET=\"...\"\n\n​\nSetting up the Webhook handler\nCopy\nAsk AI\n// src/app/api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/nextjs\";\n\nexport const POST = Webhooks({\n\twebhookSecret: process.env.POLAR_WEBHOOK_SECRET,\n\tonPayload: async (payload) => // Handle payload...\n});\n\nThe webhook event is now verified and you can proceed to handle the payload data.\n​\nHandling Webhook Events\nDepending on which events you’ve subscribed to, you’ll receive different payloads. This is where you can update your database, send notifications, etc.\nCopy\nAsk AI\n// src/app/api/webhook/polar/route.ts\nimport { Webhooks } from \"@polar-sh/nextjs\";\n\nexport const POST = Webhooks({\n  webhookSecret: process.env.POLAR_WEBHOOK_SECRET,\n  onPayload: async (payload) => ...,\n  onOrderCreated: async (order) => ...,\n  onCustomerStateChanged: async (customerState) => ...,\n  ...\n});\n\n​\nNotifying the client about the event\nIf you’re building a real-time application, you might want to notify the client about the event. On the confirmation-page, you can listen for the checkout.updated event and update the UI accordingly when it reaches the succeeded status.\n​\nConclusion\nIf you have issues or need support, feel free to join our Discord.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nLaravel\nIn this guide, we'll show you how to integrate Polar with Laravel.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Automated Benefits - Polar",
    "url": "https://polar.sh/docs/features/benefits/introduction",
    "html": "Benefits\nAutomated Benefits\nCopy page\nPolar offers built-in benefit (entitlements) automation for common upsells within the developer & designer ecosystem with more to come.\nCredits. A simple benefit that allows you to credit a customer’s Usage Meter balance.\nLicense Keys. Software license keys that you can customize the branding of.\nFile Downloads. Downloadable files of any kind up to 10GB each.\nGitHub Repository Access. Automatically invite subscribers to private GitHub repo(s).\nDiscord Invite. Automate invitations and granting of roles to subscribers and customers.\n​\nProduct & Subscription Benefits\nProduct and subscription benefits are standalone resources in Polar - connected to one or many products or subscription tiers.\nThis approach is a bit different from other platforms, but offers many advantages:\nEasy to enable the same benefit across multiple products & subscriptions\nYou can change a benefit in one place vs. many\nNo duplicate data or work (error prone)\nMore intuitive UI for you and your customers\nHow customers get access to benefits:\n✅ Active subscribers of tiers with the benefit enabled\n✅ Customers who bought a product with the benefit (lifetime access)\n❌ Subscribers with an expired subscription (cancelled)\n❌ Users who are not customers\n​\nCreating & Managing Benefits\nYou can manage benefits in two ways:\nDirectly within a product create/edit form\nOr via Benefits in your dashboard\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nLicense Keys\nSell license key access to your service, software or APIs with ease\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Checkout API - Polar",
    "url": "https://polar.sh/docs/features/checkout/session",
    "html": "Checkout\nCheckout API\nCopy page\n\nCreate checkout sessions programmatically for complete control\n\nIf you want to integrate more deeply the checkout process with your website or application, you can use our dedicated API.\nThe first step is to create a Checkout session. For this you’ll need at least your Product ID.\nYou can retrieve your Product ID from Products in your dashboard, click on “context-menu” button in front of your product and click on Copy Product ID.\nThe API will return you an object containing all the information about the session, including an URL where you should redirect your customer so they can complete their order.\n​\nMultiple products\nYou can create a checkout session with multiple products. This is useful if you want to allow your customers to choose between different products before they checkout.\n​\nExternal Customer ID\nQuite often, you’ll have your own users management system in your application, where your customer already have an ID. To ease reconciliation between Polar and your system, you can inform us about your customer ID when creating a checkout session through the external_customer_id field.\nAfter a successful checkout, we’ll create a Customer on Polar with the external ID you provided. It’ll be provided through the customer.external_id property in webhooks you may have configured.\n​\nSDK examples\nUsing our SDK, creating a checkout session is quite straightforward.\nTypeScript\nPython\nCopy\nAsk AI\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const checkout = await polar.checkouts.create({\n    products: [\"productId\"]\n  });\n\n  console.log(checkout.url)\n}\n\nrun();\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nTrials\nOffer free trials on your subscriptions\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Product - Polar",
    "url": "https://polar.sh/docs/api-reference/products/update#body-is-archived",
    "html": "Products\nUpdate Product\nCopy page\n\nUpdate a product.\n\nScopes: products:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nproducts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe product ID.\n\nBody\napplication/json\n\nSchema to update a product.\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ntrial_interval\nenum<string> | null\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | null\n\nThe number of interval units for the trial period.\n\nRequired range: 1 <= x <= 1000\n​\nname\nstring | null\n\nThe name of the product.\n\nMinimum length: 3\n​\ndescription\nstring | null\n\nThe description of the product.\n\n​\nrecurring_interval\nenum<string> | null\n\nThe recurring interval of the product. If None, the product is a one-time purchase. Can only be set on legacy recurring products. Once set, it can't be changed.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\ninteger | null\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on. Once set, it can't be changed.**\n\nRequired range: 1 <= x <= 999\n​\nis_archived\nboolean | null\n\nWhether the product is archived. If true, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally.\n\n​\nprices\nPrices · array\n\nList of available prices for this product. If you want to keep existing prices, include them in the list as an ExistingProductPrice object.\n\nExistingProductPrice\nProductPriceFixedCreate\nProductPriceCustomCreate\nProductPriceFreeCreate\nProductPriceSeatBasedCreate\nProductPriceMeteredUnitCreate\n\nShow child attributes\n\n​\nmedias\nstring<uuid4>[] | null\n\nList of file IDs. Each one must be on the same organization as the product, of type product_media and correctly uploaded.\n\n​\nattached_custom_fields\nAttachedCustomFieldCreate · object[] | null\n\nList of custom fields to attach.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nProduct updated.\n\nA product.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nname\nstringrequired\n\nThe name of the product.\n\n​\ndescription\nstring | nullrequired\n\nThe description of the product.\n\n​\nrecurring_interval\nenum<string> | nullrequired\n\nThe recurring interval of the product. If None, the product is a one-time purchase.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\ninteger | nullrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on. None for one-time products.\n\n​\nis_recurring\nbooleanrequired\n\nWhether the product is a subscription.\n\n​\nis_archived\nbooleanrequired\n\nWhether the product is archived and no longer available.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the product.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of prices for this product.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nbenefits\nBenefits · arrayrequired\n\nList of benefits granted by the product.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\n​\nmedias\nProductMediaFileRead · object[]required\n\nList of medias associated to the product.\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nList of custom fields attached to the product.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Product Benefits\nUpdate benefits granted by a product. **Scopes**: `products:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Introduction - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/introduction",
    "html": "Usage Based Billing\nIntroduction\nCopy page\n\nUsage based billing using ingested events\n\nUsage Based Billing is a new feature. We have a lot in store and welcome feedback!\n​\nOverview\nPolar has a powerful Usage Based Billing infrastructure that allows you to charge your customers based on the usage of your application.\nThis is done by ingesting events from your application, creating Meters to represent that usage, and then adding metered prices to Products to charge for it.\n​\nConcepts\n​\nEvents\nEvents are the core of Usage Based Billing. They represent some usage done by a customer in your application. Typical examples of events are:\nA customer consumed AI LLM tokens\nA customer streamed minutes of video\nA customer uploaded a file to your application\nEvents are sent to Polar using the Events Ingestion API and are stored in our database. An event consists of the following fields:\nA name, which is a string that can be used to identify the type of event. For example, ai_usage, video_streamed or file_uploaded.\nA customer_id or external_customer_id, which is Polar’s customer ID or your user’s ID. This is used to identify the customer that triggered the event.\nA metadata object, which is a JSON object that can contain any additional information about the event. This is useful for storing information that can be used to filter the events or compute the actual usage. For example, you can store the duration of the video streamed or the size of the file uploaded.\nHere is an example of an event:\nCopy\nAsk AI\n{\n  \"name\": \"ai_usage\",\n  \"external_customer_id\": \"cus_123\",\n  \"metadata\": {\n    \"model\": \"gpt-4.1-nano\",\n    \"requests\": 1,\n    \"total_tokens\": 77,\n    \"request_tokens\": 58,\n    \"response_tokens\": 19\n  }\n}\n\n​\nMeters\nMeters are there to filter and aggregate the events that are ingested. Said another way, this is how you define what usage you want to charge for, based on the events you send to Polar. For example:\nAI usage meter, which filters the events with the name ai_usage and sums the total_tokens field.\nVideo streaming meter, which filters the events with the name video_streamed and sums the duration field.\nFile upload meter, which filters the events with the name file_uploaded and sums the size field.\nYou can create and manage your meters from the dashboard. Polar is then able to compute the usage over time, both globally and per customer.\n​\nMetered Price\nA metered price is a price that is based on the usage of a meter, which is computed by filtering aggregating the events that are ingested. This is how you charge your customers for the usage of your application.\n​\nMeter Credits benefit\nYou can give credits to your customers on a specific meter. This is done by creating a Meter Credits Benefit, which is a special type of benefit that allows you to give credits to your customers on a specific meter.\nOn a recurring product, the customer will be credited the amount of units specified in the benefit at the beginning of every subscription cycle period — monthly or yearly.\n​\nQuickstart\nGet up and running in 5 minutes\n1\n\nCreate a Meter\n\nMeters consist of filters and an aggregation function. The filter is used to filter the events that should be included in the meter and the aggregation function is used to compute the usage.\n2\n\nAdd metered price to a Product\n\nTo enable usage based billing for a Product, you need to add a metered price to the Product. Metered prices are only applicable to Subscription Products.\n3\n\nIngest Events\n\nNow you’re ready to ingest events from your application. Sending events which match the meter’s filter will increment the meter’s usage for the customer.\n4\n\nCustomer Usage\n\nCustomers can view their estimated charges for each meter in the Customer Portal.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nEvent Ingestion\nIngest events from your application\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Checkout Session - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/create-session",
    "html": "Checkout\nCreate Checkout Session\nCopy page\n\nCreate a checkout session.\n\nScopes: checkouts:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n\nCreate a new checkout session from a list of products.\nCustomers will be able to switch between those products.\n\nMetadata set on the checkout will be copied\nto the resulting order and/or subscription.\n\n​\nproducts\nstring<uuid4>[]required\n\nList of product IDs available to select at that checkout. The first one will be selected by default.\n\nMinimum length: 1\n​\ntrial_interval\nenum<string> | null\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | null\n\nThe number of interval units for the trial period.\n\nRequired range: 1 <= x <= 1000\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\ndiscount_id\nstring<uuid4> | null\n\nID of the discount to apply to the checkout.\n\n​\nallow_discount_codes\nbooleandefault:true\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleandefault:false\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\namount\ninteger | null\n\nAmount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices.\n\nRequired range: 50 <= x <= 99999999\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing. Required for seat-based products.\n\nRequired range: 1 <= x <= 1000\n​\ncustomer_id\nstring<uuid4> | null\n\nID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.\n\n​\nis_business_customer\nbooleandefault:false\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\nexternal_customer_id\nstring | null\n\nID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.\n\n​\ncustomer_name\nstring | null\n\nName of the customer.\n\n​\ncustomer_email\nstring<email> | null\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | null\n​\ncustomer_billing_name\nstring | null\n​\ncustomer_billing_address\nobject | null\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | null\n​\ncustomer_metadata\nobject\n\nKey-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nsubscription_id\nstring<uuid4> | null\n\nID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.\n\n​\nsuccess_url\nstring<uri> | null\n\nURL where the customer will be redirected after a successful payment.You can add the checkout_id={CHECKOUT_ID} query parameter to retrieve the checkout session id.\n\nRequired string length: 1 - 2083\n​\nreturn_url\nstring<uri> | null\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\nRequired string length: 1 - 2083\n​\nembed_origin\nstring | null\n\nIf you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.\n\nResponse\n201\napplication/json\n\nCheckout session created.\n\nCheckout session data retrieved using an access token.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nstatus\nenum<string>required\nStatus of the checkout session.\n\n    - Open: the checkout session was opened.\n    - Expired: the checkout session was expired and is no more accessible.\n    - Confirmed: the user on the checkout session clicked Pay. This is not indicative of the payment's success status.\n    - Failed: the checkout definitely failed for technical reasons and cannot be retried. In most cases, this state is never reached.\n    - Succeeded: the payment on the checkout was performed successfully.\nAvailable options: open, expired, confirmed, succeeded, failed \n​\nclient_secret\nstringrequired\n\nClient secret used to update and complete the checkout session from the client.\n\n​\nurl\nstringrequired\n\nURL where the customer can access the checkout session.\n\n​\nexpires_at\nstring<date-time>required\n\nExpiration date and time of the checkout session.\n\n​\nsuccess_url\nstringrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nreturn_url\nstring | nullrequired\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\n​\nembed_origin\nstring | nullrequired\n\nWhen checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.\n\n​\namount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\n​\ntax_amount\ninteger | nullrequired\n\nSales tax amount in cents. If null, it means there is no enough information yet to calculate it.\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\n​\ncurrency\nstringrequired\n\nCurrency code of the checkout session.\n\n​\nactive_trial_interval\nenum<string> | nullrequired\n\nInterval unit of the trial period, if any. This value is either set from the checkout, if trial_interval is set, or from the selected product.\n\nAvailable options: day, week, month, year \n​\nactive_trial_interval_count\ninteger | nullrequired\n\nNumber of interval units of the trial period, if any. This value is either set from the checkout, if trial_interval_count is set, or from the selected product.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nEnd date and time of the trial period, if any.\n\n​\nproduct_id\nstring<uuid4>required\n\nID of the product to checkout.\n\n​\nproduct_price_id\nstring<uuid4>required\n\nID of the product price to checkout.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount applied to the checkout.\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\nis_discount_applicable\nbooleanrequired\n\nWhether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.\n\n​\nis_free_product_price\nbooleanrequired\n\nWhether the product price is free, regardless of discounts.\n\n​\nis_payment_required\nbooleanrequired\n\nWhether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.\n\n​\nis_payment_setup_required\nbooleanrequired\n\nWhether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.\n\n​\nis_payment_form_required\nbooleanrequired\n\nWhether the checkout requires a payment form, whether because of a payment or payment method setup.\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n​\nis_business_customer\nbooleanrequired\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\ncustomer_name\nstring | nullrequired\n\nName of the customer.\n\n​\ncustomer_email\nstring | nullrequired\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | nullrequired\n​\ncustomer_billing_name\nstring | nullrequired\n​\ncustomer_billing_address\nobject | nullrequired\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | nullrequired\n​\npayment_processor_metadata\nobjectrequired\n\nShow child attributes\n\n​\nbilling_address_fields\nobjectrequired\n\nDetermine which billing address fields should be disabled, optional or required in the checkout form.\n\nShow child attributes\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_customer_id\nstring | nullrequired\n\nID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.\n\n​\ncustomer_external_id\nstring | nullrequireddeprecated\n​\nproducts\nCheckoutProduct · object[]required\n\nList of products available to select.\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nProduct selected to checkout.\n\nShow child attributes\n\n​\nproduct_price\nobjectrequired\n\nPrice of the selected product.\nA recurring price for a product, i.e. a subscription.\n\nDeprecated: The recurring interval should be set on the product itself.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\n\nSchema for a fixed amount discount that is applied once or forever.\n\nCheckoutDiscountFixedOnceForeverDuration\nCheckoutDiscountFixedRepeatDuration\nCheckoutDiscountPercentageOnceForeverDuration\nCheckoutDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nShow child attributes\n\n​\ncustomer_metadata\nobjectrequired\n\nShow child attributes\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\n​\nprice_per_seat\ninteger | null\n\nPrice per seat in cents for the current seat count, based on the applicable tier. Only relevant for seat-based pricing.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Checkout Session\nGet a checkout session by ID. **Scopes**: `checkouts:read` `checkouts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Assign Seat - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-seats/assign",
    "html": "Customer Seats\nAssign Seat\nCopy page\n\nScopes: customer_seats:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-seats\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nsubscription_id\nstring<uuid> | null\n\nSubscription ID. Required if checkout_id and order_id are not provided.\n\n​\ncheckout_id\nstring<uuid> | null\n\nCheckout ID. Used to look up subscription or order from the checkout page.\n\n​\norder_id\nstring<uuid> | null\n\nOrder ID for one-time purchases. Required if subscription_id and checkout_id are not provided.\n\n​\nemail\nstring<email> | null\n\nEmail of the customer to assign the seat to\n\n​\nexternal_customer_id\nstring | null\n\nExternal customer ID for the seat assignment\n\n​\ncustomer_id\nstring<uuid> | null\n\nCustomer ID for the seat assignment\n\n​\nmetadata\nobject | null\n\nAdditional metadata for the seat (max 10 keys, 1KB total)\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid>required\n\nThe seat ID\n\n​\nstatus\nenum<string>required\n\nStatus of the seat\n\nAvailable options: pending, claimed, revoked \n​\nsubscription_id\nstring<uuid> | null\n\nThe subscription ID (for recurring seats)\n\n​\norder_id\nstring<uuid> | null\n\nThe order ID (for one-time purchase seats)\n\n​\ncustomer_id\nstring<uuid> | null\n\nThe assigned customer ID\n\n​\ncustomer_email\nstring | null\n\nThe assigned customer email\n\n​\ninvitation_token_expires_at\nstring<date-time> | null\n\nWhen the invitation token expires\n\n​\nclaimed_at\nstring<date-time> | null\n\nWhen the seat was claimed\n\n​\nrevoked_at\nstring<date-time> | null\n\nWhen the seat was revoked\n\n​\nseat_metadata\nobject | null\n\nAdditional metadata for the seat\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Seats\n**Scopes**: `customer_seats:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Order - Polar",
    "url": "https://polar.sh/docs/api-reference/orders/get",
    "html": "Orders\nGet Order\nCopy page\n\nGet an order by ID.\n\nScopes: orders:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norders\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nstatus\nenum<string>required\nAvailable options: pending, paid, refunded, partially_refunded \n​\npaid\nbooleanrequired\n\nWhether the order has been paid for.\n\nExamples:\n\ntrue\n\n​\nsubtotal_amount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\nExamples:\n\n10000\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\nExamples:\n\n1000\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\nExamples:\n\n9000\n\n​\ntax_amount\nintegerrequired\n\nSales tax amount in cents.\n\nExamples:\n\n720\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\nExamples:\n\n9720\n\n​\napplied_balance_amount\nintegerrequired\n\nCustomer's balance amount applied to this invoice. Can increase the total amount paid, if the customer has a negative balance, or decrease it, if the customer has a positive balance.Amount in cents.\n\nExamples:\n\n0\n\n​\ndue_amount\nintegerrequired\n\nAmount in cents that is due for this order.\n\nExamples:\n\n0\n\n​\nrefunded_amount\nintegerrequired\n\nAmount refunded in cents.\n\nExamples:\n\n0\n\n​\nrefunded_tax_amount\nintegerrequired\n\nSales tax refunded in cents.\n\nExamples:\n\n0\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\nbilling_reason\nenum<string>required\nAvailable options: purchase, subscription_create, subscription_cycle, subscription_update \n​\nbilling_name\nstring | nullrequired\n\nThe name of the customer that should appear on the invoice.\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ninvoice_number\nstringrequired\n\nThe invoice number associated with this order.\n\n​\nis_invoice_generated\nbooleanrequired\n\nWhether an invoice has been generated for this order.\n\n​\ncustomer_id\nstring<uuid4>required\n​\nproduct_id\nstring<uuid4> | nullrequired\n​\ndiscount_id\nstring<uuid4> | nullrequired\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nplatform_fee_amount\nintegerrequired\n\nPlatform fee amount in cents.\n\nExamples:\n\n500\n\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nuser_id\nstring<uuid4>requireddeprecated\n​\nproduct\nobject | nullrequired\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nsubscription\nobject | nullrequired\n\nShow child attributes\n\n​\nitems\nOrderItemSchema · object[]required\n\nLine items composing the order.\n\nShow child attributes\n\n​\ndescription\nstringrequired\n\nA summary description of the order.\n\nExamples:\n\n\"Pro Plan\"\n\n​\nseats\ninteger | null\n\nNumber of seats purchased (for seat-based one-time orders).\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Order\nUpdate an order. **Scopes**: `orders:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Subscription - Polar",
    "url": "https://polar.sh/docs/api-reference/subscriptions/get",
    "html": "Subscriptions\nGet Subscription\nCopy page\n\nGet a subscription by ID.\n\nScopes: subscriptions:read subscriptions:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nsubscriptions\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe subscription ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nA product.\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Subscriptions\nList subscriptions. **Scopes**: `subscriptions:read` `subscriptions:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Customer by External ID - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/get-external#response-external-id",
    "html": "Customers\nGet Customer by External ID\nCopy page\n\nGet a customer by external ID.\n\nScopes: customers:read customers:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\nexternal\n/\n{external_id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nexternal_id\nstringrequired\n\nThe customer external ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nA customer in an organization.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Customer by External ID\nUpdate a customer by external ID. **Scopes**: `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Customer by External ID - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/update-external",
    "html": "Customers\nUpdate Customer by External ID\nCopy page\n\nUpdate a customer by external ID.\n\nScopes: customers:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\nexternal\n/\n{external_id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nexternal_id\nstringrequired\n\nThe customer external ID.\n\nBody\napplication/json\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nemail\nstring<email> | null\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nname\nstring | null\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | null\n\nShow child attributes\n\n​\ntax_id\nany[] | null\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\nResponse\n200\napplication/json\n\nCustomer updated.\n\nA customer in an organization.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Customer by External ID\nDelete a customer by external ID. Immediately cancels any active subscriptions and revokes any active benefits. **Scopes**: `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Customer by External ID - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/delete-external",
    "html": "Customers\nDelete Customer by External ID\nCopy page\n\nDelete a customer by external ID.\n\nImmediately cancels any active subscriptions and revokes any active benefits.\n\nScopes: customers:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\nexternal\n/\n{external_id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nexternal_id\nstringrequired\n\nThe customer external ID.\n\nResponse\n204\n\nCustomer deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Subscription\nGet a subscription by ID. **Scopes**: `subscriptions:read` `subscriptions:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Customer - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/update#body-metadata",
    "html": "Customers\nUpdate Customer\nCopy page\n\nUpdate a customer.\n\nScopes: customers:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe customer ID.\n\nBody\napplication/json\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nHide child attributes\n\n​\nmetadata.{key}\nstring\ninteger\nnumber\nboolean\nRequired string length: 1 - 500\n​\nemail\nstring<email> | null\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nname\nstring | null\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | null\n\nShow child attributes\n\n​\ntax_id\nany[] | null\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\nexternal_id\nstring | null\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\nResponse\n200\napplication/json\n\nCustomer updated.\n\nA customer in an organization.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Customer\nDelete a customer. This action cannot be undone and will immediately: - Cancel any active subscriptions for the customer - Revoke all their benefits - Clear any `external_id` Use it only in the context of deleting a user within your own service. Otherwise, use more granular API endpoints to cancel a specific subscription or revoke certain benefits. Note: The customers information will nonetheless be retained for historic orders and subscriptions. **Scopes**: `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Setup a Payout Account - Polar",
    "url": "https://polar.sh/docs/features/finance/accounts",
    "html": "Finance & Payouts\nSetup a Payout Account\nCopy page\n​\nConnect Payout Account\nYou need to setup an account so that we can issue payouts.\nGo to the Finance page in your Polar dashboard\nClick Setup in the card shown above in your dashboard\nChoose account type & follow their setup instructions\nThis is only required the first time and you can do this proactively too in order - recommended to avoid any additional delays.\n​\nStripe Connect Express\nStripe is the default and recommended option since it enables instant transfers.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAccount Balance\nMonitor your Polar balance without hidden fees\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Implementing Seat-Based Pricing - Polar",
    "url": "https://polar.sh/docs/guides/seat-based-pricing",
    "html": "Guides\nImplementing Seat-Based Pricing\nCopy page\n\nComplete guide to implementing team products with seat-based pricing\n\nThis guide walks you through implementing seat-based pricing for team products, from creating the product to handling seat assignments and claims.\n​\nWhat you’ll build\nBy the end of this guide, you’ll have:\nA seat-based product with tiered pricing (subscription or one-time)\nCheckout flow for purchasing seats\nSeat assignment and management interface\nClaim flow for team members\nThis guide covers both subscription-based and one-time purchase seat-based products. The implementation is similar for both, with key differences in scaling and billing.\n​\nPrerequisites\nPolar organization with seat_based_pricing_enabled feature flag\nPolar SDK installed (npm install @polar-sh/sdk or pip install polar-sdk)\nImportant: Seat-based pricing requires the latest version of the SDK. Make sure to update to the latest version to access all seat-based pricing features.\nBasic understanding of Polar products and subscriptions\nSeat-based pricing is controlled by a feature flag. Contact support to enable it for your organization.\n​\nStep 1: Create a seat-based product\n1\n\nNavigate to Products\n\nIn the Polar dashboard, go to Products and click Create Product.\n2\n\nConfigure basic settings\n\nSet your product name, description, and media. For example:\nSubscription: Team Pro Plan - Professional features for your entire team\nOne-time: Enterprise License Pack - Perpetual team licenses\n3\n\nSelect seat-based pricing\n\nUnder Pricing:\nProduct type: Choose Subscription for recurring billing or One-time for perpetual licenses\nBilling cycle (subscriptions only): Monthly or Yearly\nPricing type: Seat-based\nMin seats: 1 (or your minimum team size)\n4\n\nConfigure pricing tiers\n\nDefine your volume-based pricing:\nTier\tMax Seats\tPrice per Seat\n1\t4\t$10/month\n2\t9\t$9/month\n3\tUnlimited\t$8/month\nExample: A team purchasing 6 seats pays 6 × \n9\n=\n9=54/month.\n5\n\nAdd benefits\n\nConfigure benefits that seat holders will receive:\nLicense Keys\nFile Downloads\nDiscord roles\nCustom benefits\nBenefits are granted when seats are claimed, not at purchase time.\nYou can also create seat-based products via API:\nSubscription example:\nCopy\nAsk AI\nconst subscriptionProduct = await polar.products.create({\n  name: \"Team Pro Plan\",\n  organization_id: \"org_123\",\n  is_recurring: true,\n  prices: [{\n    type: \"recurring\",\n    recurring_interval: \"month\",\n    amount_type: \"seat_based\",\n    price_currency: \"usd\",\n    seat_tiers: [\n      { min_seats: 1, max_seats: 4, price_per_seat: 1000 },   // $10/month\n      { min_seats: 5, max_seats: 9, price_per_seat: 900 },    // $9/month\n      { min_seats: 10, max_seats: null, price_per_seat: 800 } // $8/month\n    ]\n  }]\n});\n\nOne-time purchase example:\nCopy\nAsk AI\nconst oneTimeProduct = await polar.products.create({\n  name: \"Enterprise License Pack\",\n  organization_id: \"org_123\",\n  is_recurring: false,\n  prices: [{\n    type: \"one_time\",\n    amount_type: \"seat_based\",\n    price_currency: \"usd\",\n    seat_tiers: [\n      { min_seats: 1, max_seats: 10, price_per_seat: 5000 },   // $50 per seat\n      { min_seats: 11, max_seats: 50, price_per_seat: 4500 },  // $45 per seat\n      { min_seats: 51, max_seats: null, price_per_seat: 4000 } // $40 per seat\n    ]\n  }]\n});\n\n​\nStep 2: Implement checkout flow\nCreate a checkout session that allows customers to select seat quantity:\nCopy\nAsk AI\nconst checkout = await polar.checkouts.create({\n  product_price_id: \"price_123\",\n  seats: 5, // Customer selects quantity\n  success_url: \"https://yourapp.com/success\",\n  customer_email: \"billing@company.com\"\n});\n\n// Redirect to checkout.url\n\nThe checkout displays:\nPrice per seat based on quantity\nTotal amount\nClear indication this is for team access\nThe checkout automatically calculates pricing based on your tiers. A customer selecting 5 seats will see the \n9\n/\n𝑠\n𝑒\n𝑎\n𝑡\n𝑝\n𝑟\n𝑖\n𝑐\n𝑒\n,\n𝑡\n𝑜\n𝑡\n𝑎\n𝑙\n𝑖\n𝑛\n𝑔\n9/seatprice,totaling45.\n​\nStep 3: Handle post-purchase webhook\nListen for purchase webhooks to know when a customer buys seats:\nCopy\nAsk AI\n// Webhook handler\napp.post('/webhooks/polar', async (req, res) => {\n  const event = req.body;\n\n  // For subscriptions\n  if (event.type === 'subscription.created') {\n    const subscription = event.data;\n\n    if (subscription.product.has_seat_based_price) {\n      await notifyBillingManager(subscription.customer_id, {\n        message: `Your ${subscription.seats}-seat subscription is active!`,\n        manage_seats_url: `https://yourapp.com/seats/subscription/${subscription.id}`\n      });\n    }\n  }\n\n  // For one-time purchases\n  if (event.type === 'order.created') {\n    const order = event.data;\n\n    if (order.seats) {\n      await notifyBillingManager(order.customer_id, {\n        message: `Your ${order.seats} perpetual seat licenses have been purchased!`,\n        manage_seats_url: `https://yourapp.com/seats/order/${order.id}`\n      });\n    }\n  }\n\n  res.sendStatus(200);\n});\n\n​\nStep 4: Build seat management interface\nCreate an interface for billing managers to assign seats:\nCopy\nAsk AI\n// List available seats (works for both subscriptions and orders)\nasync function getSeatInfo(params: { subscription_id?: string; order_id?: string }) {\n  const { seats, available_seats, total_seats } =\n    await polar.customerSeats.list(params);\n\n  return {\n    seats,\n    available: available_seats,\n    total: total_seats,\n    canAssign: available_seats > 0\n  };\n}\n\n// Assign a seat (works for both subscriptions and orders)\nasync function assignSeat(\n  params: { subscription_id?: string; order_id?: string },\n  email: string,\n  metadata?: Record<string, any>\n) {\n  try {\n    const seat = await polar.customerSeats.assign({\n      ...params,\n      email: email,\n      metadata: metadata // e.g., { department: \"Engineering\" }\n    });\n\n    return {\n      success: true,\n      seat: seat,\n      message: `Invitation sent to ${email}`\n    };\n  } catch (error) {\n    if (error.status === 400) {\n      return {\n        success: false,\n        error: \"No seats available or customer already has a seat\"\n      };\n    }\n    throw error;\n  }\n}\n\n// Example usage:\n// For subscriptions: getSeatInfo({ subscription_id: \"sub_123\" })\n// For orders: getSeatInfo({ order_id: \"order_456\" })\n\nExample UI component (React):\nCopy\nAsk AI\nfunction SeatManagement({ subscriptionId }: { subscriptionId: string }) {\n  const [seatInfo, setSeatInfo] = useState(null);\n  const [email, setEmail] = useState(\"\");\n\n  useEffect(() => {\n    loadSeats();\n  }, [subscriptionId]);\n\n  async function loadSeats() {\n    const info = await getSeatInfo(subscriptionId);\n    setSeatInfo(info);\n  }\n\n  async function handleAssign() {\n    const result = await assignSeat(subscriptionId, email, {\n      role: \"Developer\"\n    });\n\n    if (result.success) {\n      setEmail(\"\");\n      loadSeats(); // Refresh list\n      toast.success(\"Invitation sent!\");\n    }\n  }\n\n  return (\n    <div>\n      <h2>Seat Management</h2>\n      <p>{seatInfo?.available} of {seatInfo?.total} seats available</p>\n\n      {/* Assign new seat */}\n      <div>\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"team-member@company.com\"\n        />\n        <button\n          onClick={handleAssign}\n          disabled={!seatInfo?.canAssign}\n        >\n          Assign Seat\n        </button>\n      </div>\n\n      {/* List existing seats */}\n      <table>\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Status</th>\n            <th>Role</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {seatInfo?.seats.map(seat => (\n            <tr key={seat.id}>\n              <td>{seat.customer_email}</td>\n              <td>\n                <SeatStatusBadge status={seat.status} />\n              </td>\n              <td>{seat.seat_metadata?.role}</td>\n              <td>\n                {seat.status === 'pending' && (\n                  <button onClick={() => resendInvitation(seat.id)}>\n                    Resend\n                  </button>\n                )}\n                {seat.status === 'claimed' && (\n                  <button onClick={() => revokeSeat(seat.id)}>\n                    Revoke\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\n​\nStep 5: Implement seat claim flow\nWhen a team member receives an invitation email, they’ll click a link with the invitation token. Build a claim page:\nCopy\nAsk AI\n// Claim page route: /claim?token=abc123...\n\nasync function handleClaimPage(token: string) {\n  // Get claim information (no auth required)\n  const claimInfo = await polar.customerSeats.getClaimInfo({\n    invitation_token: token\n  });\n\n  if (!claimInfo.can_claim) {\n    return {\n      error: \"This invitation has expired or already been claimed\"\n    };\n  }\n\n  return {\n    product: claimInfo.product_name,\n    organization: claimInfo.organization_name,\n    email: claimInfo.customer_email\n  };\n}\n\nasync function claimSeat(token: string) {\n  const { seat, customer_session_token } =\n    await polar.customerSeats.claim({\n      invitation_token: token\n    });\n\n  // Store the customer session token\n  // This allows immediate portal access\n  localStorage.setItem('polar_session', customer_session_token);\n\n  return {\n    success: true,\n    seat: seat,\n    sessionToken: customer_session_token\n  };\n}\n\nExample claim page (React):\nCopy\nAsk AI\nfunction ClaimPage() {\n  const [token] = useSearchParams();\n  const [claimInfo, setClaimInfo] = useState(null);\n  const [claiming, setClaiming] = useState(false);\n\n  useEffect(() => {\n    loadClaimInfo();\n  }, [token]);\n\n  async function loadClaimInfo() {\n    const info = await handleClaimPage(token.get('token'));\n    setClaimInfo(info);\n  }\n\n  async function handleClaim() {\n    setClaiming(true);\n    try {\n      const result = await claimSeat(token.get('token'));\n\n      // Redirect to customer portal\n      window.location.href = `/portal?session=${result.sessionToken}`;\n    } catch (error) {\n      toast.error(\"Failed to claim seat\");\n      setClaiming(false);\n    }\n  }\n\n  if (claimInfo?.error) {\n    return <div>Error: {claimInfo.error}</div>;\n  }\n\n  return (\n    <div>\n      <h1>You've been invited!</h1>\n      <p>\n        Join {claimInfo?.organization}'s {claimInfo?.product} plan\n      </p>\n      <p>Email: {claimInfo?.email}</p>\n\n      <button onClick={handleClaim} disabled={claiming}>\n        {claiming ? \"Claiming...\" : \"Claim My Seat\"}\n      </button>\n    </div>\n  );\n}\n\n​\nStep 6: Handle benefit granting\nAfter a seat is claimed, benefits are granted automatically via background jobs. Listen for webhooks to track this:\nCopy\nAsk AI\napp.post('/webhooks/polar', async (req, res) => {\n  const event = req.body;\n\n  if (event.type === 'benefit_grant.created') {\n    const grant = event.data;\n\n    // A team member received their benefits\n    console.log(`Benefit ${grant.benefit_id} granted to ${grant.customer_id}`);\n\n    // Update your app (e.g., create license, grant access)\n    await grantAccess(grant.customer_id, grant.benefit);\n  }\n\n  if (event.type === 'benefit_grant.revoked') {\n    const grant = event.data;\n\n    // A seat was revoked\n    await revokeAccess(grant.customer_id, grant.benefit);\n  }\n\n  res.sendStatus(200);\n});\n\n​\nStep 7: Implement seat revocation\nAllow billing managers to revoke seats:\nCopy\nAsk AI\nasync function revokeSeat(seatId: string) {\n  const revokedSeat = await polar.customerSeats.revoke({\n    seat_id: seatId\n  });\n\n  // Benefits are automatically revoked via webhook\n  return {\n    success: true,\n    seat: revokedSeat,\n    message: \"Seat revoked successfully\"\n  };\n}\n\nRevoking a seat immediately removes access but does not issue a refund. The billing manager continues to pay for all purchased seats.\n​\nStep 8: Handle scaling\nFor subscriptions, allow billing managers to add or reduce seats:\nCopy\nAsk AI\nasync function addSeats(subscriptionId: string, newTotal: number) {\n  // Update subscription seat count\n  const subscription = await polar.subscriptions.update({\n    id: subscriptionId,\n    seats: newTotal\n  });\n\n  // New seats are immediately available for assignment\n  return subscription;\n}\n\nasync function reduceSeats(subscriptionId: string, newTotal: number) {\n  const { seats } = await polar.customerSeats.list({\n    subscription_id: subscriptionId\n  });\n\n  const claimedCount = seats.filter(s => s.status === 'claimed').length;\n\n  if (newTotal < claimedCount) {\n    throw new Error(\n      `Cannot reduce to ${newTotal} seats. ${claimedCount} seats are currently claimed. Revoke seats first.`\n    );\n  }\n\n  // Update will take effect at next renewal\n  const subscription = await polar.subscriptions.update({\n    id: subscriptionId,\n    seats: newTotal\n  });\n\n  return subscription;\n}\n\nFor one-time purchases, customers buy additional seats via new orders:\nCopy\nAsk AI\nasync function purchaseMoreSeats(productId: string, additionalSeats: number) {\n  // Create a new checkout for additional seats\n  const checkout = await polar.checkouts.create({\n    product_id: productId,\n    seats: additionalSeats,\n    success_url: \"https://yourapp.com/success\"\n  });\n\n  // Each order is independent with its own seat pool\n  return checkout;\n}\n\nFor one-time purchases, each order has its own independent seat pool. Customers can purchase additional seats anytime by creating a new order. All seats remain perpetual.\n​\nBest Practices\n​\n1. Validate seat availability\nAlways check available seats before showing the assignment form:\nCopy\nAsk AI\nif (available_seats === 0) {\n  return (\n    <div>\n      All seats are assigned.\n      <button onClick={upgradeSubscription}>\n        Add More Seats\n      </button>\n    </div>\n  );\n}\n\n​\n2. Use metadata effectively\nStore useful context in seat metadata:\nCopy\nAsk AI\nawait polar.customerSeats.assign({\n  subscription_id: subId,\n  email: \"dev@company.com\",\n  metadata: {\n    department: \"Engineering\",\n    role: \"Senior Developer\",\n    cost_center: \"R&D\",\n    manager: \"jane@company.com\"\n  }\n});\n\n​\n3. Handle expired tokens gracefully\nCopy\nAsk AI\ntry {\n  await claimSeat(token);\n} catch (error) {\n  if (error.status === 400) {\n    // Show resend option\n    return \"This invitation has expired. Contact your admin to resend.\";\n  }\n}\n\n​\n4. Track utilization\nMonitor seat usage to identify upsell opportunities:\nCopy\nAsk AI\nconst { seats, available_seats, total_seats } = await getSeatInfo(subId);\nconst utilization = ((total_seats - available_seats) / total_seats) * 100;\n\nif (utilization > 80) {\n  // Suggest adding more seats\n  showUpgradePrompt();\n}\n\n​\n5. Clear communication\nMake it clear to billing managers that:\nThey won’t receive direct access to benefits\nSeats must be assigned to team members\nRevocation doesn’t refund costs\nFor subscriptions: Reducing seats requires revoking claims first\nFor one-time purchases: Seats are perpetual and non-refundable\n​\nCommon Patterns\n​\nBulk seat assignment\nCopy\nAsk AI\nasync function assignMultipleSeats(\n  subscriptionId: string,\n  emails: string[]\n) {\n  const results = await Promise.allSettled(\n    emails.map(email =>\n      polar.customerSeats.assign({\n        subscription_id: subscriptionId,\n        email: email\n      })\n    )\n  );\n\n  const succeeded = results.filter(r => r.status === 'fulfilled');\n  const failed = results.filter(r => r.status === 'rejected');\n\n  return {\n    succeeded: succeeded.length,\n    failed: failed.length,\n    errors: failed.map(f => f.reason)\n  };\n}\n\n​\nSyncing with your user system\nCopy\nAsk AI\n// When a user joins your system\nasync function onUserSignup(email: string, organizationId: string) {\n  // Check if they have a pending seat\n  const subscriptions = await getOrganizationSubscriptions(organizationId);\n\n  for (const sub of subscriptions) {\n    const { seats } = await polar.customerSeats.list({\n      subscription_id: sub.id\n    });\n\n    const pendingSeat = seats.find(s =>\n      s.status === 'pending' && s.customer_email === email\n    );\n\n    if (pendingSeat) {\n      // Auto-claim on signup\n      const claimLink = `/claim?token=${pendingSeat.invitation_token}`;\n      return { shouldClaim: true, claimLink };\n    }\n  }\n}\n\n​\nCustom portal integration\nCopy\nAsk AI\n// Display team subscriptions in your app\nasync function getTeamSubscriptions(customerId: string) {\n  const subs = await polar.customerPortal.seats.listSubscriptions({\n    customer_id: customerId\n  });\n\n  return subs.map(sub => ({\n    product: sub.product.name,\n    status: sub.status,\n    role: sub.seat_metadata?.role,\n    expires: sub.current_period_end\n  }));\n}\n\n​\nTroubleshooting\n​\nSeats not appearing\nEnsure the feature flag is enabled:\nCopy\nAsk AI\nseat_based_pricing_enabled: true\n\n​\nBenefits not granted after claim\nCheck webhook logs for benefit_grant.created events. Benefits are granted asynchronously via background jobs.\n​\nCannot reduce seats\nMake sure to revoke seats before reducing the subscription seat count. You cannot reduce below the currently claimed count.\n​\nClaim link expired\nInvitation tokens expire after 24 hours. Have the billing manager resend the invitation:\nCopy\nAsk AI\nawait polar.customerSeats.resend({ seat_id: seatId });\n\n​\nNext Steps\nReview the Seat-Based Pricing Feature Documentation\nExplore the Customer Seats API Reference\nSet up webhook handlers for real-time updates\nLearn about Customer Portal customization\n​\nNeed Help?\nJoin our Discord community or contact support for assistance with seat-based pricing implementation.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate product variants\nLearn how create product variants in Polar and how customers can easily switch between them in the customer portal.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "How to create product variants - Polar",
    "url": "https://polar.sh/docs/guides/create-variants",
    "html": "Guides\nHow to create product variants\nCopy page\n\nLearn how create product variants in Polar and how customers can easily switch between them in the customer portal.\n\n​\nCreating product variants (3 subscription products)\n1\n\nGo to Products Catalogue\n\nIn the Polar dashboard sidebar, navigate to Products > Catalogue for your organization. You can also go directly to:\nhttps://polar.sh/dashboard/${org_slug}/products\n2\n\nCreate a product\n\nClick on New Product and fill the product information. Here, we are creating a monthly subscription product Basic version with cost $20.\nYour product catalogue should now show this product as follows:\n3\n\nSimilarly, create two more products\n\nClick on New Product and create two more subscription products one by one.\nMid version: Fill the product information. We create a monthly subscription product named Mid version with cost $30.\nAdvanced version: We create a monthly subscription product named Advanced version with cost $40.\nProduct Catalogue: You should be able to see all your products on Product Catalogue.\n​\nCreating checkout links with variants\n1\n\nNavigate to Checkout Links in the dashboard\n\nIn the Polar dashboard sidebar, navigate to Products > Checkout Links. You can also go directly to:\nhttps://polar.sh/dashboard/${org_slug}/products/checkout-links\n2\n\nCreate a Checkout Link\n\nClick on New Link and select all your products which you want to offer as variants.\nAt this step, you may add a label, success URL and metadata. You may also configure whether discount codes are allowed and whether billing address is required from customers. Click on Create Link after adding your configurations.\n3\n\nAccessing the checkout link\n\nYou should be able to see your label name in Checkout Links. In our case, 3 products is the default label name assigned by the system.\nClick on your label to see the checkout link.\nYou can copy this link and share to your customers for them to purchase a variant.\n​\nPurchasing from variants\n1\n\nPurchasing a product\n\nOn opening the checkout link, the customer will need to select the variant they want to purchase and fill their email address and card details.\n2\n\nAccess email for upgrade/downgrade link\n\nOnce the customer has purchased the subscription, they will receive an email containing the link to access their purchase.\n​\nDowngrading to another product variant\n1\n\nOpen Customer Portal and click on Change Plan\n\nOn opening the link from the email received, the customer needs to click on Change Plan.\n2\n\nSelect the desired plan\n\nThen, they can select the plan they want to downgrade to and click on Change Plan.\n3\n\nDowngraded successfully\n\nNow, the product is changed to Basic version instead of Mid version on the portal.\n​\nUpgrading to another product variant\n1\n\nOpen Customer Portal and click on Change Plan\n\nOn opening the link from the email received, the customer needs to click on Change Plan.\n2\n\nSelect the desired plan\n\nThen, they need to select the variant they want to upgrade to, Advanced version and click on Change Plan.\n3\n\nUpgraded successfully\n\nNow, the product is changed to Advanced version on the portal.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDisable subscription changes in customer portal\nLearn how to disable the option for customers to upgrade or downgrade subscription plans from the customer portal.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "How to disable subscription upgrades/downgrades in customer portal - Polar",
    "url": "https://polar.sh/docs/guides/disable-subscription-changes-in-customer-portal",
    "html": "Guides\nHow to disable subscription upgrades/downgrades in customer portal\nCopy page\n\nLearn how to disable the option for customers to upgrade or downgrade subscription plans from the customer portal.\n\n1\n\nGo to Organization Settings\n\nIn the Polar dashboard sidebar, click on Settings. You can also go directly to:\nhttps://polar.sh/dashboard/${org_slug}/settings\nScroll down to Subscriptions section.\n2\n\nToggle Allow price changes\n\nToggle OFF Allow price changes to prevent customers from upgrading or downgrading their subscriptions from the customer portal.\n3\n\nSave the changes\n\nClick Save in the Subscriptions section to save the changed settings.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAllow multiple subscriptions per customer\nLearn how to allow multiple subscriptions per customer in Polar.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "How to allow multiple subscriptions per customer - Polar",
    "url": "https://polar.sh/docs/guides/allow-multiple-subscriptions-per-customer",
    "html": "Guides\nHow to allow multiple subscriptions per customer\nCopy page\n\nLearn how to allow multiple subscriptions per customer in Polar.\n\n1\n\nGo to Organization Settings\n\nIn the Polar dashboard sidebar, click on Settings. You can also go directly to:\nhttps://polar.sh/dashboard/${org_slug}/settings\nScroll down to Subscriptions section.\n2\n\nToggle Allow multiple subscriptions\n\nToggle ON Allow multiple subscriptions to allow multiple subscriptions per customer.\n3\n\nSave the changes\n\nClick Save in the Subscriptions section to save the changed settings.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nPerform subscription downgrades\nLearn how to downgrade a subscription as a merchant or a customer.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "How to perform subscription downgrades - Polar",
    "url": "https://polar.sh/docs/guides/subscription-downgrades",
    "html": "Guides\nHow to perform subscription downgrades\nCopy page\n\nLearn how to downgrade a subscription as a merchant or a customer.\n\n​\nDowngrading a subscription as a merchant\n1\n\nGo to Sales > Subscriptions\n\nIn the Polar dashboard sidebar, navigate to Sales > Subscriptions for your organization. You can also go directly to:\nhttps://polar.sh/dashboard/${org_slug}/sales/subscriptions\n2\n\nSelect the subscription to be downgraded\n\nClick on the subscription you want to downgrade. The subscription details page opens up as shown below. Click on Update Subscription.\n3\n\nChoose the plan and the proration behavior\n\nSelect the New product (plan to downgrade to) and the Proration behavior from the dropdown menu.\nRegardless of the option, the subscription is downgraded immediately, only the invoicing happens according to the selected Proration behaior.\nThere are two types of proration:\nNext invoice: The customer is charged (or credited) in the upcoming invoice for the difference.\nInvoice immediately: The customer is charged (or credited) right away for the difference.\nThen, click on Update Subscription.\n4\n\nSuccessful downgrade!\n\nThe subscription is successfully downgraded to Basic version.\nNote that merchants can disable customer-level upgrades or downgrades in the portal by toggling OFF Allow price change setting.\n​\nDowngrading a subscription as a customer\n1\n\nOpen email and click the purchase link\n\nOpen the email you received after purchasing the subscription. Click the Access my Purchase link to go to the Customer Portal, where you can downgrade your subscription.\n2\n\nBrowse Overview > Subscriptions in Customer Portal\n\nIn the Overview tab of Customer Portal, scroll to Subscriptions and click on Change Plan.\n3\n\nSelect the desired plan\n\nSelect the plan you want to downgrade to and click on Change Plan.\n4\n\nSuccessful downgrade!\n\nThe subscription is successfully downgraded to Basic version.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nPerform subscription upgrades\nLearn how to upgrade a subscription as a merchant or a customer.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "How to perform subscription upgrades - Polar",
    "url": "https://polar.sh/docs/guides/subscription-upgrades",
    "html": "Guides\nHow to perform subscription upgrades\nCopy page\n\nLearn how to upgrade a subscription as a merchant or a customer.\n\n​\nUpgrading a subscription as a merchant\n1\n\nGo to Sales > Subscriptions\n\nIn the Polar dashboard sidebar, navigate to Sales > Subscriptions for your organization. You can also go directly to:\nhttps://polar.sh/dashboard/${org_slug}/sales/subscriptions\n2\n\nSelect the subscription to be upgraded\n\nClick on the subscription you want to upgrade. The subscription details page opens up as shown below. Click on Update Subscription.\n3\n\nChoose the plan and the proration behavior\n\nSelect the New product (plan to upgrade to) and the Proration behavior from the dropdown menu.\nRegardless of the option, the subscription is upgraded immediately, only the invoicing happens according to the selected Proration behaior.\nThere are two types of proration:\nNext invoice: The customer is charged (or credited) in the upcoming invoice for the difference.\nInvoice immediately: The customer is charged (or credited) right away for the difference.\nThen, click on Update Subscription.\n4\n\nSuccessful upgrade!\n\nThe subscription is successfully upgraded to Advanced version.\nNote that merchants can disable customer-level upgrades or downgrades in the portal by toggling OFF Allow price change setting.\n​\nUpgrading subscription as a customer\n1\n\nOpen email and click the purchase link\n\nOpen the email you received after purchasing the subscription. Click the Access my Purchase link to go to the Customer Portal, where you can upgrade your subscription.\n2\n\nBrowse Overview > Subscriptions in Customer Portal\n\nIn the Overview tab of Customer Portal, scroll to Subscriptions and click on Change Plan.\n3\n\nSelect the desired plan\n\nSelect the plan you want to upgrade to and click on Change Plan.\n4\n\nSuccessful upgrade!\n\nThe subscription is successfully upgraded to Advanced version.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nPerform subscription downgrades\nLearn how to downgrade a subscription as a merchant or a customer.\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Customer - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/get-customer",
    "html": "Customer Portal API\nGet Customer\nCopy page\n\nGet authenticated customer.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\ncustomers\n/\nme\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nResponse\n200 - application/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nemail\nstringrequired\n​\nemail_verified\nbooleanrequired\n​\nname\nstring | nullrequired\n​\nbilling_name\nstring | nullrequired\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\noauth_accounts\nobjectrequired\n\nShow child attributes\n\n​\ndefault_payment_method_id\nstring<uuid4> | null\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Organization\nGet a customer portal's organization by slug.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Organization - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/get-organization",
    "html": "Customer Portal API\nGet Organization\nCopy page\n\nGet a customer portal’s organization by slug.\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\norganizations\n/\n{slug}\nTry it\nPath Parameters\n​\nslug\nstringrequired\n\nThe organization slug.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nSchema of an organization and related data for customer portal.\n\n​\norganization\nobjectrequired\n\nShow child attributes\n\n​\nproducts\nCustomerProduct · object[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Customer Session\nCreate a customer session. **Scopes**: `customer_sessions:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Customer Session - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/sessions/create",
    "html": "Sessions\nCreate Customer Session\nCopy page\n\nCreate a customer session.\n\nScopes: customer_sessions:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-sessions\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nCustomerSessionCustomerIDCreate\nCustomerSessionCustomerExternalIDCreate\n\nSchema for creating a customer session using a customer ID.\n\n​\ncustomer_id\nstring<uuid4>required\n\nID of the customer to create a session for.\n\n​\nreturn_url\nstring<uri> | null\n\nWhen set, a back button will be shown in the customer portal to return to this URL.\n\nRequired string length: 1 - 2083\nExamples:\n\n\"https://example.com/account\"\n\nResponse\n201\napplication/json\n\nCustomer session created.\n\nA customer session that can be used to authenticate as a customer.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ntoken\nstringrequired\n​\nexpires_at\nstring<date-time>required\n​\nreturn_url\nstring | nullrequired\n​\ncustomer_portal_url\nstringrequired\n​\ncustomer_id\nstring<uuid4>required\n​\ncustomer\nobjectrequired\n\nA customer in an organization.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Subscription\nGet a subscription for the authenticated customer. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Validate License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/license-keys/validate",
    "html": "License Keys\nValidate License Key\nCopy page\n\nValidate a license key.\n\nThis endpoint doesn’t require authentication and can be safely used on a public client, like a desktop application or a mobile app. If you plan to validate a license key on a server, use the /v1/license-keys/validate endpoint instead.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nlicense-keys\n/\nvalidate\nTry it\nBody\napplication/json\n​\nkey\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\nactivation_id\nstring<uuid4> | null\n​\nbenefit_id\nstring<uuid4> | null\n\nThe benefit ID.\n\n​\ncustomer_id\nstring<uuid4> | null\n​\nincrement_usage\ninteger | null\n​\nconditions\nobject\n\nKey-value object allowing you to set conditions that must match when validating the license key.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\ncustomer_id\nstring<uuid4>required\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nbenefit_id\nstring<uuid4>required\n\nThe benefit ID.\n\n​\nkey\nstringrequired\n​\ndisplay_key\nstringrequired\n​\nstatus\nenum<string>required\nAvailable options: granted, revoked, disabled \n​\nlimit_activations\ninteger | nullrequired\n​\nusage\nintegerrequired\n​\nlimit_usage\ninteger | nullrequired\n​\nvalidations\nintegerrequired\n​\nlast_validated_at\nstring<date-time> | nullrequired\n​\nexpires_at\nstring<date-time> | nullrequired\n​\nactivation\nobject | null\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nActivate License Key\nActivate a license key instance. > This endpoint doesn't require authentication and can be safely used on a public > client, like a desktop application or a mobile app. > If you plan to validate a license key on a server, use the `/v1/license-keys/activate` > endpoint instead.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Activate License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/license-keys/activate",
    "html": "License Keys\nActivate License Key\nCopy page\n\nActivate a license key instance.\n\nThis endpoint doesn’t require authentication and can be safely used on a public client, like a desktop application or a mobile app. If you plan to validate a license key on a server, use the /v1/license-keys/activate endpoint instead.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nlicense-keys\n/\nactivate\nTry it\nYou only need to use this endpoint if you have device activations enabled on the license key benefit. You then use this endpoint to reserve an allocation for a specific device. Storing the unique activation ID from the response on the device and using it as extra validation in the /validate endpoint.\nNot using activations? Just use the /validate endpoint directly instead.\nBody\napplication/json\n​\nkey\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\nlabel\nstringrequired\n​\nconditions\nobject\n\nKey-value object allowing you to set conditions that must match when validating the license key.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nmeta\nobject\n\nKey-value object allowing you to store additional information about the activation\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n​\nlicense_key_id\nstring<uuid4>required\n​\nlabel\nstringrequired\n​\nmeta\nobjectrequired\n\nShow child attributes\n\n​\ncreated_at\nstring<date-time>required\n​\nmodified_at\nstring<date-time> | nullrequired\n​\nlicense_key\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDeactivate License Key\nDeactivate a license key instance. > This endpoint doesn't require authentication and can be safely used on a public > client, like a desktop application or a mobile app. > If you plan to validate a license key on a server, use the `/v1/license-keys/deactivate` > endpoint instead.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Deactivate License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/license-keys/deactivate",
    "html": "License Keys\nDeactivate License Key\nCopy page\n\nDeactivate a license key instance.\n\nThis endpoint doesn’t require authentication and can be safely used on a public client, like a desktop application or a mobile app. If you plan to validate a license key on a server, use the /v1/license-keys/deactivate endpoint instead.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nlicense-keys\n/\ndeactivate\nTry it\nBody\napplication/json\n​\nkey\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\nactivation_id\nstring<uuid4>required\nResponse\n204\n\nLicense key activation deactivated.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet License Key\nGet a license key. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Custom Benefit - Polar",
    "url": "https://polar.sh/docs/features/benefits/custom",
    "html": "Benefits\nCustom Benefit\nCopy page\n\nCreate your own Custom benefit\n\nYou can add a simple, custom benefit, which allows you to attach a note to paying customers.\n​\nCustom Notes\nSecret message only customers can see, e.g Cal.com link, private email for support etc.\nFor custom integrations you can also distinguish benefits granted to customers to offer even more bespoke user benefits.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCheckout Links\nSell your digital products with ease by sharing a checkout link to select products\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Checkout Session - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/get-session#response-metadata",
    "html": "Checkout\nGet Checkout Session\nCopy page\n\nGet a checkout session by ID.\n\nScopes: checkouts:read checkouts:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe checkout session ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nCheckout session data retrieved using an access token.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nstatus\nenum<string>required\nStatus of the checkout session.\n\n    - Open: the checkout session was opened.\n    - Expired: the checkout session was expired and is no more accessible.\n    - Confirmed: the user on the checkout session clicked Pay. This is not indicative of the payment's success status.\n    - Failed: the checkout definitely failed for technical reasons and cannot be retried. In most cases, this state is never reached.\n    - Succeeded: the payment on the checkout was performed successfully.\nAvailable options: open, expired, confirmed, succeeded, failed \n​\nclient_secret\nstringrequired\n\nClient secret used to update and complete the checkout session from the client.\n\n​\nurl\nstringrequired\n\nURL where the customer can access the checkout session.\n\n​\nexpires_at\nstring<date-time>required\n\nExpiration date and time of the checkout session.\n\n​\nsuccess_url\nstringrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nreturn_url\nstring | nullrequired\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\n​\nembed_origin\nstring | nullrequired\n\nWhen checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.\n\n​\namount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\n​\ntax_amount\ninteger | nullrequired\n\nSales tax amount in cents. If null, it means there is no enough information yet to calculate it.\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\n​\ncurrency\nstringrequired\n\nCurrency code of the checkout session.\n\n​\nactive_trial_interval\nenum<string> | nullrequired\n\nInterval unit of the trial period, if any. This value is either set from the checkout, if trial_interval is set, or from the selected product.\n\nAvailable options: day, week, month, year \n​\nactive_trial_interval_count\ninteger | nullrequired\n\nNumber of interval units of the trial period, if any. This value is either set from the checkout, if trial_interval_count is set, or from the selected product.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nEnd date and time of the trial period, if any.\n\n​\nproduct_id\nstring<uuid4>required\n\nID of the product to checkout.\n\n​\nproduct_price_id\nstring<uuid4>required\n\nID of the product price to checkout.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount applied to the checkout.\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\nis_discount_applicable\nbooleanrequired\n\nWhether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.\n\n​\nis_free_product_price\nbooleanrequired\n\nWhether the product price is free, regardless of discounts.\n\n​\nis_payment_required\nbooleanrequired\n\nWhether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.\n\n​\nis_payment_setup_required\nbooleanrequired\n\nWhether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.\n\n​\nis_payment_form_required\nbooleanrequired\n\nWhether the checkout requires a payment form, whether because of a payment or payment method setup.\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n​\nis_business_customer\nbooleanrequired\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\ncustomer_name\nstring | nullrequired\n\nName of the customer.\n\n​\ncustomer_email\nstring | nullrequired\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | nullrequired\n​\ncustomer_billing_name\nstring | nullrequired\n​\ncustomer_billing_address\nobject | nullrequired\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | nullrequired\n​\npayment_processor_metadata\nobjectrequired\n\nShow child attributes\n\n​\nbilling_address_fields\nobjectrequired\n\nDetermine which billing address fields should be disabled, optional or required in the checkout form.\n\nShow child attributes\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nmetadata\nobjectrequired\n\nHide child attributes\n\n​\nmetadata.{key}\nstring\ninteger\nnumber\nboolean\n​\nexternal_customer_id\nstring | nullrequired\n\nID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.\n\n​\ncustomer_external_id\nstring | nullrequireddeprecated\n​\nproducts\nCheckoutProduct · object[]required\n\nList of products available to select.\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nProduct selected to checkout.\n\nShow child attributes\n\n​\nproduct_price\nobjectrequired\n\nPrice of the selected product.\nA recurring price for a product, i.e. a subscription.\n\nDeprecated: The recurring interval should be set on the product itself.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\n\nSchema for a fixed amount discount that is applied once or forever.\n\nCheckoutDiscountFixedOnceForeverDuration\nCheckoutDiscountFixedRepeatDuration\nCheckoutDiscountPercentageOnceForeverDuration\nCheckoutDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nShow child attributes\n\n​\ncustomer_metadata\nobjectrequired\n\nShow child attributes\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\n​\nprice_per_seat\ninteger | null\n\nPrice per seat in cents for the current seat count, based on the applicable tier. Only relevant for seat-based pricing.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Checkout Sessions\nList checkout sessions. **Scopes**: `checkouts:read` `checkouts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Credits Benefit - Polar",
    "url": "https://polar.sh/docs/features/benefits/credits",
    "html": "Benefits\nCredits Benefit\nCopy page\n\nCreate your own Credits benefit\n\nThe Credits benefit allows you to credit a customer’s Usage Meter balance.\n​\nCrediting Usage Meter Balance\nThe Credits benefit will credit a customer’s Usage Meter balance at different points in time depending on the type of product purchased.\n​\nSubscription Products\nThe customer will be credited the amount of units specified in the benefit at the beginning of every subscription cycle period — monthly or yearly.\n​\nOne-Time Products\nThe customer will be credited the amount of units specified in the benefit once at the time of purchase.\n​\nRollover unused credits\nYou can choose to rollover unused credits to the next billing cycle. This means that if a customer doesn’t use all of their credits in a given billing cycle, the remaining credits will be added to their balance for the next billing cycle. To enable this feature, check the “Rollover unused credits” checkbox when creating or editing the Credits benefit.\nIf you change the rollover setting for a benefit, it will only apply to new credits issued after the change. Existing credits will not be affected.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCustom\nCreate your own Custom benefit\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Integrate Polar with Laravel - Polar",
    "url": "https://polar.sh/docs/guides/laravel",
    "html": "Framework Guides\nIntegrate Polar with Laravel\nCopy page\n\nIn this guide, we’ll show you how to integrate Polar with Laravel.\n\nConsider following this guide while using the Polar Sandbox Environment. This will allow you to test your integration without affecting your production data.\n​\nPolar Laravel Example App\nWe’ve created a simple example Laravel application that you can use as a reference.\nView Code on GitHub\n​\nSetting up environment variables\n​\nPolar API Key\nTo authenticate with Polar, you need to create an access token, and supply it to Laravel using a POLAR_API_KEY environment variable.\nYou can create an organization access token from your organization settings.\n​\nFetching Polar Products for display\n​\nCreating the Products Controller\nGo ahead and add the following entry in your routes/web.php file:\nCopy\nAsk AI\n// routes/web.php\nRoute::get('/products', [ProductsController::class, 'handle']);\n\nNext up, create the ProductsController class in the app/Http/Controllers directory:\nCopy\nAsk AI\n// app/Http/Controllers/ProductsController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ProductsController extends Controller\n{\n    public function handle(Request $request)\n    {\n        // Change from sandbox-api.polar.sh -> api.polar.sh when ready to go live\n        // And don't forget to update the .env file with the correct POLAR_ORGANIZATION_ID and POLAR_WEBHOOK_SECRET\n        $data = Http::get('https://sandbox-api.polar.sh/v1/products', [\n            'is_archived' => false,\n        ]);\n\n        $products = $data->json();\n\n        return view('products', ['products' => $products['items']]);\n    }\n}\n\n​\nDisplaying Products\nFinally, create the products view in the resources/views directory:\nCopy\nAsk AI\n// resources/views/products.blade.php\n@foreach ($products as $product)\n    <div>\n        <h3>{{ $product['name'] }}</h3>\n        <a href=\"/checkout?priceId={{ $product['prices'][0]['id'] }}\">Buy</a>\n    </div>\n@endforeach\n\nNotice that we create a link to /checkout with a query parameter priceId. This is the ID of the price that the user will be charged for when they click the “Buy” button. We will configure this route in the next section.\nThat’s it for the products page. You can now display the products to your users, and they will be able to buy them. Let’s now create the checkout endpoint.\n​\nGenerating Polar Checkout Sessions\nThis endpoint will be responsible for creating a new checkout session, redirecting the user to the Polar Checkout page & redirect back to a configured confirmation page.\nGo ahead and create a new entry in your routes/web.php file:\nCopy\nAsk AI\n// routes/web.php\nRoute::get('/checkout', [CheckoutController::class, 'handle']);\n\nNext, create the CheckoutController class in the app/Http/Controllers directory:\nCopy\nAsk AI\n// app/Http/Controllers/CheckoutController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass CheckoutController extends Controller\n{\n    public function handle(Request $request)\n    {\n        $productPriceId = $request->query('priceId', '');\n        // Polar will replace {CHECKOUT_ID} with the actual checkout ID upon a confirmed checkout\n        $confirmationUrl = $request->getSchemeAndHttpHost() . '/confirmation?checkout_id={CHECKOUT_ID}';\n\n        // Change from sandbox-api.polar.sh -> api.polar.sh when ready to go live\n        // And don't forget to update the .env file with the correct POLAR_ORGANIZATION_ID and POLAR_WEBHOOK_SECRET\n        $result = Http::withHeaders([\n            'Authorization' => 'Bearer ' . env('POLAR_API_KEY'),\n            'Content-Type' => 'application/json',\n        ])->post('https://sandbox-api.polar.sh/v1/checkouts/custom/', [\n            'product_price_id' => $productPriceId,\n            'success_url' => $confirmationUrl,\n            'payment_processor' => 'stripe',\n        ]);\n\n        $data = $result->json();\n\n        $checkoutUrl = $data['url'];\n\n        return redirect($checkoutUrl);\n    }\n}\n\nWe can now easily create a checkout session & redirect there by creating a link to /checkout?priceId={priceId}. Just like we did when displaying the products above.\nUpon Checkout success, the user will be redirected to the confirmation page.\n​\nCreating the Confirmation Page\nCreate a new entry in your routes/web.php file:\nCopy\nAsk AI\n// routes/web.php\nRoute::get('/confirmation', [ConfirmationController::class, 'handle']);\n\nNext, create the ConfirmationController class in the app/Http/Controllers directory:\nCopy\nAsk AI\n// app/Http/Controllers/ConfirmationController.php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ConfirmationController extends Controller\n{\n    public function handle(Request $request)\n    {\n        // Change from sandbox-api.polar.sh -> api.polar.sh when ready to go live\n        // And don't forget to update the .env file with the correct POLAR_ORGANIZATION_ID and POLAR_WEBHOOK_SECRET\n        $data = Http::withHeaders([\n            'Authorization' => 'Bearer ' . env('POLAR_API_KEY'),\n            'Content-Type' => 'application/json',\n        ])->get('https://sandbox-api.polar.sh/v1/checkouts/custom/' . $request->query('checkout_id'));\n\n        $checkout = $data->json();\n\n        Log::info(json_encode($checkout, JSON_PRETTY_PRINT));\n\n        return view('confirmation', ['checkout' => $checkout]);\n    }\n}\n\nThe checkout is not considered “successful” yet however. It’s initially marked as confirmed until you’ve received a webhook event checkout.updated with a status set to succeeded. We’ll cover this in the next section.\n​\nHandling Polar Webhooks\nPolar can send you events about various things happening in your organization. This is very useful for keeping your database in sync with Polar checkouts, orders, subscriptions, etc.\nConfiguring a webhook is simple. Head over to your organization’s settings page and click on the “Add Endpoint” button to create a new webhook.\n​\nTunneling webhook events to your local development environment\nIf you’re developing locally, you can use a tool like ngrok to tunnel webhook events to your local development environment. This will allow you to test your webhook handlers without deploying them to a live server.\nRun the following command to start an ngrok tunnel:\nCopy\nAsk AI\nngrok http 3000\n\n​\nAdd Webhook Endpoint\nPoint the Webhook to your-app.com/api/webhook/polar. This must be an absolute URL which Polar can reach. If you use ngrok, the URL will look something like this: https://<your-ngrok-id>.ngrok-free.app/api/webhook/polar.\nSelect which events you want to be notified about. You can read more about the available events in the Events section.\nGenerate a secret key to sign the requests. This will allow you to verify that the requests are truly coming from Polar.\nAdd the secret key to your environment variables.\nCopy\nAsk AI\n# .env\nPOLAR_API_KEY=\"polar_oat...\"\nPOLAR_WEBHOOK_SECRET=\"...\"\n\n​\nSetting up the Webhook handler\nFirst, we need to install the standard-webhooks package to properly decode the incoming webhook payloads.\nCopy\nAsk AI\ncomposer require standard-webhooks/standard-webhooks:dev-main\n\nGo and add a routes/api.php file and add the following entry:\nCopy\nAsk AI\n// routes/api.php\nRoute::webhooks('/webhook/polar');\n\nMake sure that it is included in the Bootstrap file.\nCopy\nAsk AI\n// bootstrap/app.php\n<?php\n\nuse Illuminate\\Foundation\\Application;\nuse Illuminate\\Foundation\\Configuration\\Exceptions;\nuse Illuminate\\Foundation\\Configuration\\Middleware;\n\nreturn Application::configure(basePath: dirname(__DIR__))\n    ->withRouting(\n        web: __DIR__.'/../routes/web.php',\n        api: __DIR__.'/../routes/api.php',\n        commands: __DIR__.'/../routes/console.php',\n        health: '/up',\n    )\n    ->withMiddleware(function (Middleware $middleware) {\n        //\n    })\n    ->withExceptions(function (Exceptions $exceptions) {\n        //\n    })->create();\n\nWe will use Spatie’s Webhook Client to handle the webhook events. It will automatically verify the signature of the requests, and dispatch the payload to a job queue for processing.\nCopy\nAsk AI\ncomposer require spatie/laravel-webhook-client\n\nLet’s publish the config:\nCopy\nAsk AI\nphp artisan vendor:publish --provider=\"Spatie\\WebhookClient\\WebhookClientServiceProvider\" --tag=\"webhook-client-config\"\n\nThis will create a new file called webhook-client.php in the config folder.\nWe need to adjust it to properly verify the signature of the requests.\nCopy\nAsk AI\n// config/webhook-client.php\n<?php\nreturn [\n    'configs' => [\n        [\n            /*\n             * This package supports multiple webhook receiving endpoints. If you only have\n             * one endpoint receiving webhooks, you can use 'default'.\n             */\n            'name' => 'default',\n\n            /*\n             * We expect that every webhook call will be signed using a secret. This secret\n             * is used to verify that the payload has not been tampered with.\n             */\n            'signing_secret' => env('POLAR_WEBHOOK_SECRET'),\n\n            /*\n             * The name of the header containing the signature.\n             */\n            'signature_header_name' => 'webhook-signature',\n\n            /*\n             *  This class will verify that the content of the signature header is valid.\n             *\n             * It should implement \\Spatie\\WebhookClient\\SignatureValidator\\SignatureValidator\n             */\n            // 'signature_validator' => \\Spatie\\WebhookClient\\SignatureValidator\\DefaultSignatureValidator::class,\n            'signature_validator' => App\\Handler\\PolarSignature::class,\n\n            /*\n             * This class determines if the webhook call should be stored and processed.\n             */\n            'webhook_profile' => \\Spatie\\WebhookClient\\WebhookProfile\\ProcessEverythingWebhookProfile::class,\n\n            /*\n             * This class determines the response on a valid webhook call.\n             */\n            'webhook_response' => \\Spatie\\WebhookClient\\WebhookResponse\\DefaultRespondsTo::class,\n\n            /*\n             * The classname of the model to be used to store webhook calls. The class should\n             * be equal or extend Spatie\\WebhookClient\\Models\\WebhookCall.\n             */\n            'webhook_model' => \\Spatie\\WebhookClient\\Models\\WebhookCall::class,\n\n            /*\n             * In this array, you can pass the headers that should be stored on\n             * the webhook call model when a webhook comes in.\n             *\n             * To store all headers, set this value to `*`.\n             */\n            'store_headers' => [],\n\n            /*\n             * The class name of the job that will process the webhook request.\n             *\n             * This should be set to a class that extends \\Spatie\\WebhookClient\\Jobs\\ProcessWebhookJob.\n             */\n            'process_webhook_job' => App\\Handler\\ProcessWebhook::class,\n        ],\n    ],\n\n    /*\n     * The integer amount of days after which models should be deleted.\n     *\n     * 7 deletes all records after 1 week. Set to null if no models should be deleted.\n     */\n    'delete_after_days' => 30,\n];\n\n​\nPreparing the database\nBy default, all webhook calls get saved into the database. So, we need to publish the migration that will hold the records. So run:\nCopy\nAsk AI\nphp artisan vendor:publish --provider=\"Spatie\\WebhookClient\\WebhookClientServiceProvider\" --tag=\"webhook-client-migrations\"\n\nThis will create a new migration file in the “database/migration” folder.\nThen run php artisan migrate to run the migration.\n​\nSetting up the queue system\nBefore we set up our job handler — let’s set up our queue system\nGo to your “.env” file and set the QUEUE_CONNECTION=database — you can decide to use other connections like redis.\nLet’s create our jobs table by running php artisan queue:table and then run the migration using php artisan migrate.\n​\nCreate the Handlers\nThe next thing we do is to create a folder named Handler inside the app folder. Then inside this app/Handler, create two files which are\nPolarSignature.php\nProcessWebhook.php\nInside app/Handler/PolarSignature.php, what we want to do is to validate that the request came from Polar. Add the code to that file.\nCopy\nAsk AI\n// app/Handler/PolarSignature.php\n<?php\n\nnamespace App\\Handler;\n\nuse Illuminate\\Http\\Request;\nuse Spatie\\WebhookClient\\Exceptions\\WebhookFailed;\nuse Spatie\\WebhookClient\\WebhookConfig;\nuse Spatie\\WebhookClient\\SignatureValidator\\SignatureValidator;\n\nclass PolarSignature implements SignatureValidator\n{\n    public function isValid(Request $request, WebhookConfig $config): bool\n    {\n        $signingSecret = base64_encode($config->signingSecret);\n        $wh = new \\StandardWebhooks\\Webhook($signingSecret);\n\n        return boolval( $wh->verify($request->getContent(), array(\n            \"webhook-id\" => $request->header(\"webhook-id\"),\n            \"webhook-signature\" => $request->header(\"webhook-signature\"),\n            \"webhook-timestamp\" => $request->header(\"webhook-timestamp\"),\n        )));\n    }\n}\n\nGreat. So the other file app/Handler/ProcessWebhook.php extends the ProcessWebhookJob class which holds the WebhookCall variables containing each job’s detail.\nCopy\nAsk AI\n// app/Handler/ProcessWebhook.php\n<?php\n\nnamespace App\\Handler;\n\nuse Illuminate\\Support\\Facades\\Log;\nuse Spatie\\WebhookClient\\Jobs\\ProcessWebhookJob;\n\nclass ProcessWebhook extends ProcessWebhookJob\n{\n    public function handle()\n    {\n        $decoded = json_decode($this->webhookCall, true);\n        $data = $decoded['payload'];\n\n        switch ($data['type']) {\n            case \"checkout.created\":\n                // Handle the checkout created event\n                break;\n            case \"checkout.updated\":\n                // Handle the checkout updated event\n                break;\n            case \"subscription.created\":\n                // Handle the subscription created event\n                break;\n            case \"subscription.updated\":\n                // Handle the subscription updated event\n                break;\n            case \"subscription.active\":\n                // Handle the subscription active event\n                break;\n            case \"subscription.revoked\":\n                // Handle the subscription revoked event\n                break;\n            case \"subscription.canceled\":\n                // Handle the subscription canceled event\n                break;\n            default:\n                // Handle unknown event\n                Log::info($data['type']);\n                break;\n        }\n\n        //Acknowledge you received the response\n        http_response_code(200);\n    }\n}\n\nOur application is ready to receive webhook requests.\nDon’t forget to run php artisan queue:listen to process the jobs.\n​\nTips\nIf you’re keeping track of active and inactive subscriptions in your database, make sure to handle the subscription.active and subscription.revoked events accordingly.\nThe cancellation of a subscription is handled by the subscription.canceled event. The user has probably canceled their subscription before the end of the billing period. Do not revoke any kind of access immediately, but rather wait until the end of the billing period or when you receive the subscription.revoked event.\n​\nNotifying the client about the event\nIf you’re building a real-time application, you might want to notify the client about the event. On the confirmation-page, you can listen for the checkout.updated event and update the UI accordingly when it reaches the succeeded status.\n​\nPolar Laravel Example App\nWe’ve created a simple example Laravel application that you can use as a reference\nView Code on GitHub\nIf you have issues or need support, feel free to join our Discord.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nSetup an endpoint\nGet notifications asynchronously when events occur instead of having to poll for updates\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Billing - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/billing",
    "html": "Usage Based Billing\nBilling\nCopy page\n\nHow billing works with Usage Based\n\n​\nMetered Pricing\nMetered Pricing is a pricing model where you charge your customers based on the usage of your application.\nThere are a few different pricing models unique to Usage Based Billing:\nUnit Pricing\nVolume Pricing (coming soon)\n​\nUnit Pricing\nUnit pricing is a simple pricing model where you charge a fixed amount for each unit of usage.\nFor example:\nProduct Meter\tPrice per unit\nprompt-tokens\t$0.10\ncompletion-tokens\t$0.18\nThis means that every unit of prompt-tokens consumed by a customer will be charged at $0.10 and every unit of completion-tokens will be charged at $0.18.\nIt’s a linear pricing model, where the price per unit is fixed.\n​\nVolume Pricing (coming soon)\nVolume pricing is a pricing model where you charge a fixed amount for a certain volume of usage. Volume pricing is not yet available, but will be coming soon.\n​\nInvoicing Customers for Usage\nOur Usage Based Billing infrastructure is built to work with Subscription products out of the box.\n​\nAdd a metered price to your product\nTo charge your customers for usage, you need to add a metered price to your product. You’ll need the select the Meter and the amount per unit.\nOptionally, you can set a cap. The customer will be charged the cap amount if they exceed it, regardless of the usage.\n​\nMonthly Invoicing\nIf a customer has a subscription with a monthly billing period, usage is aggregated monthly and invoiced at the end of the month with the rest of the subscription.\n​\nYearly Invoicing\nIf a customer has a subscription with a yearly billing period, usage is aggregated yearly and invoiced at the end of the year with the rest of the subscription.\n​\nUsage Charges and Subscription Cancellation\nWhen a subscription is canceled, it generally remains active until the end of the current billing period (known as the grace period). During this grace period, all accumulated usage-based charges continue to be tracked. A final invoice will be issued at the end of that period to cover the consumed usage, even if the subscription will not be renewed. This ensures no pending usage charges are lost.\nIf a discount is applied on the subscription, it’ll be applied on the whole invoice, including metered usage.\n​\nCustomer Portal\nCustomers can view their estimated charges for each meter in the Customer Portal.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nIntroduction\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Product - Polar",
    "url": "https://polar.sh/docs/api-reference/products/get",
    "html": "Products\nGet Product\nCopy page\n\nGet a product by ID.\n\nScopes: products:read products:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nproducts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe product ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nA product.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nname\nstringrequired\n\nThe name of the product.\n\n​\ndescription\nstring | nullrequired\n\nThe description of the product.\n\n​\nrecurring_interval\nenum<string> | nullrequired\n\nThe recurring interval of the product. If None, the product is a one-time purchase.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\ninteger | nullrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on. None for one-time products.\n\n​\nis_recurring\nbooleanrequired\n\nWhether the product is a subscription.\n\n​\nis_archived\nbooleanrequired\n\nWhether the product is archived and no longer available.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the product.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of prices for this product.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nbenefits\nBenefits · arrayrequired\n\nList of benefits granted by the product.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\n​\nmedias\nProductMediaFileRead · object[]required\n\nList of medias associated to the product.\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nList of custom fields attached to the product.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Products\nList products. **Scopes**: `products:read` `products:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Products - Polar",
    "url": "https://polar.sh/docs/api-reference/products/list",
    "html": "Products\nList Products\nCopy page\n\nList products.\n\nScopes: products:read products:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nproducts\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\nid\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nquery\nstring | null\n\nFilter by product name.\n\n​\nis_archived\nboolean | null\n\nFilter on archived products.\n\n​\nis_recurring\nboolean | null\n\nFilter on recurring products. If true, only subscriptions tiers are returned. If false, only one-time purchase products are returned.\n\n​\nbenefit_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter products granting specific benefit.\nThe benefit ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nProduct · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Product\nCreate a product. **Scopes**: `products:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Product - Polar",
    "url": "https://polar.sh/docs/api-reference/products/create",
    "html": "Products\nCreate Product\nCopy page\n\nCreate a product.\n\nScopes: products:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nproducts\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nProductCreateRecurring\nProductCreateOneTime\n​\nname\nstringrequired\n\nThe name of the product.\n\nMinimum length: 3\n​\nprices\nProductPriceCreateList · arrayrequired\n\nList of available prices for this product. It should contain at most one static price (fixed, custom or free), and any number of metered prices. Metered prices are not supported on one-time purchase products.\n\nMinimum length: 1\nProductPriceFixedCreate\nProductPriceCustomCreate\nProductPriceFreeCreate\nProductPriceSeatBasedCreate\nProductPriceMeteredUnitCreate\n\nShow child attributes\n\n​\nrecurring_interval\nenum<string>required\n\nThe recurring interval of the product. Note that the day and week values are for internal Polar staff use only.\n\nAvailable options: day, week, month, year \n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ndescription\nstring | null\n\nThe description of the product.\n\n​\nmedias\nstring<uuid4>[] | null\n\nList of file IDs. Each one must be on the same organization as the product, of type product_media and correctly uploaded.\n\n​\nattached_custom_fields\nAttachedCustomFieldCreate · object[]\n\nList of custom fields to attach.\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4> | null\n\nThe ID of the organization owning the product. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ntrial_interval\nenum<string> | null\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | null\n\nThe number of interval units for the trial period.\n\nRequired range: 1 <= x <= 1000\n​\nrecurring_interval_count\nintegerdefault:1\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\nRequired range: 1 <= x <= 999\nResponse\n201\napplication/json\n\nProduct created.\n\nA product.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nname\nstringrequired\n\nThe name of the product.\n\n​\ndescription\nstring | nullrequired\n\nThe description of the product.\n\n​\nrecurring_interval\nenum<string> | nullrequired\n\nThe recurring interval of the product. If None, the product is a one-time purchase.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\ninteger | nullrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on. None for one-time products.\n\n​\nis_recurring\nbooleanrequired\n\nWhether the product is a subscription.\n\n​\nis_archived\nbooleanrequired\n\nWhether the product is archived and no longer available.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the product.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of prices for this product.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nbenefits\nBenefits · arrayrequired\n\nList of benefits granted by the product.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\n​\nmedias\nProductMediaFileRead · object[]required\n\nList of medias associated to the product.\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nList of custom fields attached to the product.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Product\nUpdate a product. **Scopes**: `products:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Event Ingestion - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/event-ingestion",
    "html": "Usage Based Billing\nEvent Ingestion\nCopy page\n\nIngest events from your application\n\nEvents are the core of Usage Based Billing. They represent some usage done by a customer in your application. Typical examples of events are:\nA customer consumed AI LLM tokens\nA customer streamed minutes of video\nA customer uploaded a file to your application\nEvents are sent to Polar using the Events Ingestion API and are stored in our database. An event consists of the following fields:\nA name, which is a string that can be used to identify the type of event. For example, ai_usage, video_streamed or file_uploaded.\nA customer_id or external_customer_id, which is Polar’s customer ID or your user’s ID. This is used to identify the customer that triggered the event.\nA metadata object, which is a JSON object that can contain any additional information about the event. This is useful for storing information that can be used to filter the events or compute the actual usage. For example, you can store the duration of the video streamed or the size of the file uploaded.\nHere is an example of an event:\nCopy\nAsk AI\n{\n  \"name\": \"ai_usage\",\n  \"external_customer_id\": \"cus_123\",\n  \"metadata\": {\n    \"model\": \"gpt-4.1-nano\",\n    \"requests\": 1,\n    \"total_tokens\": 77,\n    \"request_tokens\": 58,\n    \"response_tokens\": 19\n  }\n}\n\n​\nIngest events using the Polar SDK\nTo ingest events, you can use the Polar SDKs.\n​\nTypeScript Example\nCopy\nAsk AI\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nawait polar.events.ingest({\n  events: [\n    {\n      name: \"<value>\",\n      externalCustomerId: \"<id>\",\n      metadata: {\n        key: \"value\",\n      },\n    },\n  ],\n});\n\nYou are always responsible for checking the balance of your customers’ Usage Meter. As events always are ingested, we will never prohibit any customer’s action based on their Usage Meter balance.\n​\nIngestion Strategies\nTo make it easier to ingest events, we have created a set of ingestion strategies for common event sources.\nLearn more about our Ingestion Strategies.\n​\nGood to know\n​\nEvents are immutable\nOnce an event is ingested, it cannot be changed, nor can it be deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nStrategy Introduction\nIngestion strategies for Usage Based Billing\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Product Benefits - Polar",
    "url": "https://polar.sh/docs/api-reference/products/update-benefits",
    "html": "Products\nUpdate Product Benefits\nCopy page\n\nUpdate benefits granted by a product.\n\nScopes: products:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nproducts\n/\n{id}\n/\nbenefits\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe product ID.\n\nBody\napplication/json\n\nSchema to update the benefits granted by a product.\n\n​\nbenefits\nstring<uuid4>[]required\n\nList of benefit IDs. Each one must be on the same organization as the product.\n\nThe benefit ID.\n\nResponse\n200\napplication/json\n\nProduct benefits updated.\n\nA product.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nname\nstringrequired\n\nThe name of the product.\n\n​\ndescription\nstring | nullrequired\n\nThe description of the product.\n\n​\nrecurring_interval\nenum<string> | nullrequired\n\nThe recurring interval of the product. If None, the product is a one-time purchase.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\ninteger | nullrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on. None for one-time products.\n\n​\nis_recurring\nbooleanrequired\n\nWhether the product is a subscription.\n\n​\nis_archived\nbooleanrequired\n\nWhether the product is archived and no longer available.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the product.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of prices for this product.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nbenefits\nBenefits · arrayrequired\n\nList of benefits granted by the product.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\n​\nmedias\nProductMediaFileRead · object[]required\n\nList of medias associated to the product.\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nList of custom fields attached to the product.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nIngest Events\nIngest batch of events. **Scopes**: `events:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Meters - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/meters",
    "html": "Usage Based Billing\nMeters\nCopy page\n\nCreating and managing meters for Usage Based Billing\n\nMeters are there to filter and aggregate the events that are ingested. Said another way, this is how you define what usage you want to charge for, based on the events you send to Polar. For example:\nAI usage meter, which filters the events with the name ai_usage and sums the total_tokens field.\nVideo streaming meter, which filters the events with the name video_streamed and sums the duration field.\nFile upload meter, which filters the events with the name file_uploaded and sums the size field.\nYou can create and manage your meters from the dashboard. Polar is then able to compute the usage over time, both globally and per customer.\n​\nCreating a Meter\nTo create a meter, navigate to the Meters page in the sidebar and click the “Create Meter” button.\n​\nFilters\nA filter is a set of clauses that are combined using conjunctions. They’re used to filter events that you’ve ingested into Polar.\n​\nClauses\nA clause is a condition that an event must meet to be included in the meter.\n​\nProperty\nProperties are the properties of the event that you want to filter on.\nIf you want to match on a metadata field, you can use the metadata key directly. No need to include a metadata. prefix.\n​\nOperator\nOperators are the operators that you want to use to filter the events.\nEquals\nNot equals\nGreater Than\nGreater Than or Equals\nLess Than\nLess Than or Equals\nContains\nDoes Not Contain\n​\nValue\nValues are automatically parsed in the filter builder. They’re parsed in the following order:\nNumber — Tries to parse the value as number\nBoolean — Checks if value is “true” or “false”\nString — Treats value as string as fallback\n​\nConjunctions\nA conjunction is a logical operator that combines two or more clauses.\nand — All clauses must be true for the event to be included.\nor — At least one clause must be true for the event to be included.\n​\nAggregation\nThe aggregation is the function that is used to aggregate the events that match the filter.\nFor example, if you want to count the number of events that match the filter, you can use the Count aggregation. If you want to sum the value of a metadata field, you can use the Sum aggregation.\nCount — Counts the number of events that match the filter.\nSum — Sums the value of a property.\nAverage — Computes the average value of a property.\nMinimum — Computes the minimum value of a property.\nMaximum — Computes the maximum value of a property.\nUnique — Counts the number of unique values of a property.\n\nExample\n\nIf you want to use a metadata property in the aggregation, you can use the metadata property directly. No need to include a metadata. prefix.\n​\nExample\nThe following Meter Filter & Aggregation will match events that have the name openai-usage and sum units over metadata property completionTokens.\nYou can Preview the events matched by the meter while creating it.\n​\nGood to know\nA few things to keep in mind when creating and managing meters:\n​\nRenaming a Meter\nUntil https://github.com/polarsource/polar/issues/6490 is fixed, please contact support to rename the meter for you.\n​\nUpdating a Meter\nYou may update a meter’s filters or aggregation function as long as the meter doesn’t have any processed events or does not have any customer purchase associated with it.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCredits\nCrediting customers for Usage Based Billing\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Credits - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/credits",
    "html": "Usage Based Billing\nCredits\nCopy page\n\nCrediting customers for Usage Based Billing\n\nCredits is the way to pre-pay for usage in Polar. It allows you to give your customers the ability to pre-pay for usage instead of risk getting a hefty bill at the end of the month.\n​\nHow Credits Work\nWhen you ingest events into a Usage Meter, customers will be charged for the usage based on the product’s pricing model.\nHowever, sometimes you may want to give your customers the ability to pre-pay for usage instead of risk getting a hefty bill at the end of the month.\nWhen you issue Credits to a customer, we first deduct the Credits from their Usage Meter balance. If the Usage Meter balance reaches 0, the customer will be charged for the overage.\n​\nCredits-only spending\nTo avoid any overage charges, don’t create any Metered price on your product. This way, billing won’t be triggered at all for the meter\n​\nIssuing Credits with the Credits Benefit\nThe Credits benefit will credit a customer’s Usage Meter balance at different points in time depending on the type of product the benefit is attached to.\n​\nSubscription Products\nThe customer will be credited the amount of units specified in the benefit at the beginning of every subscription cycle period — monthly or yearly.\n​\nOne-Time Products\nThe customer will be credited the amount of units specified in the benefit once at the time of purchase.\n​\nTracking customer’s balance\nIn your application, you’ll likely need to track the customer’s balance for a given meter. The easiest way to do this is to use the Customer State, which will give you the overview of the customer, including the balance for each of their active meters.\nYou can also specifically query the meters balance using the Customer Meters API.\nPolar doesn’t block usage if the customer exceeds their balance. You’re responsible for implementing the logic you need to prevent usage if they exceed it.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nBilling\nHow billing works with Usage Based\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Ingest Events - Polar",
    "url": "https://polar.sh/docs/api-reference/events/ingest",
    "html": "Events\nIngest Events\nCopy page\n\nIngest batch of events.\n\nScopes: events:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nevents\n/\ningest\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nevents\nEvents · arrayrequired\n\nList of events to ingest.\n\nEventCreateCustomer\nEventCreateExternalCustomer\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ninserted\nintegerrequired\n\nNumber of events inserted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Event\nGet an event by ID. **Scopes**: `events:read` `events:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Checkout Sessions - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/list-sessions",
    "html": "Checkout\nList Checkout Sessions\nCopy page\n\nList checkout sessions.\n\nScopes: checkouts:read checkouts:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\nstatus\nenum<string> | null\nenum<string>[] | null\n\nFilter by checkout session status.\n\nAvailable options: open, expired, confirmed, succeeded, failed \n​\nquery\nstring | null\n\nFilter by customer email.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nCheckout · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Checkout Session\nUpdate a checkout session. **Scopes**: `checkouts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Checkout Session - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/update-session",
    "html": "Checkout\nUpdate Checkout Session\nCopy page\n\nUpdate a checkout session.\n\nScopes: checkouts:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe checkout session ID.\n\nBody\napplication/json\n\nUpdate an existing checkout session using an access token.\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nproduct_id\nstring<uuid4> | null\n\nID of the product to checkout. Must be present in the checkout's product list.\n\n​\nproduct_price_id\nstring<uuid4> | nulldeprecated\n\nID of the product price to checkout. Must correspond to a price present in the checkout's product list.\n\n​\namount\ninteger | null\n\nAmount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices.\n\nRequired range: 50 <= x <= 99999999\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\nRequired range: 1 <= x <= 1000\n​\nis_business_customer\nboolean | null\n​\ncustomer_name\nstring | null\n\nName of the customer.\n\n​\ncustomer_email\nstring<email> | null\n\nEmail address of the customer.\n\n​\ncustomer_billing_name\nstring | null\n​\ncustomer_billing_address\nobject | null\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | null\n​\ntrial_interval\nenum<string> | null\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | null\n\nThe number of interval units for the trial period.\n\nRequired range: 1 <= x <= 1000\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ndiscount_id\nstring<uuid4> | null\n\nID of the discount to apply to the checkout.\n\n​\nallow_discount_codes\nboolean | null\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nboolean | null\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | null\n​\ncustomer_metadata\nobject | null\n\nKey-value object allowing you to store additional information that'll be copied to the created customer.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nsuccess_url\nstring<uri> | null\n\nURL where the customer will be redirected after a successful payment.You can add the checkout_id={CHECKOUT_ID} query parameter to retrieve the checkout session id.\n\nRequired string length: 1 - 2083\n​\nreturn_url\nstring<uri> | null\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\nRequired string length: 1 - 2083\n​\nembed_origin\nstring | null\n\nIf you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.\n\nResponse\n200\napplication/json\n\nCheckout session updated.\n\nCheckout session data retrieved using an access token.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nstatus\nenum<string>required\nStatus of the checkout session.\n\n    - Open: the checkout session was opened.\n    - Expired: the checkout session was expired and is no more accessible.\n    - Confirmed: the user on the checkout session clicked Pay. This is not indicative of the payment's success status.\n    - Failed: the checkout definitely failed for technical reasons and cannot be retried. In most cases, this state is never reached.\n    - Succeeded: the payment on the checkout was performed successfully.\nAvailable options: open, expired, confirmed, succeeded, failed \n​\nclient_secret\nstringrequired\n\nClient secret used to update and complete the checkout session from the client.\n\n​\nurl\nstringrequired\n\nURL where the customer can access the checkout session.\n\n​\nexpires_at\nstring<date-time>required\n\nExpiration date and time of the checkout session.\n\n​\nsuccess_url\nstringrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nreturn_url\nstring | nullrequired\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\n​\nembed_origin\nstring | nullrequired\n\nWhen checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.\n\n​\namount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\n​\ntax_amount\ninteger | nullrequired\n\nSales tax amount in cents. If null, it means there is no enough information yet to calculate it.\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\n​\ncurrency\nstringrequired\n\nCurrency code of the checkout session.\n\n​\nactive_trial_interval\nenum<string> | nullrequired\n\nInterval unit of the trial period, if any. This value is either set from the checkout, if trial_interval is set, or from the selected product.\n\nAvailable options: day, week, month, year \n​\nactive_trial_interval_count\ninteger | nullrequired\n\nNumber of interval units of the trial period, if any. This value is either set from the checkout, if trial_interval_count is set, or from the selected product.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nEnd date and time of the trial period, if any.\n\n​\nproduct_id\nstring<uuid4>required\n\nID of the product to checkout.\n\n​\nproduct_price_id\nstring<uuid4>required\n\nID of the product price to checkout.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount applied to the checkout.\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\nis_discount_applicable\nbooleanrequired\n\nWhether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.\n\n​\nis_free_product_price\nbooleanrequired\n\nWhether the product price is free, regardless of discounts.\n\n​\nis_payment_required\nbooleanrequired\n\nWhether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.\n\n​\nis_payment_setup_required\nbooleanrequired\n\nWhether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.\n\n​\nis_payment_form_required\nbooleanrequired\n\nWhether the checkout requires a payment form, whether because of a payment or payment method setup.\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n​\nis_business_customer\nbooleanrequired\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\ncustomer_name\nstring | nullrequired\n\nName of the customer.\n\n​\ncustomer_email\nstring | nullrequired\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | nullrequired\n​\ncustomer_billing_name\nstring | nullrequired\n​\ncustomer_billing_address\nobject | nullrequired\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | nullrequired\n​\npayment_processor_metadata\nobjectrequired\n\nShow child attributes\n\n​\nbilling_address_fields\nobjectrequired\n\nDetermine which billing address fields should be disabled, optional or required in the checkout form.\n\nShow child attributes\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_customer_id\nstring | nullrequired\n\nID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.\n\n​\ncustomer_external_id\nstring | nullrequireddeprecated\n​\nproducts\nCheckoutProduct · object[]required\n\nList of products available to select.\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nProduct selected to checkout.\n\nShow child attributes\n\n​\nproduct_price\nobjectrequired\n\nPrice of the selected product.\nA recurring price for a product, i.e. a subscription.\n\nDeprecated: The recurring interval should be set on the product itself.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\n\nSchema for a fixed amount discount that is applied once or forever.\n\nCheckoutDiscountFixedOnceForeverDuration\nCheckoutDiscountFixedRepeatDuration\nCheckoutDiscountPercentageOnceForeverDuration\nCheckoutDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nShow child attributes\n\n​\ncustomer_metadata\nobjectrequired\n\nShow child attributes\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\n​\nprice_per_seat\ninteger | null\n\nPrice per seat in cents for the current seat count, based on the applicable tier. Only relevant for seat-based pricing.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Checkout Session from Client\nGet a checkout session by client secret.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Checkout Session from Client - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/get-session-from-client",
    "html": "Checkout\nGet Checkout Session from Client\nCopy page\n\nGet a checkout session by client secret.\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\nclient\n/\n{client_secret}\nTry it\nPath Parameters\n​\nclient_secret\nstringrequired\n\nThe checkout session client secret.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nCheckout session data retrieved using the client secret.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nstatus\nenum<string>required\nStatus of the checkout session.\n\n    - Open: the checkout session was opened.\n    - Expired: the checkout session was expired and is no more accessible.\n    - Confirmed: the user on the checkout session clicked Pay. This is not indicative of the payment's success status.\n    - Failed: the checkout definitely failed for technical reasons and cannot be retried. In most cases, this state is never reached.\n    - Succeeded: the payment on the checkout was performed successfully.\nAvailable options: open, expired, confirmed, succeeded, failed \n​\nclient_secret\nstringrequired\n\nClient secret used to update and complete the checkout session from the client.\n\n​\nurl\nstringrequired\n\nURL where the customer can access the checkout session.\n\n​\nexpires_at\nstring<date-time>required\n\nExpiration date and time of the checkout session.\n\n​\nsuccess_url\nstringrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nreturn_url\nstring | nullrequired\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\n​\nembed_origin\nstring | nullrequired\n\nWhen checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.\n\n​\namount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\n​\ntax_amount\ninteger | nullrequired\n\nSales tax amount in cents. If null, it means there is no enough information yet to calculate it.\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\n​\ncurrency\nstringrequired\n\nCurrency code of the checkout session.\n\n​\nactive_trial_interval\nenum<string> | nullrequired\n\nInterval unit of the trial period, if any. This value is either set from the checkout, if trial_interval is set, or from the selected product.\n\nAvailable options: day, week, month, year \n​\nactive_trial_interval_count\ninteger | nullrequired\n\nNumber of interval units of the trial period, if any. This value is either set from the checkout, if trial_interval_count is set, or from the selected product.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nEnd date and time of the trial period, if any.\n\n​\nproduct_id\nstring<uuid4>required\n\nID of the product to checkout.\n\n​\nproduct_price_id\nstring<uuid4>required\n\nID of the product price to checkout.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount applied to the checkout.\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\nis_discount_applicable\nbooleanrequired\n\nWhether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.\n\n​\nis_free_product_price\nbooleanrequired\n\nWhether the product price is free, regardless of discounts.\n\n​\nis_payment_required\nbooleanrequired\n\nWhether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.\n\n​\nis_payment_setup_required\nbooleanrequired\n\nWhether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.\n\n​\nis_payment_form_required\nbooleanrequired\n\nWhether the checkout requires a payment form, whether because of a payment or payment method setup.\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n​\nis_business_customer\nbooleanrequired\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\ncustomer_name\nstring | nullrequired\n\nName of the customer.\n\n​\ncustomer_email\nstring | nullrequired\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | nullrequired\n​\ncustomer_billing_name\nstring | nullrequired\n​\ncustomer_billing_address\nobject | nullrequired\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | nullrequired\n​\npayment_processor_metadata\nobjectrequired\n\nShow child attributes\n\n​\nbilling_address_fields\nobjectrequired\n\nDetermine which billing address fields should be disabled, optional or required in the checkout form.\n\nShow child attributes\n\n​\nproducts\nCheckoutProduct · object[]required\n\nList of products available to select.\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nProduct selected to checkout.\n\nShow child attributes\n\n​\nproduct_price\nobjectrequired\n\nPrice of the selected product.\nA recurring price for a product, i.e. a subscription.\n\nDeprecated: The recurring interval should be set on the product itself.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\n\nSchema for a fixed amount discount that is applied once or forever.\n\nCheckoutDiscountFixedOnceForeverDuration\nCheckoutDiscountFixedRepeatDuration\nCheckoutDiscountPercentageOnceForeverDuration\nCheckoutDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\norganization\nobjectrequired\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nShow child attributes\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\n​\nprice_per_seat\ninteger | null\n\nPrice per seat in cents for the current seat count, based on the applicable tier. Only relevant for seat-based pricing.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Checkout Session from Client\nUpdate a checkout session by client secret.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Checkout Session from Client - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/update-session-from-client",
    "html": "Checkout\nUpdate Checkout Session from Client\nCopy page\n\nUpdate a checkout session by client secret.\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\nclient\n/\n{client_secret}\nTry it\nPath Parameters\n​\nclient_secret\nstringrequired\n\nThe checkout session client secret.\n\nBody\napplication/json\n\nUpdate an existing checkout session using the client secret.\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nproduct_id\nstring<uuid4> | null\n\nID of the product to checkout. Must be present in the checkout's product list.\n\n​\nproduct_price_id\nstring<uuid4> | nulldeprecated\n\nID of the product price to checkout. Must correspond to a price present in the checkout's product list.\n\n​\namount\ninteger | null\n\nAmount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices.\n\nRequired range: 50 <= x <= 99999999\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\nRequired range: 1 <= x <= 1000\n​\nis_business_customer\nboolean | null\n​\ncustomer_name\nstring | null\n\nName of the customer.\n\n​\ncustomer_email\nstring<email> | null\n\nEmail address of the customer.\n\n​\ncustomer_billing_name\nstring | null\n​\ncustomer_billing_address\nobject | null\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | null\n​\ndiscount_code\nstring | null\n\nDiscount code to apply to the checkout.\n\nResponse\n200\napplication/json\n\nCheckout session updated.\n\nCheckout session data retrieved using the client secret.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nstatus\nenum<string>required\nStatus of the checkout session.\n\n    - Open: the checkout session was opened.\n    - Expired: the checkout session was expired and is no more accessible.\n    - Confirmed: the user on the checkout session clicked Pay. This is not indicative of the payment's success status.\n    - Failed: the checkout definitely failed for technical reasons and cannot be retried. In most cases, this state is never reached.\n    - Succeeded: the payment on the checkout was performed successfully.\nAvailable options: open, expired, confirmed, succeeded, failed \n​\nclient_secret\nstringrequired\n\nClient secret used to update and complete the checkout session from the client.\n\n​\nurl\nstringrequired\n\nURL where the customer can access the checkout session.\n\n​\nexpires_at\nstring<date-time>required\n\nExpiration date and time of the checkout session.\n\n​\nsuccess_url\nstringrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nreturn_url\nstring | nullrequired\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\n​\nembed_origin\nstring | nullrequired\n\nWhen checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.\n\n​\namount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\n​\ntax_amount\ninteger | nullrequired\n\nSales tax amount in cents. If null, it means there is no enough information yet to calculate it.\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\n​\ncurrency\nstringrequired\n\nCurrency code of the checkout session.\n\n​\nactive_trial_interval\nenum<string> | nullrequired\n\nInterval unit of the trial period, if any. This value is either set from the checkout, if trial_interval is set, or from the selected product.\n\nAvailable options: day, week, month, year \n​\nactive_trial_interval_count\ninteger | nullrequired\n\nNumber of interval units of the trial period, if any. This value is either set from the checkout, if trial_interval_count is set, or from the selected product.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nEnd date and time of the trial period, if any.\n\n​\nproduct_id\nstring<uuid4>required\n\nID of the product to checkout.\n\n​\nproduct_price_id\nstring<uuid4>required\n\nID of the product price to checkout.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount applied to the checkout.\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\nis_discount_applicable\nbooleanrequired\n\nWhether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.\n\n​\nis_free_product_price\nbooleanrequired\n\nWhether the product price is free, regardless of discounts.\n\n​\nis_payment_required\nbooleanrequired\n\nWhether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.\n\n​\nis_payment_setup_required\nbooleanrequired\n\nWhether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.\n\n​\nis_payment_form_required\nbooleanrequired\n\nWhether the checkout requires a payment form, whether because of a payment or payment method setup.\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n​\nis_business_customer\nbooleanrequired\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\ncustomer_name\nstring | nullrequired\n\nName of the customer.\n\n​\ncustomer_email\nstring | nullrequired\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | nullrequired\n​\ncustomer_billing_name\nstring | nullrequired\n​\ncustomer_billing_address\nobject | nullrequired\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | nullrequired\n​\npayment_processor_metadata\nobjectrequired\n\nShow child attributes\n\n​\nbilling_address_fields\nobjectrequired\n\nDetermine which billing address fields should be disabled, optional or required in the checkout form.\n\nShow child attributes\n\n​\nproducts\nCheckoutProduct · object[]required\n\nList of products available to select.\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nProduct selected to checkout.\n\nShow child attributes\n\n​\nproduct_price\nobjectrequired\n\nPrice of the selected product.\nA recurring price for a product, i.e. a subscription.\n\nDeprecated: The recurring interval should be set on the product itself.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\n\nSchema for a fixed amount discount that is applied once or forever.\n\nCheckoutDiscountFixedOnceForeverDuration\nCheckoutDiscountFixedRepeatDuration\nCheckoutDiscountPercentageOnceForeverDuration\nCheckoutDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\norganization\nobjectrequired\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nShow child attributes\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\n​\nprice_per_seat\ninteger | null\n\nPrice per seat in cents for the current seat count, based on the applicable tier. Only relevant for seat-based pricing.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nConfirm Checkout Session from Client\nConfirm a checkout session by client secret. Orders and subscriptions will be processed.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Confirm Checkout Session from Client - Polar",
    "url": "https://polar.sh/docs/api-reference/checkouts/confirm-session-from-client",
    "html": "Checkout\nConfirm Checkout Session from Client\nCopy page\n\nConfirm a checkout session by client secret.\n\nOrders and subscriptions will be processed.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckouts\n/\nclient\n/\n{client_secret}\n/\nconfirm\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nclient_secret\nstringrequired\n\nThe checkout session client secret.\n\nBody\napplication/json\n\nConfirm a checkout session using a Stripe confirmation token.\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nproduct_id\nstring<uuid4> | null\n\nID of the product to checkout. Must be present in the checkout's product list.\n\n​\nproduct_price_id\nstring<uuid4> | nulldeprecated\n\nID of the product price to checkout. Must correspond to a price present in the checkout's product list.\n\n​\namount\ninteger | null\n\nAmount in cents, before discounts and taxes. Only useful for custom prices, it'll be ignored for fixed and free prices.\n\nRequired range: 50 <= x <= 99999999\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\nRequired range: 1 <= x <= 1000\n​\nis_business_customer\nboolean | null\n​\ncustomer_name\nstring | null\n\nName of the customer.\n\n​\ncustomer_email\nstring<email> | null\n\nEmail address of the customer.\n\n​\ncustomer_billing_name\nstring | null\n​\ncustomer_billing_address\nobject | null\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | null\n​\ndiscount_code\nstring | null\n\nDiscount code to apply to the checkout.\n\n​\nconfirmation_token_id\nstring | null\n\nID of the Stripe confirmation token. Required for fixed prices and custom prices.\n\nResponse\n200\napplication/json\n\nCheckout session confirmed.\n\nCheckout session data retrieved using the client secret after confirmation.\n\nIt contains a customer session token to retrieve order information\nright after the checkout.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nstatus\nstringrequired\nAllowed value: \"confirmed\"\n​\nclient_secret\nstringrequired\n\nClient secret used to update and complete the checkout session from the client.\n\n​\nurl\nstringrequired\n\nURL where the customer can access the checkout session.\n\n​\nexpires_at\nstring<date-time>required\n\nExpiration date and time of the checkout session.\n\n​\nsuccess_url\nstringrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nreturn_url\nstring | nullrequired\n\nWhen set, a back button will be shown in the checkout to return to this URL.\n\n​\nembed_origin\nstring | nullrequired\n\nWhen checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.\n\n​\namount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\n​\ntax_amount\ninteger | nullrequired\n\nSales tax amount in cents. If null, it means there is no enough information yet to calculate it.\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\n​\ncurrency\nstringrequired\n\nCurrency code of the checkout session.\n\n​\nactive_trial_interval\nenum<string> | nullrequired\n\nInterval unit of the trial period, if any. This value is either set from the checkout, if trial_interval is set, or from the selected product.\n\nAvailable options: day, week, month, year \n​\nactive_trial_interval_count\ninteger | nullrequired\n\nNumber of interval units of the trial period, if any. This value is either set from the checkout, if trial_interval_count is set, or from the selected product.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nEnd date and time of the trial period, if any.\n\n​\nproduct_id\nstring<uuid4>required\n\nID of the product to checkout.\n\n​\nproduct_price_id\nstring<uuid4>required\n\nID of the product price to checkout.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount applied to the checkout.\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to true.\n\n​\nis_discount_applicable\nbooleanrequired\n\nWhether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.\n\n​\nis_free_product_price\nbooleanrequired\n\nWhether the product price is free, regardless of discounts.\n\n​\nis_payment_required\nbooleanrequired\n\nWhether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.\n\n​\nis_payment_setup_required\nbooleanrequired\n\nWhether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.\n\n​\nis_payment_form_required\nbooleanrequired\n\nWhether the checkout requires a payment form, whether because of a payment or payment method setup.\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n​\nis_business_customer\nbooleanrequired\n\nWhether the customer is a business or an individual. If true, the customer will be required to fill their full billing address and billing name.\n\n​\ncustomer_name\nstring | nullrequired\n\nName of the customer.\n\n​\ncustomer_email\nstring | nullrequired\n\nEmail address of the customer.\n\n​\ncustomer_ip_address\nstring<ipvanyaddress> | nullrequired\n​\ncustomer_billing_name\nstring | nullrequired\n​\ncustomer_billing_address\nobject | nullrequired\n\nBilling address of the customer.\n\nShow child attributes\n\n​\ncustomer_tax_id\nstring | nullrequired\n​\npayment_processor_metadata\nobjectrequired\n\nShow child attributes\n\n​\nbilling_address_fields\nobjectrequired\n\nDetermine which billing address fields should be disabled, optional or required in the checkout form.\n\nShow child attributes\n\n​\nproducts\nCheckoutProduct · object[]required\n\nList of products available to select.\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nProduct selected to checkout.\n\nShow child attributes\n\n​\nproduct_price\nobjectrequired\n\nPrice of the selected product.\nA recurring price for a product, i.e. a subscription.\n\nDeprecated: The recurring interval should be set on the product itself.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\n\nSchema for a fixed amount discount that is applied once or forever.\n\nCheckoutDiscountFixedOnceForeverDuration\nCheckoutDiscountFixedRepeatDuration\nCheckoutDiscountPercentageOnceForeverDuration\nCheckoutDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\norganization\nobjectrequired\n\nShow child attributes\n\n​\nattached_custom_fields\nAttachedCustomField · object[]required\n\nShow child attributes\n\n​\ncustomer_session_token\nstringrequired\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats for seat-based pricing.\n\n​\nprice_per_seat\ninteger | null\n\nPrice per seat in cents for the current seat count, based on the applicable tier. Only relevant for seat-based pricing.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Checkout Link\nCreate a checkout link. **Scopes**: `checkout_links:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Seats - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-seats/list",
    "html": "Customer Seats\nList Seats\nCopy page\n\nScopes: customer_seats:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-seats\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\nsubscription_id\nstring | null\n​\norder_id\nstring | null\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nseats\nCustomerSeat · object[]required\n\nList of seats\n\nShow child attributes\n\n​\navailable_seats\nintegerrequired\n\nNumber of available seats\n\n​\ntotal_seats\nintegerrequired\n\nTotal number of seats for the subscription\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRevoke Seat\n**Scopes**: `customer_seats:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Revoke Seat - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-seats/revoke",
    "html": "Customer Seats\nRevoke Seat\nCopy page\n\nScopes: customer_seats:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-seats\n/\n{seat_id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nseat_id\nstringrequired\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid>required\n\nThe seat ID\n\n​\nstatus\nenum<string>required\n\nStatus of the seat\n\nAvailable options: pending, claimed, revoked \n​\nsubscription_id\nstring<uuid> | null\n\nThe subscription ID (for recurring seats)\n\n​\norder_id\nstring<uuid> | null\n\nThe order ID (for one-time purchase seats)\n\n​\ncustomer_id\nstring<uuid> | null\n\nThe assigned customer ID\n\n​\ncustomer_email\nstring | null\n\nThe assigned customer email\n\n​\ninvitation_token_expires_at\nstring<date-time> | null\n\nWhen the invitation token expires\n\n​\nclaimed_at\nstring<date-time> | null\n\nWhen the seat was claimed\n\n​\nrevoked_at\nstring<date-time> | null\n\nWhen the seat was revoked\n\n​\nseat_metadata\nobject | null\n\nAdditional metadata for the seat\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nResend Invitation\n**Scopes**: `customer_seats:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Resend Invitation - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-seats/resend",
    "html": "Customer Seats\nResend Invitation\nCopy page\n\nScopes: customer_seats:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-seats\n/\n{seat_id}\n/\nresend\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nseat_id\nstringrequired\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid>required\n\nThe seat ID\n\n​\nstatus\nenum<string>required\n\nStatus of the seat\n\nAvailable options: pending, claimed, revoked \n​\nsubscription_id\nstring<uuid> | null\n\nThe subscription ID (for recurring seats)\n\n​\norder_id\nstring<uuid> | null\n\nThe order ID (for one-time purchase seats)\n\n​\ncustomer_id\nstring<uuid> | null\n\nThe assigned customer ID\n\n​\ncustomer_email\nstring | null\n\nThe assigned customer email\n\n​\ninvitation_token_expires_at\nstring<date-time> | null\n\nWhen the invitation token expires\n\n​\nclaimed_at\nstring<date-time> | null\n\nWhen the seat was claimed\n\n​\nrevoked_at\nstring<date-time> | null\n\nWhen the seat was revoked\n\n​\nseat_metadata\nobject | null\n\nAdditional metadata for the seat\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Claim Info\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Claim Info - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-seats/get-claim-info",
    "html": "Customer Seats\nGet Claim Info\nCopy page\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-seats\n/\nclaim\n/\n{invitation_token}\nTry it\nPath Parameters\n​\ninvitation_token\nstringrequired\nResponse\n200\napplication/json\n\nSuccessful Response\n\nRead-only information about a seat claim invitation.\nSafe for email scanners - no side effects when fetched.\n\n​\nproduct_name\nstringrequired\n\nName of the product\n\n​\nproduct_id\nstring<uuid>required\n\nID of the product\n\n​\norganization_name\nstringrequired\n\nName of the organization\n\n​\norganization_slug\nstringrequired\n\nSlug of the organization\n\n​\ncustomer_email\nstringrequired\n\nEmail of the customer assigned to this seat\n\n​\ncan_claim\nbooleanrequired\n\nWhether the seat can be claimed\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nClaim Seat\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Claim Seat - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-seats/claim",
    "html": "Customer Seats\nClaim Seat\nCopy page\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-seats\n/\nclaim\nTry it\nBody\napplication/json\n​\ninvitation_token\nstringrequired\n\nInvitation token to claim the seat\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nResponse after successfully claiming a seat.\n\n​\nseat\nobjectrequired\n\nThe claimed seat\n\nShow child attributes\n\n​\ncustomer_session_token\nstringrequired\n\nSession token for immediate customer portal access\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate File\nCreate a file. **Scopes**: `files:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Deactivate License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/deactivate",
    "html": "License Keys\nDeactivate License Key\nCopy page\n\nDeactivate a license key instance.\n\nScopes: license_keys:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\ndeactivate\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nkey\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\nactivation_id\nstring<uuid4>required\nResponse\n204\n\nLicense key activation deactivated.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAssign Seat\n**Scopes**: `customer_seats:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Order - Polar",
    "url": "https://polar.sh/docs/api-reference/orders/patch",
    "html": "Orders\nUpdate Order\nCopy page\n\nUpdate an order.\n\nScopes: orders:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norders\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nBody\napplication/json\n\nSchema to update an order.\n\n​\nbilling_name\nstring | nullrequired\n\nThe name of the customer that should appear on the invoice. Can't be updated after the invoice is generated.\n\n​\nbilling_address\nobject | nullrequired\n\nThe address of the customer that should appear on the invoice. Can't be updated after the invoice is generated.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nstatus\nenum<string>required\nAvailable options: pending, paid, refunded, partially_refunded \n​\npaid\nbooleanrequired\n\nWhether the order has been paid for.\n\nExamples:\n\ntrue\n\n​\nsubtotal_amount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\nExamples:\n\n10000\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\nExamples:\n\n1000\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\nExamples:\n\n9000\n\n​\ntax_amount\nintegerrequired\n\nSales tax amount in cents.\n\nExamples:\n\n720\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\nExamples:\n\n9720\n\n​\napplied_balance_amount\nintegerrequired\n\nCustomer's balance amount applied to this invoice. Can increase the total amount paid, if the customer has a negative balance, or decrease it, if the customer has a positive balance.Amount in cents.\n\nExamples:\n\n0\n\n​\ndue_amount\nintegerrequired\n\nAmount in cents that is due for this order.\n\nExamples:\n\n0\n\n​\nrefunded_amount\nintegerrequired\n\nAmount refunded in cents.\n\nExamples:\n\n0\n\n​\nrefunded_tax_amount\nintegerrequired\n\nSales tax refunded in cents.\n\nExamples:\n\n0\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\nbilling_reason\nenum<string>required\nAvailable options: purchase, subscription_create, subscription_cycle, subscription_update \n​\nbilling_name\nstring | nullrequired\n\nThe name of the customer that should appear on the invoice.\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ninvoice_number\nstringrequired\n\nThe invoice number associated with this order.\n\n​\nis_invoice_generated\nbooleanrequired\n\nWhether an invoice has been generated for this order.\n\n​\ncustomer_id\nstring<uuid4>required\n​\nproduct_id\nstring<uuid4> | nullrequired\n​\ndiscount_id\nstring<uuid4> | nullrequired\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nplatform_fee_amount\nintegerrequired\n\nPlatform fee amount in cents.\n\nExamples:\n\n500\n\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nuser_id\nstring<uuid4>requireddeprecated\n​\nproduct\nobject | nullrequired\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nsubscription\nobject | nullrequired\n\nShow child attributes\n\n​\nitems\nOrderItemSchema · object[]required\n\nLine items composing the order.\n\nShow child attributes\n\n​\ndescription\nstringrequired\n\nA summary description of the order.\n\nExamples:\n\n\"Pro Plan\"\n\n​\nseats\ninteger | null\n\nNumber of seats purchased (for seat-based one-time orders).\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Orders\nList orders. **Scopes**: `orders:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Orders - Polar",
    "url": "https://polar.sh/docs/api-reference/orders/list",
    "html": "Orders\nList Orders\nCopy page\n\nList orders.\n\nScopes: orders:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norders\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\nproduct_billing_type\nenum<string> | null\nenum<string>[] | null\n\nFilter by product billing type. recurring will filter data corresponding to subscriptions creations or renewals. one_time will filter data corresponding to one-time purchases.\n\nAvailable options: one_time, recurring \n​\ndiscount_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by discount ID.\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\ncheckout_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by checkout ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nOrder · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGenerate Order Invoice\nTrigger generation of an order's invoice. **Scopes**: `orders:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Subscriptions - Polar",
    "url": "https://polar.sh/docs/api-reference/subscriptions/list",
    "html": "Subscriptions\nList Subscriptions\nCopy page\n\nList subscriptions.\n\nScopes: subscriptions:read subscriptions:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nsubscriptions\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\nexternal_customer_id\nstring | null\nstring[] | null\n\nFilter by customer external ID.\nThe customer external ID.\n\n​\ndiscount_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by discount ID.\nThe product ID.\n\n​\nactive\nboolean | null\n\nFilter by active or inactive subscription.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nSubscription · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Subscription\nUpdate a subscription. **Scopes**: `subscriptions:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Generate Order Invoice - Polar",
    "url": "https://polar.sh/docs/api-reference/orders/post-invoice",
    "html": "Orders\nGenerate Order Invoice\nCopy page\n\nTrigger generation of an order’s invoice.\n\nScopes: orders:read\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norders\n/\n{id}\n/\ninvoice\nTry it\nOnce the invoice is generated, it’s permanent and cannot be modified.\nMake sure the billing details (name and address) are correct before generating the invoice. You can update them before generating the invoice by calling the PATCH /v1/orders/{id} endpoint.\nAfter successfully calling this endpoint, you get a 202 response, meaning the generation of the invoice has been scheduled. It usually only takes a few seconds before you can retrieve the invoice using the GET /v1/orders/{id} /invoice endpoint.\nIf you want a reliable notification when the invoice is ready, you can listen to the order.updated webhook and check the is_invoice_generated field.\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nResponse\n202\napplication/json\n\nSuccessful Response\n\nThe response is of type any.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Order Invoice\nGet an order's invoice data. **Scopes**: `orders:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Order Invoice - Polar",
    "url": "https://polar.sh/docs/api-reference/orders/get-invoice",
    "html": "Orders\nGet Order Invoice\nCopy page\n\nGet an order’s invoice data.\n\nScopes: orders:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norders\n/\n{id}\n/\ninvoice\nTry it\nThe invoice must be generated first before it can be retrieved. You should call the POST /v1/orders/{id}/invoice endpoint to generate the invoice.\nIf the invoice is not generated, you will receive a 404 error.\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nOrder's invoice data.\n\n​\nurl\nstringrequired\n\nThe URL to the invoice.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Discount\nGet a discount by ID. **Scopes**: `discounts:read` `discounts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Subscription - Polar",
    "url": "https://polar.sh/docs/api-reference/subscriptions/update",
    "html": "Subscriptions\nUpdate Subscription\nCopy page\n\nUpdate a subscription.\n\nScopes: subscriptions:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nsubscriptions\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe subscription ID.\n\nBody\napplication/json\nSubscriptionUpdateProduct\nSubscriptionUpdateDiscount\nSubscriptionUpdateTrial\nSubscriptionCancel\nSubscriptionRevoke\n​\nproduct_id\nstring<uuid4>required\n\nUpdate subscription to another product.\n\n​\nproration_behavior\nenum<string> | null\n\nDetermine how to handle the proration billing. If not provided, will use the default organization setting.\n\nAvailable options: invoice, prorate \nResponse\n200\napplication/json\n\nSubscription updated.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nA product.\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRevoke Subscription\nRevoke a subscription, i.e cancel immediately. **Scopes**: `subscriptions:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Customer State - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/state",
    "html": "Customers\nGet Customer State\nCopy page\n\nGet a customer state by ID.\n\nThe customer state includes information about the customer’s active subscriptions and benefits.\n\nIt’s the ideal endpoint to use when you need to get a full overview of a customer’s status.\n\nScopes: customers:read customers:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\n{id}\n/\nstate\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe customer ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nA customer along with additional state information:\n\nActive subscriptions\nGranted benefits\nActive meters\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\nactive_subscriptions\nCustomerStateSubscription · object[]required\n\nThe customer's active subscriptions.\n\nShow child attributes\n\n​\ngranted_benefits\nCustomerStateBenefitGrant · object[]required\n\nThe customer's active benefit grants.\n\nShow child attributes\n\n​\nactive_meters\nCustomerStateMeter · object[]required\n\nThe customer's active meters.\n\nShow child attributes\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Customer State by External ID\nGet a customer state by external ID. The customer state includes information about the customer's active subscriptions and benefits. It's the ideal endpoint to use when you need to get a full overview of a customer's status. **Scopes**: `customers:read` `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Revoke Subscription - Polar",
    "url": "https://polar.sh/docs/api-reference/subscriptions/revoke",
    "html": "Subscriptions\nRevoke Subscription\nCopy page\n\nRevoke a subscription, i.e cancel immediately.\n\nScopes: subscriptions:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nsubscriptions\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe subscription ID.\n\nResponse\n200\napplication/json\n\nSubscription revoked.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nproduct\nobjectrequired\n\nA product.\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\n​\ncustom_field_data\nobject\n\nKey-value object storing custom field values.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Order\nGet an order by ID. **Scopes**: `orders:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Customers - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/list",
    "html": "Customers\nList Customers\nCopy page\n\nList customers.\n\nScopes: customers:read customers:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nemail\nstring | null\n\nFilter by exact email.\n\n​\nquery\nstring | null\n\nFilter by name, email, or external ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nCustomer · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Customer\nCreate a customer. **Scopes**: `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Customer State by External ID - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/state-external",
    "html": "Customers\nGet Customer State by External ID\nCopy page\n\nGet a customer state by external ID.\n\nThe customer state includes information about the customer’s active subscriptions and benefits.\n\nIt’s the ideal endpoint to use when you need to get a full overview of a customer’s status.\n\nScopes: customers:read customers:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\nexternal\n/\n{external_id}\n/\nstate\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nexternal_id\nstringrequired\n\nThe customer external ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nA customer along with additional state information:\n\nActive subscriptions\nGranted benefits\nActive meters\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\nactive_subscriptions\nCustomerStateSubscription · object[]required\n\nThe customer's active subscriptions.\n\nShow child attributes\n\n​\ngranted_benefits\nCustomerStateBenefitGrant · object[]required\n\nThe customer's active benefit grants.\n\nShow child attributes\n\n​\nactive_meters\nCustomerStateMeter · object[]required\n\nThe customer's active meters.\n\nShow child attributes\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Customers\nList customers. **Scopes**: `customers:read` `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Customer - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/get",
    "html": "Customers\nGet Customer\nCopy page\n\nGet a customer by ID.\n\nScopes: customers:read customers:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe customer ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nA customer in an organization.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Customer\nUpdate a customer. **Scopes**: `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Customer - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/create",
    "html": "Customers\nCreate Customer\nCopy page\n\nCreate a customer.\n\nScopes: customers:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nemail\nstring<email>required\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nexternal_id\nstring | null\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nname\nstring | null\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | null\n\nShow child attributes\n\n​\ntax_id\nany[] | null\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4> | null\n\nThe ID of the organization owning the customer. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n201\napplication/json\n\nCustomer created.\n\nA customer in an organization.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nexternal_id\nstring | nullrequired\n\nThe ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.\n\nExamples:\n\n\"usr_1337\"\n\n​\nemail\nstringrequired\n\nThe email address of the customer. This must be unique within the organization.\n\nExamples:\n\n\"customer@example.com\"\n\n​\nemail_verified\nbooleanrequired\n\nWhether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.\n\nExamples:\n\ntrue\n\n​\nname\nstring | nullrequired\n\nThe name of the customer.\n\nExamples:\n\n\"John Doe\"\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ntax_id\nany[] | nullrequired\nRequired array length: 2 elements\nExamples:\n[\"911144442\", \"us_ein\"]\n[\"FR61954506077\", \"eu_vat\"]\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the customer.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ndeleted_at\nstring<date-time> | nullrequired\n\nTimestamp for when the customer was soft deleted.\n\n​\navatar_url\nstringrequired\nExamples:\n\n\"https://www.gravatar.com/avatar/xxx?d=404\"\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Customer\nGet a customer by ID. **Scopes**: `customers:read` `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Account Balance & Transparent Fees - Polar",
    "url": "https://polar.sh/docs/features/finance/balance",
    "html": "Finance & Payouts\nAccount Balance & Transparent Fees\nCopy page\n\nMonitor your Polar balance without hidden fees\n\nYou can see your available balance for payout at any time under your Finance page.\n​\nPolar Balance\nYour balance is all the earnings minus:\nAny VAT we’ve captured for remittance, i.e balance is excluding VAT\nOur revenue share (4% + 40¢)\nAll historic transactions are available in chronological order along with their associated fees that have been deducted.\nNote: Upon payout (withdrawal), Stripe incurs additional fees that will be deducted before the final payout of the balance.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nPayouts\nEasily withdraw money from your Polar account at any time\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Customer - Polar",
    "url": "https://polar.sh/docs/api-reference/customers/delete",
    "html": "Customers\nDelete Customer\nCopy page\n\nDelete a customer.\n\nThis action cannot be undone and will immediately:\n\nCancel any active subscriptions for the customer\nRevoke all their benefits\nClear any external_id\n\nUse it only in the context of deleting a user within your own service. Otherwise, use more granular API endpoints to cancel a specific subscription or revoke certain benefits.\n\nNote: The customers information will nonetheless be retained for historic orders and subscriptions.\n\nScopes: customers:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomers\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe customer ID.\n\nResponse\n204\n\nCustomer deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Customer by External ID\nGet a customer by external ID. **Scopes**: `customers:read` `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Payouts - Polar",
    "url": "https://polar.sh/docs/features/finance/payouts",
    "html": "Finance & Payouts\nPayouts\nCopy page\n\nEasily withdraw money from your Polar account at any time\n\nYou can issue a withdrawal, i.e payout, at any time once there is at least $10 on your balance. We will then transfer the balance minus Stripe payout fees (see below) to your Stripe account & issue a payout on their side.\n​\nManual Withdrawal\nWe require this to be done manually since:\nUsers have requested control for easier accounting vs. frequent & small payouts\nGiving users control of Stripe payout fees\n​\nStripe Payout Fees\n$2 per month of active payout(s)\n0.25% + $0.25 per payout\nCross border fees (currency conversion): 0.25% (EU) - 1% in other countries.\nGiven the fixed costs, we want to default to manual payouts so you can control when you want to incur them and do it once vs. per each individual transaction in order to reduce the overall fees.\n​\nReverse invoices\nSince we’re the Merchant of Record, your customers get an invoice from Polar. Thus, for your accounting, you need to issue an invoice to Polar for the amount we paid out to you. To ease this process, we can automatically generate a reverse invoice for you, detailing the sells we made on your behalf, minus our fees.\nYou can generate them from the Payouts page under Finance in your Polar dashboard. Click on the ellipsis next to the payout you want to generate a reverse invoice for, and select Download invoice.\nA modal will open, allowing you to:\nSet your billing name and address.\nAdd information shown below your billing address.\nAdd notes shown at the bottom of the invoice.\nCustomize the invoice number. By default, we generate one like POLAR-0001, but you can change it to your own format and sequence.\nOnce the reverse invoice is generated, it cannot be changed. Make sure to double-check the information before generating it.\n​\nSample Reverse Invoice\n​\nFrequently Asked Questions\n\nHow long do payouts take?\n\nCan I use my personal bank account to receive payouts?\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRaycast\nThe fastest way to access Polar from your keyboard\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Metrics Limits - Polar",
    "url": "https://polar.sh/docs/api-reference/metrics/get-limits",
    "html": "Metrics\nGet Metrics Limits\nCopy page\n\nGet the interval limits for the metrics endpoint.\n\nScopes: metrics:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmetrics\n/\nlimits\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nResponse\n200 - application/json\n\nSuccessful Response\n\nDate limits to get metrics.\n\n​\nmin_date\nstring<date>required\n\nMinimum date to get metrics.\n\n​\nintervals\nobjectrequired\n\nLimits for each interval.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Customer\nGet authenticated customer. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Subscription - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/subscriptions/get",
    "html": "Subscriptions\nGet Subscription\nCopy page\n\nGet a subscription for the authenticated customer.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nsubscriptions\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe subscription ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nproduct\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nCustomerSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nis_polar_managed\nbooleanrequired\n\nWhether the subscription is managed by Polar.\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Subscriptions\nList subscriptions of the authenticated customer. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/license-keys/get",
    "html": "License Keys\nGet License Key\nCopy page\n\nGet a license key.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nlicense-keys\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\ncustomer_id\nstring<uuid4>required\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nbenefit_id\nstring<uuid4>required\n\nThe benefit ID.\n\n​\nkey\nstringrequired\n​\ndisplay_key\nstringrequired\n​\nstatus\nenum<string>required\nAvailable options: granted, revoked, disabled \n​\nlimit_activations\ninteger | nullrequired\n​\nusage\nintegerrequired\n​\nlimit_usage\ninteger | nullrequired\n​\nvalidations\nintegerrequired\n​\nlast_validated_at\nstring<date-time> | nullrequired\n​\nexpires_at\nstring<date-time> | nullrequired\n​\nactivations\nLicenseKeyActivationBase · object[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList License Keys\n**Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List License Keys - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/license-keys/list",
    "html": "License Keys\nList License Keys\nCopy page\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nlicense-keys\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nbenefit_id\nstring<uuid4> | null\n\nFilter by a specific benefit\nThe benefit ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nLicenseKeyRead · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Order Invoice - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/orders/get-invoice",
    "html": "Orders\nGet Order Invoice\nCopy page\n\nGet an order’s invoice data.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\norders\n/\n{id}\n/\ninvoice\nTry it\nThe invoice must be generated first before it can be retrieved. You should call the POST /v1/customer-portal/orders/{id}/invoice endpoint to generate the invoice.\nIf the invoice is not generated, you will receive a 404 error.\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nOrder's invoice data.\n\n​\nurl\nstringrequired\n\nThe URL to the invoice.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nValidate License Key\nValidate a license key. > This endpoint doesn't require authentication and can be safely used on a public > client, like a desktop application or a mobile app. > If you plan to validate a license key on a server, use the `/v1/license-keys/validate` > endpoint instead.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Refunds - Polar",
    "url": "https://polar.sh/docs/api-reference/refunds/list",
    "html": "Refunds\nList Refunds\nCopy page\n\nList products.\n\nScopes: refunds:read refunds:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nrefunds\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\nid\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by refund ID.\nThe refund ID.\n\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\norder_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by order ID.\nThe order ID.\n\n​\nsubscription_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by subscription ID.\nThe subscription ID.\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\nsucceeded\nboolean | null\n\nFilter by succeeded.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nRefund · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Product\nGet a product by ID. **Scopes**: `products:read` `products:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Strategy Introduction - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/ingestion-strategies/ingestion-strategy",
    "html": "Ingestion Strategies\nStrategy Introduction\nCopy page\n\nIngestion strategies for Usage Based Billing\n\nPolar offers an ingestion framework to work with Polar’s event ingestion API.\nWant to report events regarding Large Language Model usage, S3 file uploads or something else? Our Ingestion strategies are customized to make it as seamless as possible to fire ingestion events for complex needs.\nLLM Strategy\nS3 Strategy\nStream Strategy\nDelta Time Strategy\n​\nHelp us improve\nWe’re always looking for ways to improve our ingestion strategies. Feel free to contribute — Polar Ingestion SDK.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nLLM Strategy\nIngestion strategy for LLM Usage\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Strategy Introduction - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/ingestion-strategies/ingestion-strategy",
    "html": "Ingestion Strategies\nStrategy Introduction\nCopy page\n\nIngestion strategies for Usage Based Billing\n\nPolar offers an ingestion framework to work with Polar’s event ingestion API.\nWant to report events regarding Large Language Model usage, S3 file uploads or something else? Our Ingestion strategies are customized to make it as seamless as possible to fire ingestion events for complex needs.\nLLM Strategy\nS3 Strategy\nStream Strategy\nDelta Time Strategy\n​\nHelp us improve\nWe’re always looking for ways to improve our ingestion strategies. Feel free to contribute — Polar Ingestion SDK.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nLLM Strategy\nIngestion strategy for LLM Usage\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delta Time Strategy - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/ingestion-strategies/delta-time-strategy",
    "html": "Ingestion Strategies\nDelta Time Strategy\nCopy page\n\nIngest delta time of arbitrary execution\n\n​\nJavascript SDK\nIngest delta time of arbitrary execution. Bring your own now-resolver.\nCopy\nAsk AI\npnpm add @polar-sh/ingestion\n\nCopy\nAsk AI\nimport { Ingestion } from \"@polar-sh/ingestion\";\nimport { DeltaTimeStrategy } from \"@polar-sh/ingestion/strategies/DeltaTime\";\n\nconst nowResolver = () => performance.now();\n// const nowResolver = () => Number(hrtime.bigint())\n// const nowResolver = () => Date.now()\n\n// Setup the Delta Time Ingestion Strategy\nconst deltaTimeIngestion = Ingestion({\n  accessToken: process.env.POLAR_ACCESS_TOKEN,\n})\n  .strategy(new DeltaTimeStrategy(nowResolver))\n  .ingest(\"execution-time\");\n\nexport async function GET(request: Request) {\n  try {\n    // Get the wrapped start clock function\n    // Pass Customer Id to properly annotate the ingestion events with a specific customer\n    const start = deltaTimeIngestion.client({\n      customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\",\n    });\n\n    const stop = start();\n\n    await sleep(1000);\n\n    // { deltaTime: xxx } is automatically ingested to Polar\n    const delta = stop();\n\n    return Response.json({ delta });\n  } catch (error) {\n    return Response.json({ error: error.message });\n  }\n}\n\n​\nIngestion Payload\nCopy\nAsk AI\n{\n  \"customerId\": \"123\",\n  \"name\": \"execution-time\",\n  \"metadata\": {\n    \"deltaTime\": 1000\n  }\n}\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nMeters\nCreating and managing meters for Usage Based Billing\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Customer Meters - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-meters/list",
    "html": "Customer Meters\nList Customer Meters\nCopy page\n\nList customer meters.\n\nScopes: customer_meters:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-meters\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\nexternal_customer_id\nstring | null\nstring[] | null\n\nFilter by external customer ID.\n\n​\nmeter_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by meter ID.\nThe meter ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nCustomerMeter · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet License Key\nGet a license key. **Scopes**: `license_keys:read` `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Event - Polar",
    "url": "https://polar.sh/docs/api-reference/events/get",
    "html": "Events\nGet Event\nCopy page\n\nGet an event by ID.\n\nScopes: events:read events:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nevents\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe event ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nMeterCreditEvent\nMeterResetEvent\nBenefitGrantedEvent\nBenefitCycledEvent\nBenefitUpdatedEvent\nBenefitRevokedEvent\nSubscriptionCycledEvent\nSubscriptionRevokedEvent\nSubscriptionProductUpdatedEvent\nUserEvent\n\nAn event created by Polar when credits are added to a customer meter.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ntimestamp\nstring<date-time>required\n\nThe timestamp of the event.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the event.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ncustomer_id\nstring<uuid4> | nullrequired\n\nID of the customer in your Polar organization associated with the event.\n\n​\ncustomer\nobject | nullrequired\n\nThe customer associated with the event.\nA customer in an organization.\n\nShow child attributes\n\n​\nexternal_customer_id\nstring | nullrequired\n\nID of the customer in your system associated with the event.\n\n​\nsource\nstringrequired\n\nThe source of the event. system events are created by Polar. user events are the one you create through our ingestion API.\n\nAllowed value: \"system\"\n​\nname\nstringrequired\n\nThe name of the event.\n\nAllowed value: \"meter.credited\"\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Events\nList events. **Scopes**: `events:read` `events:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Events - Polar",
    "url": "https://polar.sh/docs/api-reference/events/list",
    "html": "Events\nList Events\nCopy page\n\nList events.\n\nScopes: events:read events:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nevents\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\nfilter\nstring | null\n\nFilter events following filter clauses. JSON string following the same schema a meter filter clause.\n\n​\nstart_timestamp\nstring<date-time> | null\n\nFilter events after this timestamp.\n\n​\nend_timestamp\nstring<date-time> | null\n\nFilter events before this timestamp.\n\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\nexternal_customer_id\nstring | null\nstring[] | null\n\nFilter by external customer ID.\n\n​\nmeter_id\nstring<uuid4> | null\n\nFilter by a meter filter clause.\nThe meter ID.\n\n​\nname\nstring | null\nstring[] | null\n\nFilter by event name.\n\n​\nsource\nenum<string> | null\nenum<string>[] | null\n\nFilter by event source.\n\nAvailable options: system, user \n​\nquery\nstring | null\n\nQuery to filter events.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nItems · arrayrequired\nMeterCreditEvent\nMeterResetEvent\nBenefitGrantedEvent\nBenefitCycledEvent\nBenefitUpdatedEvent\nBenefitRevokedEvent\nSubscriptionCycledEvent\nSubscriptionRevokedEvent\nSubscriptionProductUpdatedEvent\nUserEvent\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Meter\nCreate a meter. **Scopes**: `meters:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Checkout Link - Polar",
    "url": "https://polar.sh/docs/api-reference/checkout-links/create",
    "html": "Checkout Links\nCreate Checkout Link\nCopy page\n\nCreate a checkout link.\n\nScopes: checkout_links:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckout-links\n/\nTry it\nLooking to create a single use checkout session? Checkout Links are probably not what you’re looking for.\nCheckout Links are shareable links that generate checkout sessions when opened. They are very handy to start a purchase from your website or social media.\nHowever, if you want to start a checkout for one of your user inside your product, you should use the Checkout Sessions API.\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nCheckoutLinkCreateProductPrice\nCheckoutLinkCreateProduct\nCheckoutLinkCreateProducts\n\nSchema to create a new checkout link from a a single product price.\n\nDeprecated: Use CheckoutLinkCreateProducts instead.\n\n​\npayment_processor\nstringrequired\n\nPayment processor to use. Currently only Stripe is supported.\n\nAllowed value: \"stripe\"\n​\nproduct_price_id\nstring<uuid4>required\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ntrial_interval\nenum<string> | null\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | null\n\nThe number of interval units for the trial period.\n\nRequired range: 1 <= x <= 1000\n​\nlabel\nstring | null\n\nOptional label to distinguish links internally\n\n​\nallow_discount_codes\nbooleandefault:true\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleandefault:false\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.\n\n​\ndiscount_id\nstring<uuid4> | null\n\nID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.\n\n​\nsuccess_url\nstring<uri> | null\n\nURL where the customer will be redirected after a successful payment.You can add the checkout_id={CHECKOUT_ID} query parameter to retrieve the checkout session id.\n\nRequired string length: 1 - 2083\nResponse\n201\napplication/json\n\nCheckout link created.\n\nCheckout link data.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nclient_secret\nstringrequired\n\nClient secret used to access the checkout link.\n\n​\nsuccess_url\nstring | nullrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nlabel\nstring | nullrequired\n\nOptional label to distinguish links internally\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproducts\nCheckoutLinkProduct · object[]required\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nurl\nstringrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Checkout Link\nGet a checkout link by ID. **Scopes**: `checkout_links:read` `checkout_links:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create File - Polar",
    "url": "https://polar.sh/docs/api-reference/files/create",
    "html": "Files\nCreate File\nCopy page\n\nCreate a file.\n\nScopes: files:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nfiles\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nDownloadableFileCreate\nProductMediaFileCreate\nOrganizationAvatarFileCreate\n\nSchema to create a file to be associated with the downloadables benefit.\n\n​\nname\nstringrequired\n​\nmime_type\nstringrequired\n​\nsize\nintegerrequired\n​\nupload\nobjectrequired\n\nShow child attributes\n\n​\nservice\nstringrequired\nAllowed value: \"downloadable\"\n​\norganization_id\nstring<uuid4> | null\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nchecksum_sha256_base64\nstring | null\n​\nversion\nstring | null\nResponse\n201\napplication/json\n\nFile created.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\nname\nstringrequired\n​\npath\nstringrequired\n​\nmime_type\nstringrequired\n​\nsize\nintegerrequired\n​\nstorage_version\nstring | nullrequired\n​\nchecksum_etag\nstring | nullrequired\n​\nchecksum_sha256_base64\nstring | nullrequired\n​\nchecksum_sha256_hex\nstring | nullrequired\n​\nlast_modified_at\nstring<date-time> | nullrequired\n​\nupload\nobjectrequired\n\nShow child attributes\n\n​\nversion\nstring | nullrequired\n​\nservice\nenum<string>required\nAvailable options: downloadable, product_media, organization_avatar \n​\nsize_readable\nstringrequired\n​\nis_uploaded\nbooleandefault:false\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Files\nList files. **Scopes**: `files:read` `files:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/get",
    "html": "License Keys\nGet License Key\nCopy page\n\nGet a license key.\n\nScopes: license_keys:read license_keys:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\ncustomer_id\nstring<uuid4>required\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nbenefit_id\nstring<uuid4>required\n\nThe benefit ID.\n\n​\nkey\nstringrequired\n​\ndisplay_key\nstringrequired\n​\nstatus\nenum<string>required\nAvailable options: granted, revoked, disabled \n​\nlimit_activations\ninteger | nullrequired\n​\nusage\nintegerrequired\n​\nlimit_usage\ninteger | nullrequired\n​\nvalidations\nintegerrequired\n​\nlast_validated_at\nstring<date-time> | nullrequired\n​\nexpires_at\nstring<date-time> | nullrequired\n​\nactivations\nLicenseKeyActivationBase · object[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList License Keys\nGet license keys connected to the given organization & filters. **Scopes**: `license_keys:read` `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List License Keys - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/list",
    "html": "License Keys\nList License Keys\nCopy page\n\nGet license keys connected to the given organization & filters.\n\nScopes: license_keys:read license_keys:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nbenefit_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by benefit ID.\nThe benefit ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nLicenseKeyRead · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate License Key\nUpdate a license key. **Scopes**: `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/update",
    "html": "License Keys\nUpdate License Key\nCopy page\n\nUpdate a license key.\n\nScopes: license_keys:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\nBody\napplication/json\n​\nstatus\nenum<string> | null\nAvailable options: granted, revoked, disabled \n​\nusage\nintegerdefault:0\n​\nlimit_activations\ninteger | null\nRequired range: 0 < x <= 1000\n​\nlimit_usage\ninteger | null\nRequired range: x > 0\n​\nexpires_at\nstring<date-time> | null\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\ncustomer_id\nstring<uuid4>required\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nbenefit_id\nstring<uuid4>required\n\nThe benefit ID.\n\n​\nkey\nstringrequired\n​\ndisplay_key\nstringrequired\n​\nstatus\nenum<string>required\nAvailable options: granted, revoked, disabled \n​\nlimit_activations\ninteger | nullrequired\n​\nusage\nintegerrequired\n​\nlimit_usage\ninteger | nullrequired\n​\nvalidations\nintegerrequired\n​\nlast_validated_at\nstring<date-time> | nullrequired\n​\nexpires_at\nstring<date-time> | nullrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Activation\nGet a license key activation. **Scopes**: `license_keys:read` `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Activation - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/get-activation",
    "html": "License Keys\nGet Activation\nCopy page\n\nGet a license key activation.\n\nScopes: license_keys:read license_keys:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\n{id}\n/\nactivations\n/\n{activation_id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n​\nactivation_id\nstring<uuid4>required\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n​\nlicense_key_id\nstring<uuid4>required\n​\nlabel\nstringrequired\n​\nmeta\nobjectrequired\n\nShow child attributes\n\n​\ncreated_at\nstring<date-time>required\n​\nmodified_at\nstring<date-time> | nullrequired\n​\nlicense_key\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nValidate License Key\nValidate a license key. **Scopes**: `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Activate License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/activate",
    "html": "License Keys\nActivate License Key\nCopy page\n\nActivate a license key instance.\n\nScopes: license_keys:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\nactivate\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nkey\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\nlabel\nstringrequired\n​\nconditions\nobject\n\nKey-value object allowing you to set conditions that must match when validating the license key.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nmeta\nobject\n\nKey-value object allowing you to store additional information about the activation\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n​\nlicense_key_id\nstring<uuid4>required\n​\nlabel\nstringrequired\n​\nmeta\nobjectrequired\n\nShow child attributes\n\n​\ncreated_at\nstring<date-time>required\n​\nmodified_at\nstring<date-time> | nullrequired\n​\nlicense_key\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDeactivate License Key\nDeactivate a license key instance. **Scopes**: `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Validate License Key - Polar",
    "url": "https://polar.sh/docs/api-reference/license-keys/validate",
    "html": "License Keys\nValidate License Key\nCopy page\n\nValidate a license key.\n\nScopes: license_keys:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nlicense-keys\n/\nvalidate\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nkey\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\nactivation_id\nstring<uuid4> | null\n​\nbenefit_id\nstring<uuid4> | null\n\nThe benefit ID.\n\n​\ncustomer_id\nstring<uuid4> | null\n​\nincrement_usage\ninteger | null\n​\nconditions\nobject\n\nKey-value object allowing you to set conditions that must match when validating the license key.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\ncustomer_id\nstring<uuid4>required\n​\ncustomer\nobjectrequired\n\nShow child attributes\n\n​\nbenefit_id\nstring<uuid4>required\n\nThe benefit ID.\n\n​\nkey\nstringrequired\n​\ndisplay_key\nstringrequired\n​\nstatus\nenum<string>required\nAvailable options: granted, revoked, disabled \n​\nlimit_activations\ninteger | nullrequired\n​\nusage\nintegerrequired\n​\nlimit_usage\ninteger | nullrequired\n​\nvalidations\nintegerrequired\n​\nlast_validated_at\nstring<date-time> | nullrequired\n​\nexpires_at\nstring<date-time> | nullrequired\n​\nactivation\nobject | null\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nActivate License Key\nActivate a license key instance. **Scopes**: `license_keys:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "order.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/order.updated",
    "html": "Orders\norder.updated\nCopy page\n\nSent when an order is updated.\n\nAn order is updated when:\n\nIts status changes, e.g. from pending to paid.\nIt's refunded, partially or fully.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"order.updated\"\nExamples:\n\n\"order.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\norder.refunded\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Discount - Polar",
    "url": "https://polar.sh/docs/api-reference/discounts/get",
    "html": "Discounts\nGet Discount\nCopy page\n\nGet a discount by ID.\n\nScopes: discounts:read discounts:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ndiscounts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe discount ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nDiscountFixedOnceForeverDuration\nDiscountFixedRepeatDuration\nDiscountPercentageOnceForeverDuration\nDiscountPercentageRepeatDuration\n\nSchema for a fixed amount discount that is applied once or forever.\n\n​\nduration\nenum<string>required\nAvailable options: once, forever, repeating \n​\ntype\nenum<string>required\nAvailable options: fixed, percentage \n​\namount\nintegerrequired\nExamples:\n\n1000\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nname\nstringrequired\n\nName of the discount. Will be displayed to the customer when the discount is applied.\n\n​\ncode\nstring | nullrequired\n\nCode customers can use to apply the discount during checkout.\n\n​\nstarts_at\nstring<date-time> | nullrequired\n\nTimestamp after which the discount is redeemable.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nTimestamp after which the discount is no longer redeemable.\n\n​\nmax_redemptions\ninteger | nullrequired\n\nMaximum number of times the discount can be redeemed.\n\n​\nredemptions_count\nintegerrequired\n\nNumber of times the discount has been redeemed.\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproducts\nDiscountProduct · object[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Discounts\nList discounts. **Scopes**: `discounts:read` `discounts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Polar for Raycast - Polar",
    "url": "https://polar.sh/docs/features/integrations/raycast",
    "html": "Integrations\nPolar for Raycast\nCopy page\n\nThe fastest way to access Polar from your keyboard\n\n​\nInstall Extension\nHead over to Polar on the Raycast Store, and install it from there.\n​\nView Orders\nEasily view orders across organizations.\n​\nView Subscriptions\nView all active subscriptions across your organizations.\n​\nView Customers\nKeep track of all your customers.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nFramer\nThe fastest way to sell digital products on your Framer site\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Custom Field - Polar",
    "url": "https://polar.sh/docs/api-reference/custom-fields/delete",
    "html": "Custom Checkout Fields\nDelete Custom Field\nCopy page\n\nDelete a custom field.\n\nScopes: custom_fields:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustom-fields\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe custom field ID.\n\nResponse\n204\n\nCustom field deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Customer State\nGet a customer state by ID. The customer state includes information about the customer's active subscriptions and benefits. It's the ideal endpoint to use when you need to get a full overview of a customer's status. **Scopes**: `customers:read` `customers:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Metrics - Polar",
    "url": "https://polar.sh/docs/api-reference/metrics/get",
    "html": "Metrics\nGet Metrics\nCopy page\n\nGet metrics about your orders and subscriptions.\n\nCurrency values are output in cents.\n\nScopes: metrics:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmetrics\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\nstart_date\nstring<date>required\n\nStart date.\n\n​\nend_date\nstring<date>required\n\nEnd date.\n\n​\ntimezone\nstringdefault:UTC\n\nTimezone to use for the timestamps. Default is UTC.\n\nMinimum length: 1\n​\ninterval\nenum<string>required\n\nInterval between two timestamps.\n\nAvailable options: year, month, week, day, hour \n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\nbilling_type\nenum<string> | null\nenum<string>[] | null\n\nFilter by billing type. recurring will filter data corresponding to subscriptions creations or renewals. one_time will filter data corresponding to one-time purchases.\n\nAvailable options: one_time, recurring \n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nMetrics response schema.\n\n​\nperiods\nMetricPeriod · object[]required\n\nList of data for each timestamp.\n\nShow child attributes\n\n​\ntotals\nobjectrequired\n\nTotals for the whole selected period.\n\nShow child attributes\n\n​\nmetrics\nobjectrequired\n\nInformation about the returned metrics.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Metrics Limits\nGet the interval limits for the metrics endpoint. **Scopes**: `metrics:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Subscriptions - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/subscriptions/list",
    "html": "Subscriptions\nList Subscriptions\nCopy page\n\nList subscriptions of the authenticated customer.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nsubscriptions\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\nactive\nboolean | null\n\nFilter by active or cancelled subscription.\n\n​\nquery\nstring | null\n\nSearch by product or organization name.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nCustomerSubscription · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Subscription\nUpdate a subscription of the authenticated customer. **Scopes**: `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Subscription - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/subscriptions/update",
    "html": "Subscriptions\nUpdate Subscription\nCopy page\n\nUpdate a subscription of the authenticated customer.\n\nScopes: customer_portal:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nsubscriptions\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe subscription ID.\n\nBody\napplication/json\nCustomerSubscriptionUpdateProduct\nCustomerSubscriptionCancel\n​\nproduct_id\nstring<uuid4>required\n\nUpdate subscription to another product.\n\nResponse\n200\napplication/json\n\nCustomer subscription updated.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nproduct\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nCustomerSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nis_polar_managed\nbooleanrequired\n\nWhether the subscription is managed by Polar.\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCancel Subscription\nCancel a subscription of the authenticated customer. **Scopes**: `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Cancel Subscription - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/subscriptions/cancel",
    "html": "Subscriptions\nCancel Subscription\nCopy page\n\nCancel a subscription of the authenticated customer.\n\nScopes: customer_portal:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nsubscriptions\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe subscription ID.\n\nResponse\n200\napplication/json\n\nCustomer subscription is canceled.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nproduct\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nCustomerSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nis_polar_managed\nbooleanrequired\n\nWhether the subscription is managed by Polar.\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Order\nGet an order by ID for the authenticated customer. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/downloadables/get",
    "html": "File Downloads\nGet\nCopy page\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Downloadables\n**Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Order - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/orders/get",
    "html": "Orders\nGet Order\nCopy page\n\nGet an order by ID for the authenticated customer.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\norders\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nstatus\nenum<string>required\nAvailable options: pending, paid, refunded, partially_refunded \n​\npaid\nbooleanrequired\n\nWhether the order has been paid for.\n\nExamples:\n\ntrue\n\n​\nsubtotal_amount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\nExamples:\n\n10000\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\nExamples:\n\n1000\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\nExamples:\n\n9000\n\n​\ntax_amount\nintegerrequired\n\nSales tax amount in cents.\n\nExamples:\n\n720\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\nExamples:\n\n9720\n\n​\napplied_balance_amount\nintegerrequired\n\nCustomer's balance amount applied to this invoice. Can increase the total amount paid, if the customer has a negative balance, or decrease it, if the customer has a positive balance.Amount in cents.\n\nExamples:\n\n0\n\n​\ndue_amount\nintegerrequired\n\nAmount in cents that is due for this order.\n\nExamples:\n\n0\n\n​\nrefunded_amount\nintegerrequired\n\nAmount refunded in cents.\n\nExamples:\n\n0\n\n​\nrefunded_tax_amount\nintegerrequired\n\nSales tax refunded in cents.\n\nExamples:\n\n0\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\nbilling_reason\nenum<string>required\nAvailable options: purchase, subscription_create, subscription_cycle, subscription_update \n​\nbilling_name\nstring | nullrequired\n\nThe name of the customer that should appear on the invoice.\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ninvoice_number\nstringrequired\n\nThe invoice number associated with this order.\n\n​\nis_invoice_generated\nbooleanrequired\n\nWhether an invoice has been generated for this order.\n\n​\ncustomer_id\nstring<uuid4>required\n​\nproduct_id\nstring<uuid4> | nullrequired\n​\ndiscount_id\nstring<uuid4> | nullrequired\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\nuser_id\nstring<uuid4>requireddeprecated\n​\nproduct\nobject | nullrequired\n\nShow child attributes\n\n​\nsubscription\nobject | nullrequired\n\nShow child attributes\n\n​\nitems\nOrderItemSchema · object[]required\n\nLine items composing the order.\n\nShow child attributes\n\n​\ndescription\nstringrequired\n\nA summary description of the order.\n\nExamples:\n\n\"Pro Plan\"\n\n​\nseats\ninteger | null\n\nNumber of seats purchased (for seat-based one-time orders).\n\n​\nnext_payment_attempt_at\nstring<date-time> | null\n\nWhen the next payment retry is scheduled\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Order\nUpdate an order for the authenticated customer. **Scopes**: `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Order - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/orders/patch",
    "html": "Orders\nUpdate Order\nCopy page\n\nUpdate an order for the authenticated customer.\n\nScopes: customer_portal:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\norders\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nBody\napplication/json\n\nSchema to update an order.\n\n​\nbilling_name\nstring | nullrequired\n\nThe name of the customer that should appear on the invoice. Can't be updated after the invoice is generated.\n\n​\nbilling_address\nobject | nullrequired\n\nThe address of the customer that should appear on the invoice. Can't be updated after the invoice is generated.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nstatus\nenum<string>required\nAvailable options: pending, paid, refunded, partially_refunded \n​\npaid\nbooleanrequired\n\nWhether the order has been paid for.\n\nExamples:\n\ntrue\n\n​\nsubtotal_amount\nintegerrequired\n\nAmount in cents, before discounts and taxes.\n\nExamples:\n\n10000\n\n​\ndiscount_amount\nintegerrequired\n\nDiscount amount in cents.\n\nExamples:\n\n1000\n\n​\nnet_amount\nintegerrequired\n\nAmount in cents, after discounts but before taxes.\n\nExamples:\n\n9000\n\n​\ntax_amount\nintegerrequired\n\nSales tax amount in cents.\n\nExamples:\n\n720\n\n​\ntotal_amount\nintegerrequired\n\nAmount in cents, after discounts and taxes.\n\nExamples:\n\n9720\n\n​\napplied_balance_amount\nintegerrequired\n\nCustomer's balance amount applied to this invoice. Can increase the total amount paid, if the customer has a negative balance, or decrease it, if the customer has a positive balance.Amount in cents.\n\nExamples:\n\n0\n\n​\ndue_amount\nintegerrequired\n\nAmount in cents that is due for this order.\n\nExamples:\n\n0\n\n​\nrefunded_amount\nintegerrequired\n\nAmount refunded in cents.\n\nExamples:\n\n0\n\n​\nrefunded_tax_amount\nintegerrequired\n\nSales tax refunded in cents.\n\nExamples:\n\n0\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\nbilling_reason\nenum<string>required\nAvailable options: purchase, subscription_create, subscription_cycle, subscription_update \n​\nbilling_name\nstring | nullrequired\n\nThe name of the customer that should appear on the invoice.\n\n​\nbilling_address\nobject | nullrequired\n\nShow child attributes\n\n​\ninvoice_number\nstringrequired\n\nThe invoice number associated with this order.\n\n​\nis_invoice_generated\nbooleanrequired\n\nWhether an invoice has been generated for this order.\n\n​\ncustomer_id\nstring<uuid4>required\n​\nproduct_id\nstring<uuid4> | nullrequired\n​\ndiscount_id\nstring<uuid4> | nullrequired\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\nuser_id\nstring<uuid4>requireddeprecated\n​\nproduct\nobject | nullrequired\n\nShow child attributes\n\n​\nsubscription\nobject | nullrequired\n\nShow child attributes\n\n​\nitems\nOrderItemSchema · object[]required\n\nLine items composing the order.\n\nShow child attributes\n\n​\ndescription\nstringrequired\n\nA summary description of the order.\n\nExamples:\n\n\"Pro Plan\"\n\n​\nseats\ninteger | null\n\nNumber of seats purchased (for seat-based one-time orders).\n\n​\nnext_payment_attempt_at\nstring<date-time> | null\n\nWhen the next payment retry is scheduled\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Orders\nList orders of the authenticated customer. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Orders - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/orders/list",
    "html": "Orders\nList Orders\nCopy page\n\nList orders of the authenticated customer.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\norders\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\nproduct_billing_type\nenum<string> | null\nenum<string>[] | null\n\nFilter by product billing type. recurring will filter data corresponding to subscriptions creations or renewals. one_time will filter data corresponding to one-time purchases.\n\nAvailable options: one_time, recurring \n​\nsubscription_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by subscription ID.\nThe subscription ID.\n\n​\nquery\nstring | null\n\nSearch by product or organization name.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nCustomerOrder · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGenerate Order Invoice\nTrigger generation of an order's invoice. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Generate Order Invoice - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/orders/post-invoice",
    "html": "Orders\nGenerate Order Invoice\nCopy page\n\nTrigger generation of an order’s invoice.\n\nScopes: customer_portal:read customer_portal:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\norders\n/\n{id}\n/\ninvoice\nTry it\nOnce the invoice is generated, it’s permanent and cannot be modified.\nMake sure the billing details (name and address) are correct before generating the invoice. You can update them before generating the invoice by calling the PATCH /v1/customer-portal/orders/{id} endpoint.\nAfter successfully calling this endpoint, you get a 202 response, meaning the generation of the invoice has been scheduled. It usually only takes a few seconds before you can retrieve the invoice using the GET /v1/customer-portal/orders/{id}/invoice endpoint.\nIf you want a reliable notification when the invoice is ready, you can listen to the order.updated webhook and check the is_invoice_generated field.\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe order ID.\n\nResponse\n202\napplication/json\n\nSuccessful Response\n\nThe response is of type any.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Order Invoice\nGet an order's invoice data. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Refund - Polar",
    "url": "https://polar.sh/docs/api-reference/refunds/create",
    "html": "Refunds\nCreate Refund\nCopy page\n\nCreate a refund.\n\nScopes: refunds:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nrefunds\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\norder_id\nstring<uuid4>required\n​\nreason\nenum<string>required\nAvailable options: duplicate, fraudulent, customer_request, service_disruption, satisfaction_guarantee, other \n​\namount\nintegerrequired\n\nAmount to refund in cents. Minimum is 1.\n\nRequired range: x > 0\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ncomment\nstring | null\n\nAn internal comment about the refund.\n\n​\nrevoke_benefits\nbooleandefault:false\n\nShould this refund trigger the associated customer benefits to be revoked?\n\nNote:\nOnly allowed in case the order is a one-time purchase.\nSubscriptions automatically revoke customer benefits once the\nsubscription itself is revoked, i.e fully canceled.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nstatus\nenum<string>required\nAvailable options: pending, succeeded, failed, canceled \n​\nreason\nenum<string>required\nAvailable options: duplicate, fraudulent, customer_request, service_disruption, satisfaction_guarantee, other \n​\namount\nintegerrequired\n​\ntax_amount\nintegerrequired\n​\ncurrency\nstringrequired\n​\norganization_id\nstring<uuid4>required\n​\norder_id\nstring<uuid4>required\n​\nsubscription_id\nstring<uuid4> | nullrequired\n​\ncustomer_id\nstring<uuid4>required\n​\nrevoke_benefits\nbooleanrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Refunds\nList products. **Scopes**: `refunds:read` `refunds:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "LLM Strategy - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/ingestion-strategies/llm-strategy",
    "html": "Ingestion Strategies\nLLM Strategy\nCopy page\n\nIngestion strategy for LLM Usage\n\n​\nJavascript SDK\n​\nLLM Strategy\nWrap any LLM model from the @ai-sdk/* library, to automatically fire prompt- & completion tokens used by every model call.\nCopy\nAsk AI\npnpm add @polar-sh/ingestion ai @ai-sdk/openai\n\nCopy\nAsk AI\nimport { Ingestion } from \"@polar-sh/ingestion\";\nimport { LLMStrategy } from \"@polar-sh/ingestion/strategies/LLM\";\nimport { generateText } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Setup the LLM Ingestion Strategy\nconst llmIngestion = Ingestion({ accessToken: process.env.POLAR_ACCESS_TOKEN })\n  .strategy(new LLMStrategy(openai(\"gpt-4o\")))\n  .ingest(\"openai-usage\");\n\nexport async function POST(req: Request) {\n  const { prompt }: { prompt: string } = await req.json();\n\n  // Get the wrapped LLM model with ingestion capabilities\n  // Pass Customer Id to properly annotate the ingestion events with a specific customer\n  const model = llmIngestion.client({\n    customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\",\n  });\n\n  const { text } = await generateText({\n    model,\n    system: \"You are a helpful assistant.\",\n    prompt,\n  });\n\n  return Response.json({ text });\n}\n\n​\nIngestion Payload\nCopy\nAsk AI\n{\n  \"customerId\": \"123\",\n  \"name\": \"openai-usage\",\n  \"metadata\": {\n    \"promptTokens\": 100,\n    \"completionTokens\": 200\n  }\n}\n\n​\nPython SDK\nOur Python SDK includes an ingestion helper and strategies for common use cases. It’s installed as part of the Polar SDK.\npip\nuv\nCopy\nAsk AI\npip install polar-sdk\n\n​\nIngestion helper\nThe ingestion helper is a simple wrapper around the Polar events ingestion API. It takes care of batching and sending events to Polar in the background, without blocking your main thread.\nCopy\nAsk AI\nimport os\nfrom polar_sdk.ingestion import Ingestion\n\ningestion = Ingestion(os.getenv(\"POLAR_ACCESS_TOKEN\"))\n\ningestion.ingest({\n    \"name\": \"my-event\",\n    \"external_customer_id\": \"CUSTOMER_ID\",\n    \"metadata\": {\n        \"usage\": 13.37,\n    }\n})\n\n​\nPydanticAI Strategy\nPydanticAI is an AI agent framework for Python. A common use-case with AI applications is to track the usage of LLMs, like the number of input and output tokens, and bill the customer accordingly.\nWith our PydanticAI strategy, you can easily track the usage of LLMs and send the data to Polar for billing.\nCopy\nAsk AI\nimport os\nfrom polar_sdk.ingestion import Ingestion\nfrom polar_sdk.ingestion.strategies import PydanticAIStrategy\nfrom pydantic import BaseModel\nfrom pydantic_ai import Agent\n\n\ningestion = Ingestion(os.getenv(\"POLAR_ACCESS_TOKEN\"))\nstrategy = ingestion.strategy(PydanticAIStrategy, \"ai_usage\")\n\n\nclass MyModel(BaseModel):\n    city: str\n    country: str\n\n\nagent = Agent(\"gpt-4.1-nano\", output_type=MyModel)\n\nif __name__ == '__main__':\n    result = agent.run_sync(\"The windy city in the US of A.\")\n    print(result.output)\n    strategy.ingest(\"CUSTOMER_ID\", result)\n\nThis example is inspired from the Pydantic Model example of PydanticAI documentation.\n​\nIngestion Payload\nCopy\nAsk AI\n{\n  \"name\": \"ai_usage\",\n  \"external_customer_id\": \"CUSTOMER_ID\",\n  \"metadata\": {\n    \"requests\": 1,\n    \"total_tokens\": 78,\n    \"request_tokens\": 58,\n    \"response_tokens\": 20\n  }\n}\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nS3 Strategy\nIngestion strategy for S3 Operations\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "S3 Strategy - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/ingestion-strategies/s3-strategy",
    "html": "Ingestion Strategies\nS3 Strategy\nCopy page\n\nIngestion strategy for S3 Operations\n\n​\nJavascript SDK\nWrap the official AWS S3 Client with our S3 Ingestion Strategy to automatically ingest bytes uploaded.\nCopy\nAsk AI\npnpm add @polar-sh/ingestion @aws-sdk/client-s3\n\nCopy\nAsk AI\nimport { Ingestion } from \"@polar-sh/ingestion\";\nimport { S3Strategy } from \"@polar-sh/ingestion/strategies/S3\";\nimport { PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION,\n  endpoint: process.env.AWS_ENDPOINT_URL,\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  },\n});\n\n// Setup the S3 Ingestion Strategy\nconst s3Ingestion = Ingestion({ accessToken: process.env.POLAR_ACCESS_TOKEN })\n  .strategy(new S3Strategy(s3Client))\n  .ingest(\"s3-uploads\");\n\nexport async function POST(request: Request) {\n  try {\n    // Get the wrapped S3 Client\n    // Pass Customer Id to properly annotate the ingestion events with a specific customer\n    const s3 = s3Ingestion.client({\n      customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\",\n    });\n\n    await s3.send(\n      new PutObjectCommand({\n        Bucket: process.env.AWS_BUCKET_NAME,\n        Key: \"a-random-key\",\n        Body: JSON.stringify({\n          name: \"John Doe\",\n          age: 30,\n        }),\n        ContentType: \"application/json\",\n      })\n    );\n\n    return Response.json({});\n  } catch (error) {\n    return Response.json({ error: error.message });\n  }\n}\n\n​\nIngestion Payload\nCopy\nAsk AI\n{\n  \"customerId\": \"123\",\n  \"name\": \"s3-uploads\",\n  \"metadata\": {\n    \"bytes\": 100,\n    \"bucket\": \"my-bucket\",\n    \"key\": \"my-key\",\n    \"contentType\": \"application/text\"\n  }\n}\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nStream Strategy\nIngestion strategy for Readable & Writable Streams\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Stream Strategy - Polar",
    "url": "https://polar.sh/docs/features/usage-based-billing/ingestion-strategies/stream-strategy",
    "html": "Ingestion Strategies\nStream Strategy\nCopy page\n\nIngestion strategy for Readable & Writable Streams\n\n​\nJavascript SDK\nWrap any Readable or Writable stream of choice to automatically ingest the bytes consumed.\nCopy\nAsk AI\npnpm add @polar-sh/ingestion\n\nCopy\nAsk AI\nimport { Ingestion } from '@polar-sh/ingestion';\nimport { StreamStrategy } from '@polar-sh/ingestion/strategies/Stream';\n\nconst myReadstream = createReadStream(...);\n\n// Setup the Stream Ingestion Strategy\nconst streamIngestion = Ingestion({ accessToken: process.env.POLAR_ACCESS_TOKEN })\n  .strategy(new StreamStrategy(myReadstream))\n  .ingest(\"my-stream\");\n\nexport async function GET(request: Request) {\n  try {\n\n    // Get the wrapped stream\n    // Pass Customer Id to properly annotate the ingestion events with a specific customer\n    const stream = streamIngestion.client({\n      customerId: request.headers.get(\"X-Polar-Customer-Id\") ?? \"\"\n    });\n\n    // Consume stream...\n    stream.on('data', () => ...)\n\n    return Response.json({});\n  } catch (error) {\n    return Response.json({ error: error.message });\n  }\n}\n\n​\nIngestion Payload\nCopy\nAsk AI\n{\n  \"customerId\": \"123\",\n  \"name\": \"my-stream\",\n  \"metadata\": {\n    \"bytes\": 100\n  }\n}\n\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelta Time Strategy\nIngest delta time of arbitrary execution\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Customer Meter - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-meters/get",
    "html": "Customer Meters\nGet Customer Meter\nCopy page\n\nGet a customer meter by ID.\n\nScopes: customer_meters:read\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-meters\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe customer meter ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nAn active customer meter, with current consumed and credited units.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the customer.\n\nExamples:\n\n\"992fae2a-2a17-4b7a-8d9e-e287cf90131b\"\n\n​\nmeter_id\nstring<uuid4>required\n\nThe ID of the meter.\n\nExamples:\n\n\"d498a884-e2cd-4d3e-8002-f536468a8b22\"\n\n​\nconsumed_units\nnumberrequired\n\nThe number of consumed units.\n\nExamples:\n\n25\n\n​\ncredited_units\nintegerrequired\n\nThe number of credited units.\n\nExamples:\n\n100\n\n​\nbalance\nnumberrequired\n\nThe balance of the meter, i.e. the difference between credited and consumed units.\n\nExamples:\n\n75\n\n​\ncustomer\nobjectrequired\n\nThe customer associated with this meter.\n\nShow child attributes\n\n​\nmeter\nobjectrequired\n\nThe meter associated with this customer.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Customer Meters\nList customer meters. **Scopes**: `customer_meters:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Meter - Polar",
    "url": "https://polar.sh/docs/api-reference/meters/create",
    "html": "Meters\nCreate Meter\nCopy page\n\nCreate a meter.\n\nScopes: meters:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmeters\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nname\nstringrequired\n\nThe name of the meter. Will be shown on customer's invoices and usage.\n\nMinimum length: 3\n​\nfilter\nobjectrequired\n\nThe filter to apply on events that'll be used to calculate the meter.\n\nShow child attributes\n\n​\naggregation\nobjectrequired\n\nThe aggregation to apply on the filtered events to calculate the meter.\n\nCountAggregation\nPropertyAggregation\nUniqueAggregation\n\nShow child attributes\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4> | null\n\nThe ID of the organization owning the meter. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n201\napplication/json\n\nMeter created.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nname\nstringrequired\n\nThe name of the meter. Will be shown on customer's invoices and usage.\n\n​\nfilter\nobjectrequired\n\nThe filter to apply on events that'll be used to calculate the meter.\n\nShow child attributes\n\n​\naggregation\nobjectrequired\n\nThe aggregation to apply on the filtered events to calculate the meter.\n\nCountAggregation\nPropertyAggregation\nUniqueAggregation\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the meter.\n\n​\narchived_at\nstring<date-time> | null\n\nWhether the meter is archived and the time it was archived.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Meter\nGet a meter by ID. **Scopes**: `meters:read` `meters:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Checkout Link - Polar",
    "url": "https://polar.sh/docs/api-reference/checkout-links/get",
    "html": "Checkout Links\nGet Checkout Link\nCopy page\n\nGet a checkout link by ID.\n\nScopes: checkout_links:read checkout_links:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckout-links\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe checkout link ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nCheckout link data.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nclient_secret\nstringrequired\n\nClient secret used to access the checkout link.\n\n​\nsuccess_url\nstring | nullrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nlabel\nstring | nullrequired\n\nOptional label to distinguish links internally\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproducts\nCheckoutLinkProduct · object[]required\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nurl\nstringrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Checkout Links\nList checkout links. **Scopes**: `checkout_links:read` `checkout_links:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Checkout Links - Polar",
    "url": "https://polar.sh/docs/api-reference/checkout-links/list",
    "html": "Checkout Links\nList Checkout Links\nCopy page\n\nList checkout links.\n\nScopes: checkout_links:read checkout_links:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckout-links\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproduct_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by product ID.\nThe product ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nCheckoutLink · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Checkout Link\nUpdate a checkout link. **Scopes**: `checkout_links:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Checkout Link - Polar",
    "url": "https://polar.sh/docs/api-reference/checkout-links/delete",
    "html": "Checkout Links\nDelete Checkout Link\nCopy page\n\nDelete a checkout link.\n\nScopes: checkout_links:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckout-links\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe checkout link ID.\n\nResponse\n204\n\nCheckout link deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Custom Field\nCreate a custom field. **Scopes**: `custom_fields:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Checkout Link - Polar",
    "url": "https://polar.sh/docs/api-reference/checkout-links/update",
    "html": "Checkout Links\nUpdate Checkout Link\nCopy page\n\nUpdate a checkout link.\n\nScopes: checkout_links:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncheckout-links\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe checkout link ID.\n\nBody\napplication/json\n\nSchema to update an existing checkout link.\n\n​\ntrial_interval\nenum<string> | null\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | null\n\nThe number of interval units for the trial period.\n\nRequired range: 1 <= x <= 1000\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nproducts\nstring<uuid4>[] | null\n\nList of products that will be available to select at checkout.\n\nMinimum length: 1\n​\nlabel\nstring | null\n​\nallow_discount_codes\nboolean | null\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nboolean | null\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.\n\n​\ndiscount_id\nstring<uuid4> | null\n\nID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.\n\n​\nsuccess_url\nstring<uri> | null\n\nURL where the customer will be redirected after a successful payment.You can add the checkout_id={CHECKOUT_ID} query parameter to retrieve the checkout session id.\n\nRequired string length: 1 - 2083\nResponse\n200\napplication/json\n\nCheckout link updated.\n\nCheckout link data.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntrial_interval\nenum<string> | nullrequired\n\nThe interval unit for the trial period.\n\nAvailable options: day, week, month, year \n​\ntrial_interval_count\ninteger | nullrequired\n\nThe number of interval units for the trial period.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\npayment_processor\nenum<string>required\n\nPayment processor used.\n\nAvailable options: stripe \n​\nclient_secret\nstringrequired\n\nClient secret used to access the checkout link.\n\n​\nsuccess_url\nstring | nullrequired\n\nURL where the customer will be redirected after a successful payment.\n\n​\nlabel\nstring | nullrequired\n\nOptional label to distinguish links internally\n\n​\nallow_discount_codes\nbooleanrequired\n\nWhether to allow the customer to apply discount codes. If you apply a discount through discount_id, it'll still be applied, but the customer won't be able to change it.\n\n​\nrequire_billing_address\nbooleanrequired\n\nWhether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproducts\nCheckoutLinkProduct · object[]required\n\nShow child attributes\n\n​\ndiscount\nobject | nullrequired\nDiscountFixedOnceForeverDurationBase\nDiscountFixedRepeatDurationBase\nDiscountPercentageOnceForeverDurationBase\nDiscountPercentageRepeatDurationBase\n\nShow child attributes\n\n​\nurl\nstringrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Checkout Link\nDelete a checkout link. **Scopes**: `checkout_links:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Files - Polar",
    "url": "https://polar.sh/docs/api-reference/files/list",
    "html": "Files\nList Files\nCopy page\n\nList files.\n\nScopes: files:read files:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nfiles\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nids\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by file ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nItems · arrayrequired\nDownloadableFileRead\nProductMediaFileRead\nOrganizationAvatarFileRead\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate File\nUpdate a file. **Scopes**: `files:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update File - Polar",
    "url": "https://polar.sh/docs/api-reference/files/update",
    "html": "Files\nUpdate File\nCopy page\n\nUpdate a file.\n\nScopes: files:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nfiles\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe file ID.\n\nBody\napplication/json\n​\nname\nstring | null\n​\nversion\nstring | null\nResponse\n200\napplication/json\n\nFile updated.\n\nDownloadableFileRead\nProductMediaFileRead\nOrganizationAvatarFileRead\n\nFile to be associated with the downloadables benefit.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\nname\nstringrequired\n​\npath\nstringrequired\n​\nmime_type\nstringrequired\n​\nsize\nintegerrequired\n​\nstorage_version\nstring | nullrequired\n​\nchecksum_etag\nstring | nullrequired\n​\nchecksum_sha256_base64\nstring | nullrequired\n​\nchecksum_sha256_hex\nstring | nullrequired\n​\nlast_modified_at\nstring<date-time> | nullrequired\n​\nversion\nstring | nullrequired\n​\nservice\nstringrequired\nAllowed value: \"downloadable\"\n​\nis_uploaded\nbooleanrequired\n​\ncreated_at\nstring<date-time>required\n​\nsize_readable\nstringrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete File\nDelete a file. **Scopes**: `files:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete File - Polar",
    "url": "https://polar.sh/docs/api-reference/files/delete",
    "html": "Files\nDelete File\nCopy page\n\nDelete a file.\n\nScopes: files:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nfiles\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\nResponse\n204\n\nFile deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nComplete File Upload\nComplete a file upload. **Scopes**: `files:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Complete File Upload - Polar",
    "url": "https://polar.sh/docs/api-reference/files/complete-upload",
    "html": "Files\nComplete File Upload\nCopy page\n\nComplete a file upload.\n\nScopes: files:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nfiles\n/\n{id}\n/\nuploaded\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe file ID.\n\nBody\napplication/json\n​\nid\nstringrequired\n​\npath\nstringrequired\n​\nparts\nS3FileUploadCompletedPart · object[]required\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nFile upload completed.\n\nDownloadableFileRead\nProductMediaFileRead\nOrganizationAvatarFileRead\n\nFile to be associated with the downloadables benefit.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\norganization_id\nstring<uuid4>required\n​\nname\nstringrequired\n​\npath\nstringrequired\n​\nmime_type\nstringrequired\n​\nsize\nintegerrequired\n​\nstorage_version\nstring | nullrequired\n​\nchecksum_etag\nstring | nullrequired\n​\nchecksum_sha256_base64\nstring | nullrequired\n​\nchecksum_sha256_hex\nstring | nullrequired\n​\nlast_modified_at\nstring<date-time> | nullrequired\n​\nversion\nstring | nullrequired\n​\nservice\nstringrequired\nAllowed value: \"downloadable\"\n​\nis_uploaded\nbooleanrequired\n​\ncreated_at\nstring<date-time>required\n​\nsize_readable\nstringrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Organization\nGet an organization by ID. **Scopes**: `organizations:read` `organizations:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "order.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/order.created",
    "html": "Orders\norder.created\nCopy page\n\nSent when a new order is created.\n\nA new order is created when:\n\nA customer purchases a one-time product. In this case, billing_reason is set to purchase.\nA customer starts a subscription. In this case, billing_reason is set to subscription_create.\nA subscription is renewed. In this case, billing_reason is set to subscription_cycle.\nA subscription is upgraded or downgraded with an immediate proration invoice. In this case, billing_reason is set to subscription_update.\n\n<Warning>The order might not be paid yet, so the status field might be pending.</Warning>\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"order.created\"\nExamples:\n\n\"order.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\norder.paid\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "order.paid - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/order.paid",
    "html": "Orders\norder.paid\nCopy page\n\nSent when an order is paid.\n\nWhen you receive this event, the order is fully processed and payment has been received.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"order.paid\"\nExamples:\n\n\"order.paid\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\norder.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "order.refunded - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/order.refunded",
    "html": "Orders\norder.refunded\nCopy page\n\nSent when an order is fully or partially refunded.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"order.refunded\"\nExamples:\n\n\"order.refunded\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer_seat.assigned\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Discounts - Polar",
    "url": "https://polar.sh/docs/api-reference/discounts/list",
    "html": "Discounts\nList Discounts\nCopy page\n\nList discounts.\n\nScopes: discounts:read discounts:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ndiscounts\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nquery\nstring | null\n\nFilter by name.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nItems · arrayrequired\nDiscountFixedOnceForeverDuration\nDiscountFixedRepeatDuration\nDiscountPercentageOnceForeverDuration\nDiscountPercentageRepeatDuration\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Discount\nCreate a discount. **Scopes**: `discounts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Discount - Polar",
    "url": "https://polar.sh/docs/api-reference/discounts/create",
    "html": "Discounts\nCreate Discount\nCopy page\n\nCreate a discount.\n\nScopes: discounts:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ndiscounts\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nDiscountFixedOnceForeverDurationCreate\nDiscountFixedRepeatDurationCreate\nDiscountPercentageOnceForeverDurationCreate\nDiscountPercentageRepeatDurationCreate\n\nSchema to create a fixed amount discount that is applied once or forever.\n\n​\nduration\nenum<string>required\nAvailable options: once, forever, repeating \n​\ntype\nenum<string>required\n\nType of the discount.\n\nAvailable options: fixed, percentage \n​\namount\nintegerrequired\n\nFixed amount to discount from the invoice total.\n\nRequired range: 0 <= x <= 999999999999\n​\nname\nstringrequired\n\nName of the discount. Will be displayed to the customer when the discount is applied.\n\nMinimum length: 1\n​\ncurrency\nstringdefault:usd\n\nThe currency. Currently, only usd is supported.\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ncode\nstring | null\n\nCode customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.\n\n​\nstarts_at\nstring<date-time> | null\n\nOptional timestamp after which the discount is redeemable.\n\n​\nends_at\nstring<date-time> | null\n\nOptional timestamp after which the discount is no longer redeemable.\n\n​\nmax_redemptions\ninteger | null\n\nOptional maximum number of times the discount can be redeemed.\n\nRequired range: x >= 1\n​\nproducts\nstring<uuid4>[] | null\n\nList of product IDs the discount can be applied to.\n\n​\norganization_id\nstring<uuid4> | null\n\nThe ID of the organization owning the discount. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n201\napplication/json\n\nDiscount created.\n\nDiscountFixedOnceForeverDuration\nDiscountFixedRepeatDuration\nDiscountPercentageOnceForeverDuration\nDiscountPercentageRepeatDuration\n\nSchema for a fixed amount discount that is applied once or forever.\n\n​\nduration\nenum<string>required\nAvailable options: once, forever, repeating \n​\ntype\nenum<string>required\nAvailable options: fixed, percentage \n​\namount\nintegerrequired\nExamples:\n\n1000\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nname\nstringrequired\n\nName of the discount. Will be displayed to the customer when the discount is applied.\n\n​\ncode\nstring | nullrequired\n\nCode customers can use to apply the discount during checkout.\n\n​\nstarts_at\nstring<date-time> | nullrequired\n\nTimestamp after which the discount is redeemable.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nTimestamp after which the discount is no longer redeemable.\n\n​\nmax_redemptions\ninteger | nullrequired\n\nMaximum number of times the discount can be redeemed.\n\n​\nredemptions_count\nintegerrequired\n\nNumber of times the discount has been redeemed.\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproducts\nDiscountProduct · object[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Discount\nUpdate a discount. **Scopes**: `discounts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Discount - Polar",
    "url": "https://polar.sh/docs/api-reference/discounts/update",
    "html": "Discounts\nUpdate Discount\nCopy page\n\nUpdate a discount.\n\nScopes: discounts:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ndiscounts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe discount ID.\n\nBody\napplication/json\n\nSchema to update a discount.\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nname\nstring | null\n\nName of the discount. Will be displayed to the customer when the discount is applied.\n\nMinimum length: 1\n​\ncode\nstring | null\n\nCode customers can use to apply the discount during checkout. Must be between 3 and 256 characters long and contain only alphanumeric characters.If not provided, the discount can only be applied via the API.\n\n​\nstarts_at\nstring<date-time> | null\n\nOptional timestamp after which the discount is redeemable.\n\n​\nends_at\nstring<date-time> | null\n\nOptional timestamp after which the discount is no longer redeemable.\n\n​\nmax_redemptions\ninteger | null\n\nOptional maximum number of times the discount can be redeemed.\n\nRequired range: x >= 1\n​\nduration\nenum<string> | null\nAvailable options: once, forever, repeating \n​\nduration_in_months\ninteger | null\n\nNumber of months the discount should be applied.\n\nFor this to work on yearly pricing, you should multiply this by 12.\nFor example, to apply the discount for 2 years, set this to 24.\n\nRequired range: 1 <= x <= 999\n​\ntype\nenum<string> | null\nAvailable options: fixed, percentage \n​\namount\ninteger | null\n\nFixed amount to discount from the invoice total.\n\nRequired range: 0 <= x <= 999999999999\n​\ncurrency\nstring | null\n\nThe currency. Currently, only usd is supported.\n\n​\nbasis_points\ninteger | null\n\nDiscount percentage in basis points.\n\nA basis point is 1/100th of a percent.\nFor example, to create a 25.5% discount, set this to 2550.\n\nRequired range: 1 <= x <= 10000\n​\nproducts\nstring<uuid4>[] | null\n\nList of product IDs the discount can be applied to.\n\nResponse\n200\napplication/json\n\nDiscount updated.\n\nDiscountFixedOnceForeverDuration\nDiscountFixedRepeatDuration\nDiscountPercentageOnceForeverDuration\nDiscountPercentageRepeatDuration\n\nSchema for a fixed amount discount that is applied once or forever.\n\n​\nduration\nenum<string>required\nAvailable options: once, forever, repeating \n​\ntype\nenum<string>required\nAvailable options: fixed, percentage \n​\namount\nintegerrequired\nExamples:\n\n1000\n\n​\ncurrency\nstringrequired\nExamples:\n\n\"usd\"\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nname\nstringrequired\n\nName of the discount. Will be displayed to the customer when the discount is applied.\n\n​\ncode\nstring | nullrequired\n\nCode customers can use to apply the discount during checkout.\n\n​\nstarts_at\nstring<date-time> | nullrequired\n\nTimestamp after which the discount is redeemable.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nTimestamp after which the discount is no longer redeemable.\n\n​\nmax_redemptions\ninteger | nullrequired\n\nMaximum number of times the discount can be redeemed.\n\n​\nredemptions_count\nintegerrequired\n\nNumber of times the discount has been redeemed.\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproducts\nDiscountProduct · object[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Discount\nDelete a discount. **Scopes**: `discounts:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Discount - Polar",
    "url": "https://polar.sh/docs/api-reference/discounts/delete",
    "html": "Discounts\nDelete Discount\nCopy page\n\nDelete a discount.\n\nScopes: discounts:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ndiscounts\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe discount ID.\n\nResponse\n204\n\nDiscount deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Refund\nCreate a refund. **Scopes**: `refunds:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Polar for Framer - Polar",
    "url": "https://polar.sh/docs/features/integrations/framer",
    "html": "Integrations\nPolar for Framer\nCopy page\n\nThe fastest way to sell digital products on your Framer site\n\nIntroducing the official Polar plugin for Framer. Allowing you to sell products on your site without having to build a custom checkout flow.\n​\nGetting Started\nGet your hands on the Polar plugin in the Framer Marketplace\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nZapier\nConnect Polar to hundreds of other apps with Zapier\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Polar for Zapier - Polar",
    "url": "https://polar.sh/docs/features/integrations/zapier",
    "html": "Integrations\nPolar for Zapier\nCopy page\n\nConnect Polar to hundreds of other apps with Zapier\n\nZapier lets you connect Polar to 2,000+ other web services. Automated connections called Zaps, set up in minutes with no coding, can automate your day-to-day tasks and build workflows between apps that otherwise wouldn’t be possible.\nEach Zap has one app as the Trigger, where your information comes from and which causes one or more Actions in other apps, where your data gets sent automatically.\nWe’ve focused on triggers (webhooks) for now, so you can react to events in Polar and trigger actions in other apps.\nNeed to perform actions in Polar? Tell us about your use case here and we’ll consider adding more actions in the future.\n​\nGetting Started with Zapier\nSign up for a free Zapier account, from there you can jump right in. To help you hit the ground running, you’ll find popular pre-made Zaps below.\n​\nHow do I connect Polar to Zapier?\nLog in to your Zapier account or create a new account. Navigate to “My Apps” from the top menu bar. Now click on “Connect a new account…” and search for “Polar” Use your credentials to connect your Polar account to Zapier. Once that’s done you can start creating an automation! Use a pre-made Zap or create your own with the Zap Editor. Creating a Zap requires no coding knowledge and you’ll be walked step-by-step through the setup. Need inspiration? See everything that’s possible with Polar and Zapier.\nIf you have any additional questions, you can open a ticket with Zapier Support from https://zapier.com/app/get-help\n​\nPopular use cases\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nParityDeals (PPP)\nOffer products with different price across the globe\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Purchase Power Parity with ParityDeals - Polar",
    "url": "https://polar.sh/docs/features/integrations/paritydeals",
    "html": "Integrations\nPurchase Power Parity with ParityDeals\nCopy page\n\nOffer products with different price across the globe\n\nWant to offer different prices in different countries? ParityDeals offers automatic pricing optimizations depending on customers geolocation and a seamless integration with Polar.\n​\nSimple Integration, Powerful Deals\nYou can easily and securely (OAuth 2.0) connect Polar to ParityDeals\nSelect products on Polar to offer deals for\nConfigure deals by country or holidays\nParityDeals automatically creates and manages discounts on Polar\nShowing them to customers based on time and geolocation (unless VPN is detected)\nOffering great & local deals internationally with ease\n​\nSetup Guide\n​\nSignup to ParityDeals\nGo to app.paritydeals.com and sign up.\n​\nConnect Polar on ParityDeals\nIn your ParityDeals dashboard, click Create Deals > Create Deals with Polar.\n​\nGrant ParityDeals Access (OAuth 2.0)\nNo need to create API access keys and share them externally. Just connect securely and grant the necessary permissions using Polar OAuth 2.0.\n​\nChoose Products\nNow, let’s select the Polar products you want to offer deals for.\n​\nConfigure Deals\nLet’s configure our deal settings.\nEnter your website URL (requires your own site vs. Polar storefront)\nEnter a targeted URL path, e.g /pricing to only show deals on that page\nNow we can configure the deals for different countries. ParityDeals offers great defaults, but you can of course change them.\n​\nConfigure Banner\nYou can then customize the ParityDeals banner to suit your site and design.\n​\nEmbed Banner\nFinally, we’re all setup over at ParityDeals. Just copy the script to their banner and embed it on your site. You’re now done 👏🏼\n​\nQuestions & Help\nCheckout the ParityDeals documentation for more guides and information.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAffonso Affiliates\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Affonso Affiliates with Polar - Polar",
    "url": "https://polar.sh/docs/features/integrations/affonso",
    "html": "Integrations\nAffonso Affiliates with Polar\nCopy page\nThis guide explains how to integrate Affonso’s affiliate marketing software with your Polar account to track and manage affiliate-driven sales for your SaaS business.\n​\nWhat is Affonso?\nAffonso is an affiliate marketing software that enables SaaS businesses to launch, manage, and scale their own affiliate programs. With Affonso, you can:\nSet up flexible commission structures\nManage multiple affiliate programs from one dashboard\nProvide your affiliates with real-time tracking and marketing resources\nAutomate affiliate payments and commission calculations\n​\nIntegration Steps\n​\n1. Create a Polar Access Token for Affonso\nFirst, you’ll need to create an API token in Polar that Affonso can use to communicate with your account:\nLogin to your Polar Dashboard\nNavigate to Settings in the main menu\nScroll down to the Developers section on the Settings page\nClick the New token button\nGive your token a name (e.g., “Affonso Integration”)\nSet token expiration to No expiration Important: If you set an expiration date, you’ll need to manually update the token in Affonso when it expires. Tracking will stop working if the token expires.\nEnable all the following scopes:\ndiscounts:read\ndiscounts:write\nevents:read\nsubscriptions:read\ncustomers:read\ncustomers:write\norders:read\nrefunds:read\nwebhooks:read\nwebhooks:write\nClick Create token and copy the generated token\nProvide this token to Affonso by entering it in their integration settings\n​\n2. Set Up Webhooks in Polar\nAfter connecting your Polar account with Affonso, you’ll receive a webhook URL and secret from Affonso. Add these to your Polar account:\nGo to Settings → Developers → Webhooks in your Polar Dashboard\nClick the “Add Endpoint” button\nIn the URL field, paste the webhook URL provided by Affonso\nFor Format, select RAW from the dropdown\nIn the Secret field, paste the webhook secret provided by Affonso\nUnder Events, enable all of the following:\norder.created\norder.refunded\nsubscription.canceled\nClick Save to complete the webhook setup\n​\n3. Add the Affonso Tracking Script to Your Website\nAdd Affonso’s tracking script to the <head> tag of your website:\nCopy\nAsk AI\n<!-- Place in <head> tag -->\n<script\n  async\n  defer\n  src=\"https://affonso.io/js/pixel.min.js\"\n  data-affonso=\"YOUR_AFFONSO_PROGRAM_ID\"\n  data-cookie_duration=\"YOUR_COOKIE_DURATION\">\n</script>\n\nReplace YOUR_AFFONSO_PROGRAM_ID with the unique program ID provided by Affonso.\nThis script should be placed on all pages of your website, including:\nYour main marketing website\nYour application domain\nAny subdomains where users might land or make purchases\n​\n4. Track User Signups (Optional)\nFor better conversion insights, you can track when users sign up through an affiliate link:\nCopy\nAsk AI\n// After successful registration\nwindow.Affonso.signup(userEmail);\n\n​\n5. Pass Referral Data to Polar Checkout\nTo ensure proper commission attribution, pass the referral data when creating checkout sessions:\nCopy\nAsk AI\n// Get the referral ID from the Affonso global variable\nconst referralId = window.affonso_referral;\n\n// Create checkout session with Polar\nconst checkout = await polar.checkouts.create({\n  products: [\"your_product_id\"],\n  success_url: \"https://your-site.com/success\",\n  metadata: {\n    affonso_referral: referralId, // Include referral ID from Affonso\n  }\n});\n\n// Redirect to checkout\nwindow.location.href = checkout.url;\n\n​\nHow It Works\nWhen a user visits your site through an affiliate link, Affonso’s script stores a unique identifier in a cookie\nIf you’ve implemented signup tracking, Affonso records when the user creates an account\nWhen the user makes a purchase, the referral ID is passed to Polar as metadata\nPolar’s webhook notifies Affonso about the purchase\nAffonso attributes the sale to the correct affiliate and calculates the commission\n​\nBenefits of the Integration\nAutomated Tracking: No manual work required to track affiliate-driven sales\nReal-Time Analytics: Both you and your affiliates get immediate insights into performance\nSeamless User Experience: The integration works behind the scenes without affecting your checkout flow\nFlexible Commission Structures: Set up complex commission rules based on product, subscription duration, etc.\n​\nGetting Help\nMore details about the integration: Polar Affiliate Program\nIf you need assistance with your Affonso integration, contact Affonso’s support team:\nEmail: hello@affonso.io\nLive chat: Available directly in the Affonso dashboard\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nFernand\nLearn how to sync customer and payment data from Polar to Fernand.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Polar Integration in Fernand - Polar",
    "url": "https://polar.sh/docs/features/integrations/fernand",
    "html": "Integrations\nPolar Integration in Fernand\nCopy page\n\nLearn how to sync customer and payment data from Polar to Fernand.\n\n​\nWhat is Fernand?\nFernand is a modern customer support tool designed for SaaS — it’s fast, calm, and built to reduce the anxiety of answering support requests.\n​\nHow it works\nAfter connecting your Polar account to Fernand, you’ll be able to see customer payment information and product access details directly within each customer conversation.\nThis enables you to:\nInstantly verify if someone is an active customer\nPrioritize conversations from high-tier plans\nView product purchases and payment history in context\n​\nHow to connect Fernand with Polar\nOpen Integrations in your Fernand organization settings.\nClick on Connect Polar.\nYou’ll be redirected to Polar to authorize the connection.\nOnce approved, Fernand will begin syncing customer data automatically.\nThat’s it! You’ll now see Polar customer info directly in Fernand’s conversation list and sidebar.\n​\nHow to automate your inbox with Polar data\nOnce Polar is connected, you can create automation rules in Fernand based on Polar data.\nLet’s walk through a basic example: auto-replying to all customers on your Pro plan.\n​\nCreate a new rule\n1\n\nCreate a new rule\n\nGo to Rules in Fernand.\nClick Add rule and give it a descriptive name.\n2\n\nSelect a trigger\n\nThis ensures the rule runs on each new customer message.\n3\n\nSelect a condition\n\nNow add a condition based on Polar data. For example:\nContact is a customer...\nContact has paid plan...\nYou can target specific plans (e.g. Pro, Business) or specific products to personalize support or automate prioritization.\n4\n\nSelect an action\n\nNow define what happens when the rule matches. For example:\nSend an auto reply (with variables)\nAssign the conversation to a specific agent\nTag the conversation with priority or paid\nTrigger a webhook for external automation\n​\nDisconnecting the integration\nIf you ever want to disconnect Polar from your Fernand workspace:\n1\n\nGo to the Integrations page.\n\n2\n\nClick Disconnect next to Polar.\n\nDeleting your organization on Fernand will also remove the Polar integration automatically.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAuthentication\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Custom Field - Polar",
    "url": "https://polar.sh/docs/api-reference/custom-fields/create",
    "html": "Custom Checkout Fields\nCreate Custom Field\nCopy page\n\nCreate a custom field.\n\nScopes: custom_fields:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustom-fields\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nCustomFieldCreateText\nCustomFieldCreateNumber\nCustomFieldCreateDate\nCustomFieldCreateCheckbox\nCustomFieldCreateSelect\n\nSchema to create a custom field of type text.\n\n​\ntype\nstringrequired\nAllowed value: \"text\"\n​\nslug\nstringrequired\n\nIdentifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.\n\nMinimum length: 1\n​\nname\nstringrequired\n\nName of the custom field.\n\nMinimum length: 1\n​\nproperties\nobjectrequired\n\nShow child attributes\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4> | null\n\nThe ID of the organization owning the custom field. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n201\napplication/json\n\nCustom field created.\n\nCustomFieldText\nCustomFieldNumber\nCustomFieldDate\nCustomFieldCheckbox\nCustomFieldSelect\n\nSchema for a custom field of type text.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ntype\nstringrequired\nAllowed value: \"text\"\n​\nslug\nstringrequired\n\nIdentifier of the custom field. It'll be used as key when storing the value.\n\n​\nname\nstringrequired\n\nName of the custom field.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the custom field.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproperties\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Custom Field\nGet a custom field by ID. **Scopes**: `custom_fields:read` `custom_fields:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Custom Field - Polar",
    "url": "https://polar.sh/docs/api-reference/custom-fields/get",
    "html": "Custom Checkout Fields\nGet Custom Field\nCopy page\n\nGet a custom field by ID.\n\nScopes: custom_fields:read custom_fields:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustom-fields\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe custom field ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nCustomFieldText\nCustomFieldNumber\nCustomFieldDate\nCustomFieldCheckbox\nCustomFieldSelect\n\nSchema for a custom field of type text.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ntype\nstringrequired\nAllowed value: \"text\"\n​\nslug\nstringrequired\n\nIdentifier of the custom field. It'll be used as key when storing the value.\n\n​\nname\nstringrequired\n\nName of the custom field.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the custom field.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproperties\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Custom Fields\nList custom fields. **Scopes**: `custom_fields:read` `custom_fields:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Custom Fields - Polar",
    "url": "https://polar.sh/docs/api-reference/custom-fields/list",
    "html": "Custom Checkout Fields\nList Custom Fields\nCopy page\n\nList custom fields.\n\nScopes: custom_fields:read custom_fields:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustom-fields\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nquery\nstring | null\n\nFilter by custom field name or slug.\n\n​\ntype\nenum<string> | null\nenum<string>[] | null\n\nFilter by custom field type.\n\nAvailable options: text, number, date, checkbox, select \n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nItems · arrayrequired\nCustomFieldText\nCustomFieldNumber\nCustomFieldDate\nCustomFieldCheckbox\nCustomFieldSelect\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Custom Field\nUpdate a custom field. **Scopes**: `custom_fields:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Custom Field - Polar",
    "url": "https://polar.sh/docs/api-reference/custom-fields/update",
    "html": "Custom Checkout Fields\nUpdate Custom Field\nCopy page\n\nUpdate a custom field.\n\nScopes: custom_fields:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustom-fields\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe custom field ID.\n\nBody\napplication/json\nCustomFieldUpdateText\nCustomFieldUpdateNumber\nCustomFieldUpdateDate\nCustomFieldUpdateCheckbox\nCustomFieldUpdateSelect\n\nSchema to update a custom field of type text.\n\n​\ntype\nstringrequired\nAllowed value: \"text\"\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nname\nstring | null\n\nName of the custom field.\n\nMinimum length: 1\n​\nslug\nstring | null\n\nIdentifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.\n\nMinimum length: 1\n​\nproperties\nobject | null\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nCustom field updated.\n\nCustomFieldText\nCustomFieldNumber\nCustomFieldDate\nCustomFieldCheckbox\nCustomFieldSelect\n\nSchema for a custom field of type text.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ntype\nstringrequired\nAllowed value: \"text\"\n​\nslug\nstringrequired\n\nIdentifier of the custom field. It'll be used as key when storing the value.\n\n​\nname\nstringrequired\n\nName of the custom field.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the custom field.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nproperties\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Custom Field\nDelete a custom field. **Scopes**: `custom_fields:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Organization - Polar",
    "url": "https://polar.sh/docs/api-reference/organizations/update",
    "html": "Organizations\nUpdate Organization\nCopy page\n\nUpdate an organization.\n\nScopes: organizations:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norganizations\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nBody\napplication/json\n​\nname\nstring | null\nMinimum length: 3\n​\navatar_url\nstring<uri> | null\nRequired string length: 1 - 2083\n​\nemail\nstring<email> | null\n\nPublic support email.\n\n​\nwebsite\nstring<uri> | null\n\nOfficial website of the organization.\n\nRequired string length: 1 - 2083\n​\nsocials\nOrganizationSocialLink · object[] | null\n\nLinks to social profiles.\n\nShow child attributes\n\n​\ndetails\nobject | null\n\nAdditional, private, business details Polar needs about active organizations for compliance (KYC).\n\nShow child attributes\n\n​\nfeature_settings\nobject | null\n\nShow child attributes\n\n​\nsubscription_settings\nobject | null\n\nShow child attributes\n\n​\nnotification_settings\nobject | null\n\nShow child attributes\n\n​\ncustomer_email_settings\nobject | null\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nOrganization updated.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nname\nstringrequired\n\nOrganization name shown in checkout, customer portal, emails etc.\n\n​\nslug\nstringrequired\n\nUnique organization slug in checkout, customer portal and credit card statements.\n\n​\navatar_url\nstring | nullrequired\n\nAvatar URL shown in checkout, customer portal, emails etc.\n\n​\nemail\nstring | nullrequired\n\nPublic support email.\n\n​\nwebsite\nstring | nullrequired\n\nOfficial website of the organization.\n\n​\nsocials\nOrganizationSocialLink · object[]required\n\nLinks to social profiles.\n\nShow child attributes\n\n​\nstatus\nenum<string>required\n\nCurrent organization status\n\nAvailable options: created, onboarding_started, under_review, denied, active \n​\ndetails_submitted_at\nstring<date-time> | nullrequired\n\nWhen the business details were submitted.\n\n​\nfeature_settings\nobject | nullrequired\n\nOrganization feature settings\n\nShow child attributes\n\n​\nsubscription_settings\nobjectrequired\n\nSettings related to subscriptions management\n\nShow child attributes\n\n​\nnotification_settings\nobjectrequired\n\nSettings related to notifications\n\nShow child attributes\n\n​\ncustomer_email_settings\nobjectrequired\n\nSettings related to customer emails\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Metrics\nGet metrics about your orders and subscriptions. Currency values are output in cents. **Scopes**: `metrics:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Downloadables - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/downloadables/list",
    "html": "File Downloads\nList Downloadables\nCopy page\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\ndownloadables\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nbenefit_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by benefit ID.\nThe benefit ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nDownloadableRead · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Seats\n**Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Benefit - Polar",
    "url": "https://polar.sh/docs/api-reference/benefits/delete",
    "html": "Benefits\nDelete Benefit\nCopy page\n\nDelete a benefit.\n\n[!WARNING] Every grants associated with the benefit will be revoked. Users will lose access to the benefit.\n\nScopes: benefits:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nbenefits\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe benefit ID.\n\nResponse\n204\n\nBenefit deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Customer Meter\nGet a customer meter by ID. **Scopes**: `customer_meters:read`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Meter - Polar",
    "url": "https://polar.sh/docs/api-reference/meters/get",
    "html": "Meters\nGet Meter\nCopy page\n\nGet a meter by ID.\n\nScopes: meters:read meters:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmeters\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe meter ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nname\nstringrequired\n\nThe name of the meter. Will be shown on customer's invoices and usage.\n\n​\nfilter\nobjectrequired\n\nThe filter to apply on events that'll be used to calculate the meter.\n\nShow child attributes\n\n​\naggregation\nobjectrequired\n\nThe aggregation to apply on the filtered events to calculate the meter.\n\nCountAggregation\nPropertyAggregation\nUniqueAggregation\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the meter.\n\n​\narchived_at\nstring<date-time> | null\n\nWhether the meter is archived and the time it was archived.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Meters\nList meters. **Scopes**: `meters:read` `meters:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Meters - Polar",
    "url": "https://polar.sh/docs/api-reference/meters/list",
    "html": "Meters\nList Meters\nCopy page\n\nList meters.\n\nScopes: meters:read meters:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmeters\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nquery\nstring | null\n\nFilter by name.\n\n​\nis_archived\nboolean | null\n\nFilter on archived meters.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nMeter · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Meter\nUpdate a meter. **Scopes**: `meters:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Meter - Polar",
    "url": "https://polar.sh/docs/api-reference/meters/update",
    "html": "Meters\nUpdate Meter\nCopy page\n\nUpdate a meter.\n\nScopes: meters:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmeters\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe meter ID.\n\nBody\napplication/json\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\nname\nstring | null\n\nThe name of the meter. Will be shown on customer's invoices and usage.\n\nMinimum length: 3\n​\nfilter\nobject | null\n\nThe filter to apply on events that'll be used to calculate the meter.\n\nShow child attributes\n\n​\naggregation\nobject | null\n\nThe aggregation to apply on the filtered events to calculate the meter.\n\nCountAggregation\nPropertyAggregation\nUniqueAggregation\n\nShow child attributes\n\n​\nis_archived\nboolean | null\n\nWhether the meter is archived. Archived meters are no longer used for billing.\n\nResponse\n200\napplication/json\n\nMeter updated.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nname\nstringrequired\n\nThe name of the meter. Will be shown on customer's invoices and usage.\n\n​\nfilter\nobjectrequired\n\nThe filter to apply on events that'll be used to calculate the meter.\n\nShow child attributes\n\n​\naggregation\nobjectrequired\n\nThe aggregation to apply on the filtered events to calculate the meter.\n\nCountAggregation\nPropertyAggregation\nUniqueAggregation\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the meter.\n\n​\narchived_at\nstring<date-time> | null\n\nWhether the meter is archived and the time it was archived.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Meter Quantities\nGet quantities of a meter over a time period. **Scopes**: `meters:read` `meters:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Meter Quantities - Polar",
    "url": "https://polar.sh/docs/api-reference/meters/get-quantities",
    "html": "Meters\nGet Meter Quantities\nCopy page\n\nGet quantities of a meter over a time period.\n\nScopes: meters:read meters:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nmeters\n/\n{id}\n/\nquantities\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe meter ID.\n\nQuery Parameters\n​\nstart_timestamp\nstring<date-time>required\n\nStart timestamp.\n\n​\nend_timestamp\nstring<date-time>required\n\nEnd timestamp.\n\n​\ninterval\nenum<string>required\n\nInterval between two timestamps.\n\nAvailable options: year, month, week, day, hour \n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer ID.\nThe customer ID.\n\n​\nexternal_customer_id\nstring | null\nstring[] | null\n\nFilter by external customer ID.\n\n​\ncustomer_aggregation_function\nenum<string> | null\n\nIf set, will first compute the quantities per customer before aggregating them using the given function. If not set, the quantities will be aggregated across all events.\n\nAvailable options: count, sum, max, min, avg, unique \n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nquantities\nMeterQuantity · object[]required\n\nShow child attributes\n\n​\ntotal\nnumberrequired\n\nThe total quantity for the period.\n\nExamples:\n\n100\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Benefit\nCreate a benefit. **Scopes**: `benefits:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Organization - Polar",
    "url": "https://polar.sh/docs/api-reference/organizations/get",
    "html": "Organizations\nGet Organization\nCopy page\n\nGet an organization by ID.\n\nScopes: organizations:read organizations:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norganizations\n/\n{id}\nTry it\nHello there. Just testing a custom intro.\nProperty\tDescription\nName\tFull name of user\nAge\tReported age\nJoined\tWhether the user joined the community\nContinuing here.\n​\n2024-10-12\nv0.1.1\nSome update to the endpoint here\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nname\nstringrequired\n\nOrganization name shown in checkout, customer portal, emails etc.\n\n​\nslug\nstringrequired\n\nUnique organization slug in checkout, customer portal and credit card statements.\n\n​\navatar_url\nstring | nullrequired\n\nAvatar URL shown in checkout, customer portal, emails etc.\n\n​\nemail\nstring | nullrequired\n\nPublic support email.\n\n​\nwebsite\nstring | nullrequired\n\nOfficial website of the organization.\n\n​\nsocials\nOrganizationSocialLink · object[]required\n\nLinks to social profiles.\n\nShow child attributes\n\n​\nstatus\nenum<string>required\n\nCurrent organization status\n\nAvailable options: created, onboarding_started, under_review, denied, active \n​\ndetails_submitted_at\nstring<date-time> | nullrequired\n\nWhen the business details were submitted.\n\n​\nfeature_settings\nobject | nullrequired\n\nOrganization feature settings\n\nShow child attributes\n\n​\nsubscription_settings\nobjectrequired\n\nSettings related to subscriptions management\n\nShow child attributes\n\n​\nnotification_settings\nobjectrequired\n\nSettings related to notifications\n\nShow child attributes\n\n​\ncustomer_email_settings\nobjectrequired\n\nSettings related to customer emails\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Organizations\nList organizations. **Scopes**: `organizations:read` `organizations:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer_seat.assigned - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer_seat.assigned",
    "html": "Customer Seats\ncustomer_seat.assigned\nCopy page\n\nSent when a new customer seat is assigned.\n\nThis event is triggered when a seat is assigned to a customer by the organization.\nThe customer will receive an invitation email to claim the seat.\n\n​\ntype\nstringrequired\nAllowed value: \"customer_seat.assigned\"\nExamples:\n\n\"customer_seat.assigned\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer_seat.claimed\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "subscription.revoked - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/subscription.revoked",
    "html": "Subscriptions\nsubscription.revoked\nCopy page\n\nSent when a subscription is revoked, the user loses access immediately.\nHappens when the subscription is canceled, or payment is past due.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"subscription.revoked\"\nExamples:\n\n\"subscription.revoked\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\norder.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Organization - Polar",
    "url": "https://polar.sh/docs/api-reference/organizations/create",
    "html": "Organizations\nCreate Organization\nCopy page\n\nCreate an organization.\n\nScopes: organizations:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norganizations\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n​\nname\nstringrequired\nMinimum length: 3\n​\nslug\nstringrequired\nMinimum length: 3\n​\navatar_url\nstring<uri> | null\nRequired string length: 1 - 2083\n​\nemail\nstring<email> | null\n\nPublic support email.\n\n​\nwebsite\nstring<uri> | null\n\nOfficial website of the organization.\n\nRequired string length: 1 - 2083\n​\nsocials\nOrganizationSocialLink · object[] | null\n\nLink to social profiles.\n\nShow child attributes\n\n​\ndetails\nobject | null\n\nAdditional, private, business details Polar needs about active organizations for compliance (KYC).\n\nShow child attributes\n\n​\nfeature_settings\nobject | null\n\nShow child attributes\n\n​\nsubscription_settings\nobject | null\n\nShow child attributes\n\n​\nnotification_settings\nobject | null\n\nShow child attributes\n\n​\ncustomer_email_settings\nobject | null\n\nShow child attributes\n\nResponse\n201\napplication/json\n\nOrganization created.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\nname\nstringrequired\n\nOrganization name shown in checkout, customer portal, emails etc.\n\n​\nslug\nstringrequired\n\nUnique organization slug in checkout, customer portal and credit card statements.\n\n​\navatar_url\nstring | nullrequired\n\nAvatar URL shown in checkout, customer portal, emails etc.\n\n​\nemail\nstring | nullrequired\n\nPublic support email.\n\n​\nwebsite\nstring | nullrequired\n\nOfficial website of the organization.\n\n​\nsocials\nOrganizationSocialLink · object[]required\n\nLinks to social profiles.\n\nShow child attributes\n\n​\nstatus\nenum<string>required\n\nCurrent organization status\n\nAvailable options: created, onboarding_started, under_review, denied, active \n​\ndetails_submitted_at\nstring<date-time> | nullrequired\n\nWhen the business details were submitted.\n\n​\nfeature_settings\nobject | nullrequired\n\nOrganization feature settings\n\nShow child attributes\n\n​\nsubscription_settings\nobjectrequired\n\nSettings related to subscriptions management\n\nShow child attributes\n\n​\nnotification_settings\nobjectrequired\n\nSettings related to notifications\n\nShow child attributes\n\n​\ncustomer_email_settings\nobjectrequired\n\nSettings related to customer emails\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Organization\nUpdate an organization. **Scopes**: `organizations:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Organizations - Polar",
    "url": "https://polar.sh/docs/api-reference/organizations/list",
    "html": "Organizations\nList Organizations\nCopy page\n\nList organizations.\n\nScopes: organizations:read organizations:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\norganizations\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\nslug\nstring | null\n\nFilter by slug.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nOrganization · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Organization\nCreate an organization. **Scopes**: `organizations:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Seats - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/seats/list",
    "html": "Seats\nList Seats\nCopy page\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nseats\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nQuery Parameters\n​\nsubscription_id\nstring | null\n\nSubscription ID\n\n​\norder_id\nstring | null\n\nOrder ID\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nseats\nCustomerSeat · object[]required\n\nList of seats\n\nShow child attributes\n\n​\navailable_seats\nintegerrequired\n\nNumber of available seats\n\n​\ntotal_seats\nintegerrequired\n\nTotal number of seats for the subscription\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAssign Seat\n**Scopes**: `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Benefit - Polar",
    "url": "https://polar.sh/docs/api-reference/benefits/create",
    "html": "Benefits\nCreate Benefit\nCopy page\n\nCreate a benefit.\n\nScopes: benefits:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nbenefits\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\nBenefitCustomCreate\nBenefitDiscordCreate\nBenefitGitHubRepositoryCreate\nBenefitDownloadablesCreate\nBenefitLicenseKeysCreate\nBenefitMeterCreditCreate\n\nSchema to create a benefit of type custom.\n\n​\ntype\nstringrequired\nAllowed value: \"custom\"\n​\ndescription\nstringrequired\n\nThe description of the benefit. Will be displayed on products having this benefit.\n\nRequired string length: 3 - 42\n​\nproperties\nobjectrequired\n\nProperties for creating a benefit of type custom.\n\nShow child attributes\n\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\norganization_id\nstring<uuid4> | null\n\nThe ID of the organization owning the benefit. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n201\napplication/json\n\nBenefit created.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nA benefit of type custom.\n\nUse it to grant any kind of benefit that doesn't fit in the other types.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the benefit.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntype\nstringrequired\nAllowed value: \"custom\"\n​\ndescription\nstringrequired\n\nThe description of the benefit.\n\n​\nselectable\nbooleanrequired\n\nWhether the benefit is selectable when creating a product.\n\n​\ndeletable\nbooleanrequired\n\nWhether the benefit is deletable.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the benefit.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nproperties\nobjectrequired\n\nProperties for a benefit of type custom.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Benefit\nGet a benefit by ID. **Scopes**: `benefits:read` `benefits:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Benefit - Polar",
    "url": "https://polar.sh/docs/api-reference/benefits/get",
    "html": "Benefits\nGet Benefit\nCopy page\n\nGet a benefit by ID.\n\nScopes: benefits:read benefits:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nbenefits\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe benefit ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nA benefit of type custom.\n\nUse it to grant any kind of benefit that doesn't fit in the other types.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the benefit.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntype\nstringrequired\nAllowed value: \"custom\"\n​\ndescription\nstringrequired\n\nThe description of the benefit.\n\n​\nselectable\nbooleanrequired\n\nWhether the benefit is selectable when creating a product.\n\n​\ndeletable\nbooleanrequired\n\nWhether the benefit is deletable.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the benefit.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nproperties\nobjectrequired\n\nProperties for a benefit of type custom.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Benefits\nList benefits. **Scopes**: `benefits:read` `benefits:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Benefits - Polar",
    "url": "https://polar.sh/docs/api-reference/benefits/list",
    "html": "Benefits\nList Benefits\nCopy page\n\nList benefits.\n\nScopes: benefits:read benefits:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nbenefits\n/\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\ntype\nenum<string> | null\nenum<string>[] | null\n\nFilter by benefit type.\n\nAvailable options: custom, discord, github_repository, downloadables, license_keys, meter_credit \n​\nquery\nstring | null\n\nFilter by description.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\n​\nsorting\nenum<string>[] | null\n\nSorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign - before the criteria name to sort by descending order.\n\nShow child attributes\n\n​\nmetadata\nobject | null\n\nFilter by metadata key-value pairs. It uses the deepObject style, e.g. ?metadata[key]=value.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nItems · arrayrequired\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Benefit Grants\nList the individual grants for a benefit. It's especially useful to check if a user has been granted a benefit. **Scopes**: `benefits:read` `benefits:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Benefit - Polar",
    "url": "https://polar.sh/docs/api-reference/benefits/update",
    "html": "Benefits\nUpdate Benefit\nCopy page\n\nUpdate a benefit.\n\nScopes: benefits:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nbenefits\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe benefit ID.\n\nBody\napplication/json\nBenefitCustomUpdate\nBenefitDiscordUpdate\nBenefitGitHubRepositoryUpdate\nBenefitDownloadablesUpdate\nBenefitLicenseKeysUpdate\nBenefitMeterCreditUpdate\n​\ntype\nstringrequired\nAllowed value: \"custom\"\n​\nmetadata\nobject\n\nKey-value object allowing you to store additional information.\n\nThe key must be a string with a maximum length of 40 characters.\nThe value must be either:\n\nA string with a maximum length of 500 characters\nAn integer\nA floating-point number\nA boolean\n\nYou can store up to 50 key-value pairs.\n\nShow child attributes\n\n​\ndescription\nstring | null\n\nThe description of the benefit. Will be displayed on products having this benefit.\n\nRequired string length: 3 - 42\n​\nproperties\nobject | null\n\nProperties for a benefit of type custom.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nBenefit updated.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nA benefit of type custom.\n\nUse it to grant any kind of benefit that doesn't fit in the other types.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the benefit.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\ntype\nstringrequired\nAllowed value: \"custom\"\n​\ndescription\nstringrequired\n\nThe description of the benefit.\n\n​\nselectable\nbooleanrequired\n\nWhether the benefit is selectable when creating a product.\n\n​\ndeletable\nbooleanrequired\n\nWhether the benefit is deletable.\n\n​\norganization_id\nstring<uuid4>required\n\nThe ID of the organization owning the benefit.\n\n​\nmetadata\nobjectrequired\n\nShow child attributes\n\n​\nproperties\nobjectrequired\n\nProperties for a benefit of type custom.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Benefit\nDelete a benefit. > [!WARNING] > Every grants associated with the benefit will be revoked. > Users will lose access to the benefit. **Scopes**: `benefits:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Benefit Grants - Polar",
    "url": "https://polar.sh/docs/api-reference/benefits/list-grants",
    "html": "Benefits\nList Benefit Grants\nCopy page\n\nList the individual grants for a benefit.\n\nIt’s especially useful to check if a user has been granted a benefit.\n\nScopes: benefits:read benefits:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nbenefits\n/\n{id}\n/\ngrants\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe benefit ID.\n\nQuery Parameters\n​\nis_granted\nboolean | null\n\nFilter by granted status. If true, only granted benefits will be returned. If false, only revoked benefits will be returned.\n\n​\ncustomer_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by customer.\nThe customer ID.\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nBenefitGrant · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Benefit\nUpdate a benefit. **Scopes**: `benefits:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer_seat.claimed - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer_seat.claimed",
    "html": "Customer Seats\ncustomer_seat.claimed\nCopy page\n\nSent when a customer seat is claimed.\n\nThis event is triggered when a customer accepts the seat invitation and claims their access.\n\n​\ntype\nstringrequired\nAllowed value: \"customer_seat.claimed\"\nExamples:\n\n\"customer_seat.claimed\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer_seat.revoked\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer_seat.revoked - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer_seat.revoked",
    "html": "Customer Seats\ncustomer_seat.revoked\nCopy page\n\nSent when a customer seat is revoked.\n\nThis event is triggered when access to a seat is revoked, either manually by the organization or automatically when a subscription is canceled.\n\n​\ntype\nstringrequired\nAllowed value: \"customer_seat.revoked\"\nExamples:\n\n\"customer_seat.revoked\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nrefund.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "subscription.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/subscription.created",
    "html": "Subscriptions\nsubscription.created\nCopy page\n\nSent when a new subscription is created.\n\nWhen this event occurs, the subscription status might not be active yet, as we can still have to wait for the first payment to be processed.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"subscription.created\"\nExamples:\n\n\"subscription.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nsubscription.active\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "subscription.active - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/subscription.active",
    "html": "Subscriptions\nsubscription.active\nCopy page\n\nSent when a subscription becomes active,\nwhether because it's a new paid subscription or because payment was recovered.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"subscription.active\"\nExamples:\n\n\"subscription.active\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nsubscription.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "subscription.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/subscription.updated",
    "html": "Subscriptions\nsubscription.updated\nCopy page\n\nSent when a subscription is updated. This event fires for all changes to the subscription, including renewals.\n\nIf you want more specific events, you can listen to subscription.active, subscription.canceled, and subscription.revoked.\n\nTo listen specifically for renewals, you can listen to order.created events and check the billing_reason field.\n\nDiscord & Slack support: On cancellation and revocation. Renewals are skipped.\n\n​\ntype\nstringrequired\nAllowed value: \"subscription.updated\"\nExamples:\n\n\"subscription.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nsubscription.canceled\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "subscription.canceled - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/subscription.canceled",
    "html": "Subscriptions\nsubscription.canceled\nCopy page\n\nSent when a subscription is canceled.\nCustomers might still have access until the end of the current period.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"subscription.canceled\"\nExamples:\n\n\"subscription.canceled\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nsubscription.uncanceled\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "subscription.uncanceled - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/subscription.uncanceled",
    "html": "Subscriptions\nsubscription.uncanceled\nCopy page\n\nSent when a subscription is uncanceled.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"subscription.uncanceled\"\nExamples:\n\n\"subscription.uncanceled\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nsubscription.revoked\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Assign Seat - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/seats/assign",
    "html": "Seats\nAssign Seat\nCopy page\n\nScopes: customer_portal:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nseats\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nBody\napplication/json\n​\nsubscription_id\nstring<uuid> | null\n\nSubscription ID. Required if checkout_id and order_id are not provided.\n\n​\ncheckout_id\nstring<uuid> | null\n\nCheckout ID. Used to look up subscription or order from the checkout page.\n\n​\norder_id\nstring<uuid> | null\n\nOrder ID for one-time purchases. Required if subscription_id and checkout_id are not provided.\n\n​\nemail\nstring<email> | null\n\nEmail of the customer to assign the seat to\n\n​\nexternal_customer_id\nstring | null\n\nExternal customer ID for the seat assignment\n\n​\ncustomer_id\nstring<uuid> | null\n\nCustomer ID for the seat assignment\n\n​\nmetadata\nobject | null\n\nAdditional metadata for the seat (max 10 keys, 1KB total)\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid>required\n\nThe seat ID\n\n​\nstatus\nenum<string>required\n\nStatus of the seat\n\nAvailable options: pending, claimed, revoked \n​\nsubscription_id\nstring<uuid> | null\n\nThe subscription ID (for recurring seats)\n\n​\norder_id\nstring<uuid> | null\n\nThe order ID (for one-time purchase seats)\n\n​\ncustomer_id\nstring<uuid> | null\n\nThe assigned customer ID\n\n​\ncustomer_email\nstring | null\n\nThe assigned customer email\n\n​\ninvitation_token_expires_at\nstring<date-time> | null\n\nWhen the invitation token expires\n\n​\nclaimed_at\nstring<date-time> | null\n\nWhen the seat was claimed\n\n​\nrevoked_at\nstring<date-time> | null\n\nWhen the seat was revoked\n\n​\nseat_metadata\nobject | null\n\nAdditional metadata for the seat\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRevoke Seat\n**Scopes**: `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Revoke Seat - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/seats/revoke",
    "html": "Seats\nRevoke Seat\nCopy page\n\nScopes: customer_portal:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nseats\n/\n{seat_id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nseat_id\nstring<uuid>required\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid>required\n\nThe seat ID\n\n​\nstatus\nenum<string>required\n\nStatus of the seat\n\nAvailable options: pending, claimed, revoked \n​\nsubscription_id\nstring<uuid> | null\n\nThe subscription ID (for recurring seats)\n\n​\norder_id\nstring<uuid> | null\n\nThe order ID (for one-time purchase seats)\n\n​\ncustomer_id\nstring<uuid> | null\n\nThe assigned customer ID\n\n​\ncustomer_email\nstring | null\n\nThe assigned customer email\n\n​\ninvitation_token_expires_at\nstring<date-time> | null\n\nWhen the invitation token expires\n\n​\nclaimed_at\nstring<date-time> | null\n\nWhen the seat was claimed\n\n​\nrevoked_at\nstring<date-time> | null\n\nWhen the seat was revoked\n\n​\nseat_metadata\nobject | null\n\nAdditional metadata for the seat\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nResend Invitation\n**Scopes**: `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Resend Invitation - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/seats/resend",
    "html": "Seats\nResend Invitation\nCopy page\n\nScopes: customer_portal:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nseats\n/\n{seat_id}\n/\nresend\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nPath Parameters\n​\nseat_id\nstring<uuid>required\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid>required\n\nThe seat ID\n\n​\nstatus\nenum<string>required\n\nStatus of the seat\n\nAvailable options: pending, claimed, revoked \n​\nsubscription_id\nstring<uuid> | null\n\nThe subscription ID (for recurring seats)\n\n​\norder_id\nstring<uuid> | null\n\nThe order ID (for one-time purchase seats)\n\n​\ncustomer_id\nstring<uuid> | null\n\nThe assigned customer ID\n\n​\ncustomer_email\nstring | null\n\nThe assigned customer email\n\n​\ninvitation_token_expires_at\nstring<date-time> | null\n\nWhen the invitation token expires\n\n​\nclaimed_at\nstring<date-time> | null\n\nWhen the seat was claimed\n\n​\nrevoked_at\nstring<date-time> | null\n\nWhen the seat was revoked\n\n​\nseat_metadata\nobject | null\n\nAdditional metadata for the seat\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Claimed Subscriptions\nList all subscriptions where the authenticated customer has claimed a seat. **Scopes**: `customer_portal:read` `customer_portal:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "refund.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/refund.created",
    "html": "Refunds\nrefund.created\nCopy page\n\nSent when a refund is created regardless of status.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"refund.created\"\nExamples:\n\n\"refund.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nrefund.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Claimed Subscriptions - Polar",
    "url": "https://polar.sh/docs/api-reference/customer-portal/seats/list-subscriptions",
    "html": "Seats\nList Claimed Subscriptions\nCopy page\n\nList all subscriptions where the authenticated customer has claimed a seat.\n\nScopes: customer_portal:read customer_portal:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\ncustomer-portal\n/\nseats\n/\nsubscriptions\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nCustomer session tokens are specific tokens that are used to authenticate customers on your organization. You can create those sessions programmatically using the Create Customer Session endpoint.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\namount\nintegerrequired\n\nThe amount of the subscription.\n\nExamples:\n\n10000\n\n​\ncurrency\nstringrequired\n\nThe currency of the subscription.\n\nExamples:\n\n\"usd\"\n\n​\nrecurring_interval\nenum<string>required\n\nThe interval at which the subscription recurs.\n\nAvailable options: day, week, month, year \n​\nrecurring_interval_count\nintegerrequired\n\nNumber of interval units of the subscription. If this is set to 1 the charge will happen every interval (e.g. every month), if set to 2 it will be every other month, and so on.\n\n​\nstatus\nenum<string>required\n\nThe status of the subscription.\n\nAvailable options: incomplete, incomplete_expired, trialing, active, past_due, canceled, unpaid \n​\ncurrent_period_start\nstring<date-time>required\n\nThe start timestamp of the current billing period.\n\n​\ncurrent_period_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the current billing period.\n\n​\ntrial_start\nstring<date-time> | nullrequired\n\nThe start timestamp of the trial period, if any.\n\n​\ntrial_end\nstring<date-time> | nullrequired\n\nThe end timestamp of the trial period, if any.\n\n​\ncancel_at_period_end\nbooleanrequired\n\nWhether the subscription will be canceled at the end of the current period.\n\n​\ncanceled_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription was canceled. The subscription might still be active if cancel_at_period_end is true.\n\n​\nstarted_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription started.\n\n​\nends_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription will end.\n\n​\nended_at\nstring<date-time> | nullrequired\n\nThe timestamp when the subscription ended.\n\n​\ncustomer_id\nstring<uuid4>required\n\nThe ID of the subscribed customer.\n\n​\nproduct_id\nstring<uuid4>required\n\nThe ID of the subscribed product.\n\n​\ndiscount_id\nstring<uuid4> | nullrequired\n\nThe ID of the applied discount, if any.\n\n​\ncheckout_id\nstring<uuid4> | nullrequired\n​\ncustomer_cancellation_reason\nenum<string> | nullrequired\nAvailable options: customer_service, low_quality, missing_features, switched_service, too_complex, too_expensive, unused, other \n​\ncustomer_cancellation_comment\nstring | nullrequired\n​\nproduct\nobjectrequired\n\nShow child attributes\n\n​\nprices\nPrices · arrayrequired\n\nList of enabled prices for the subscription.\n\nLegacyRecurringProductPriceFixed\nLegacyRecurringProductPriceCustom\nLegacyRecurringProductPriceFree\nProductPriceFixed\nProductPriceCustom\nProductPriceFree\nProductPriceSeatBased\nProductPriceMeteredUnit\n\nShow child attributes\n\n​\nmeters\nCustomerSubscriptionMeter · object[]required\n\nList of meters associated with the subscription.\n\nShow child attributes\n\n​\nis_polar_managed\nbooleanrequired\n\nWhether the subscription is managed by Polar.\n\n​\nseats\ninteger | null\n\nNumber of seats included in the subscription (for seat-based pricing).\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer.state_changed\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "checkout.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/checkout.updated",
    "html": "Checkout\ncheckout.updated\nCopy page\n\nSent when a checkout is updated.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"checkout.updated\"\nExamples:\n\n\"checkout.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nCheckout session data retrieved using an access token.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nsubscription.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "refund.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/refund.updated",
    "html": "Refunds\nrefund.updated\nCopy page\n\nSent when a refund is updated.\n\nDiscord & Slack support: Full\n\n​\ntype\nstringrequired\nAllowed value: \"refund.updated\"\nExamples:\n\n\"refund.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nbenefit_grant.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer.state_changed - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer.state_changed",
    "html": "Customer Events\ncustomer.state_changed\nCopy page\n\nSent when a customer state has changed.\n\nIt's triggered when:\n\nCustomer is created, updated or deleted.\nA subscription is created or updated.\nA benefit is granted or revoked.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"customer.state_changed\"\nExamples:\n\n\"customer.state_changed\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA customer along with additional state information:\n\nActive subscriptions\nGranted benefits\nActive meters\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "checkout.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/checkout.created",
    "html": "Checkout\ncheckout.created\nCopy page\n\nSent when a new checkout is created.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"checkout.created\"\nExamples:\n\n\"checkout.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nCheckout session data retrieved using an access token.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncheckout.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "benefit_grant.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/benefit_grant.created",
    "html": "Benefit Grants\nbenefit_grant.created\nCopy page\n\nSent when a new benefit grant is created.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"benefit_grant.created\"\nExamples:\n\n\"benefit_grant.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\nBenefitGrantDiscordWebhook\nBenefitGrantCustomWebhook\nBenefitGrantGitHubRepositoryWebhook\nBenefitGrantDownloadablesWebhook\nBenefitGrantLicenseKeysWebhook\nBenefitGrantMeterCreditWebhook\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nbenefit_grant.cycled\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer.created",
    "html": "Customer Events\ncustomer.created\nCopy page\n\nSent when a new customer is created.\n\nA customer can be created:\n\nAfter a successful checkout.\nProgrammatically via the API.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"customer.created\"\nExamples:\n\n\"customer.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA customer in an organization.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer.updated",
    "html": "Customer Events\ncustomer.updated\nCopy page\n\nSent when a customer is updated.\n\nThis event is fired when the customer details are updated.\n\nIf you want to be notified when a customer subscription or benefit state changes, you should listen to the customer_state_changed event.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"customer.updated\"\nExamples:\n\n\"customer.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA customer in an organization.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncustomer.deleted\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "customer.deleted - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/customer.deleted",
    "html": "Customer Events\ncustomer.deleted\nCopy page\n\nSent when a customer is deleted.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"customer.deleted\"\nExamples:\n\n\"customer.deleted\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA customer in an organization.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\ncheckout.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "benefit_grant.cycled - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/benefit_grant.cycled",
    "html": "Benefit Grants\nbenefit_grant.cycled\nCopy page\n\nSent when a benefit grant is cycled,\nmeaning the related subscription has been renewed for another period.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"benefit_grant.cycled\"\nExamples:\n\n\"benefit_grant.cycled\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\nBenefitGrantDiscordWebhook\nBenefitGrantCustomWebhook\nBenefitGrantGitHubRepositoryWebhook\nBenefitGrantDownloadablesWebhook\nBenefitGrantLicenseKeysWebhook\nBenefitGrantMeterCreditWebhook\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nbenefit_grant.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "benefit_grant.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/benefit_grant.updated",
    "html": "Benefit Grants\nbenefit_grant.updated\nCopy page\n\nSent when a benefit grant is updated.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"benefit_grant.updated\"\nExamples:\n\n\"benefit_grant.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\nBenefitGrantDiscordWebhook\nBenefitGrantCustomWebhook\nBenefitGrantGitHubRepositoryWebhook\nBenefitGrantDownloadablesWebhook\nBenefitGrantLicenseKeysWebhook\nBenefitGrantMeterCreditWebhook\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nbenefit_grant.revoked\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "benefit_grant.revoked - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/benefit_grant.revoked",
    "html": "Benefit Grants\nbenefit_grant.revoked\nCopy page\n\nSent when a benefit grant is revoked.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"benefit_grant.revoked\"\nExamples:\n\n\"benefit_grant.revoked\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\nBenefitGrantDiscordWebhook\nBenefitGrantCustomWebhook\nBenefitGrantGitHubRepositoryWebhook\nBenefitGrantDownloadablesWebhook\nBenefitGrantLicenseKeysWebhook\nBenefitGrantMeterCreditWebhook\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nbenefit.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "benefit.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/benefit.created",
    "html": "Benefits\nbenefit.created\nCopy page\n\nSent when a new benefit is created.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"benefit.created\"\nExamples:\n\n\"benefit.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA benefit of type custom.\n\nUse it to grant any kind of benefit that doesn't fit in the other types.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nbenefit.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "benefit.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/benefit.updated",
    "html": "Benefits\nbenefit.updated\nCopy page\n\nSent when a benefit is updated.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"benefit.updated\"\nExamples:\n\n\"benefit.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA benefit of type custom.\n\nUse it to grant any kind of benefit that doesn't fit in the other types.\n\nBenefitCustom\nBenefitDiscord\nBenefitGitHubRepository\nBenefitDownloadables\nBenefitLicenseKeys\nBenefitMeterCredit\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nproduct.created\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "product.created - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/product.created",
    "html": "Products\nproduct.created\nCopy page\n\nSent when a new product is created.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"product.created\"\nExamples:\n\n\"product.created\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA product.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nproduct.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "product.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/product.updated",
    "html": "Products\nproduct.updated\nCopy page\n\nSent when a product is updated.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"product.updated\"\nExamples:\n\n\"product.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nA product.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\norganization.updated\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "organization.updated - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/organization.updated",
    "html": "Organization\norganization.updated\nCopy page\n\nSent when a organization is updated.\n\nDiscord & Slack support: Basic\n\n​\ntype\nstringrequired\nAllowed value: \"organization.updated\"\nExamples:\n\n\"organization.updated\"\n\n​\ntimestamp\nstring<date-time>required\n​\ndata\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nAuthorize\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Authorize - Polar",
    "url": "https://polar.sh/docs/api-reference/oauth2/connect/authorize",
    "html": "OpenID Connect\nAuthorize\nCopy page\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\noauth2\n/\nauthorize\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nResponse\n200 - application/json\n\nSuccessful Response\n\nAuthorizeResponseUser\nAuthorizeResponseOrganization\n​\nclient\nobjectrequired\n\nShow child attributes\n\n​\nsub_type\nstringrequired\nAllowed value: \"user\"\n​\nsub\nobject | nullrequired\n\nShow child attributes\n\n​\nscopes\nenum<string>[]required\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRequest Token\nRequest an access token using a valid grant.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Request Token - Polar",
    "url": "https://polar.sh/docs/api-reference/oauth2/connect/request-token",
    "html": "OpenID Connect\nRequest Token\nCopy page\n\nRequest an access token using a valid grant.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\noauth2\n/\ntoken\nTry it\nBody\napplication/x-www-form-urlencoded\nAuthorizationCodeTokenRequest\nRefreshTokenRequest\nWebTokenRequest\n​\ngrant_type\nstringrequired\nAllowed value: \"authorization_code\"\n​\nclient_id\nstringrequired\n​\nclient_secret\nstringrequired\n​\ncode\nstringrequired\n​\nredirect_uri\nstring<uri>required\nRequired string length: 1 - 2083\nResponse\n200 - application/json\n\nSuccessful Response\n\n​\naccess_token\nstringrequired\n​\ntoken_type\nstringrequired\nAllowed value: \"Bearer\"\n​\nexpires_in\nintegerrequired\n​\nrefresh_token\nstring | nullrequired\n​\nscope\nstringrequired\n​\nid_token\nstringrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nIntrospect Token\nGet information about an access token.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Introspect Token - Polar",
    "url": "https://polar.sh/docs/api-reference/oauth2/connect/introspect-token",
    "html": "OpenID Connect\nIntrospect Token\nCopy page\n\nGet information about an access token.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\noauth2\n/\nintrospect\nTry it\nBody\napplication/x-www-form-urlencoded\n​\ntoken\nstringrequired\n​\nclient_id\nstringrequired\n​\nclient_secret\nstringrequired\n​\ntoken_type_hint\nenum<string> | null\nAvailable options: access_token, refresh_token \nResponse\n200 - application/json\n\nSuccessful Response\n\n​\nactive\nbooleanrequired\n​\nclient_id\nstringrequired\n​\ntoken_type\nenum<string>required\nAvailable options: access_token, refresh_token \n​\nscope\nstringrequired\n​\nsub_type\nenum<string>required\nAvailable options: user, organization \n​\nsub\nstringrequired\n​\naud\nstringrequired\n​\niss\nstringrequired\n​\nexp\nintegerrequired\n​\niat\nintegerrequired\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nRevoke Token\nRevoke an access token or a refresh token.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get User Info - Polar",
    "url": "https://polar.sh/docs/api-reference/oauth2/connect/get-user-info",
    "html": "OpenID Connect\nGet User Info\nCopy page\n\nGet information about the authenticated user.\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\noauth2\n/\nuserinfo\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nResponse\n200 - application/json\n\nSuccessful Response\n\nUserInfoUser\nUserInfoOrganization\n​\nsub\nstringrequired\n​\nname\nstring | null\n​\nemail\nstring | null\n​\nemail_verified\nboolean | null\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nCreate Webhook Endpoint\nCreate a webhook endpoint. **Scopes**: `webhooks:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Revoke Token - Polar",
    "url": "https://polar.sh/docs/api-reference/oauth2/connect/revoke-token",
    "html": "OpenID Connect\nRevoke Token\nCopy page\n\nRevoke an access token or a refresh token.\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\noauth2\n/\nrevoke\nTry it\nBody\napplication/x-www-form-urlencoded\n​\ntoken\nstringrequired\n​\nclient_id\nstringrequired\n​\nclient_secret\nstringrequired\n​\ntoken_type_hint\nenum<string> | null\nAvailable options: access_token, refresh_token \nResponse\n200 - application/json\n\nSuccessful Response\n\nThe response is of type object.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet User Info\nGet information about the authenticated user.\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Create Webhook Endpoint - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/endpoints/create",
    "html": "Webhooks\nCreate Webhook Endpoint\nCopy page\n\nCreate a webhook endpoint.\n\nScopes: webhooks:write\n\nPOST\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nwebhooks\n/\nendpoints\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nBody\napplication/json\n\nSchema to create a webhook endpoint.\n\n​\nurl\nstring<uri>required\n\nThe URL where the webhook events will be sent.\n\nRequired string length: 1 - 2083\nExamples:\n\n\"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\"\n\n​\nformat\nenum<string>required\n\nThe format of the webhook payload.\n\nAvailable options: raw, discord, slack \n​\nevents\nenum<string>[]required\n\nThe events that will trigger the webhook.\n\nShow child attributes\n\n​\nsecret\nstring | nulldeprecated\n\nThe secret used to sign the webhook events.\n\nMinimum length: 32\nExamples:\n\n\"polar_whs_ovyN6cPrTv56AApvzCaJno08SSmGJmgbWilb33N2JuK\"\n\n​\norganization_id\nstring<uuid4> | null\n\nThe organization ID associated with the webhook endpoint. Required unless you use an organization token.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\nResponse\n201\napplication/json\n\nWebhook endpoint created.\n\nA webhook endpoint.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nurl\nstring<uri>required\n\nThe URL where the webhook events will be sent.\n\nRequired string length: 1 - 2083\nExamples:\n\n\"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\"\n\n​\nformat\nenum<string>required\n\nThe format of the webhook payload.\n\nAvailable options: raw, discord, slack \n​\nsecret\nstringrequired\n\nThe secret used to sign the webhook events.\n\nExamples:\n\n\"polar_whs_ovyN6cPrTv56AApvzCaJno08SSmGJmgbWilb33N2JuK\"\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID associated with the webhook endpoint.\n\n​\nevents\nenum<string>[]required\n\nThe events that will trigger the webhook.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nGet Webhook Endpoint\nGet a webhook endpoint by ID. **Scopes**: `webhooks:read` `webhooks:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Get Webhook Endpoint - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/endpoints/get",
    "html": "Webhooks\nGet Webhook Endpoint\nCopy page\n\nGet a webhook endpoint by ID.\n\nScopes: webhooks:read webhooks:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nwebhooks\n/\nendpoints\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe webhook endpoint ID.\n\nResponse\n200\napplication/json\n\nSuccessful Response\n\nA webhook endpoint.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nurl\nstring<uri>required\n\nThe URL where the webhook events will be sent.\n\nRequired string length: 1 - 2083\nExamples:\n\n\"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\"\n\n​\nformat\nenum<string>required\n\nThe format of the webhook payload.\n\nAvailable options: raw, discord, slack \n​\nsecret\nstringrequired\n\nThe secret used to sign the webhook events.\n\nExamples:\n\n\"polar_whs_ovyN6cPrTv56AApvzCaJno08SSmGJmgbWilb33N2JuK\"\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID associated with the webhook endpoint.\n\n​\nevents\nenum<string>[]required\n\nThe events that will trigger the webhook.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nList Webhook Endpoints\nList webhook endpoints. **Scopes**: `webhooks:read` `webhooks:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "List Webhook Endpoints - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/endpoints/list",
    "html": "Webhooks\nList Webhook Endpoints\nCopy page\n\nList webhook endpoints.\n\nScopes: webhooks:read webhooks:write\n\nGET\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nwebhooks\n/\nendpoints\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nQuery Parameters\n​\norganization_id\nstring<uuid4> | null\nstring<uuid4>[] | null\n\nFilter by organization ID.\nThe organization ID.\n\nExamples:\n\n\"1dbfc517-0bbf-4301-9ba8-555ca42b9737\"\n\n​\npage\nintegerdefault:1\n\nPage number, defaults to 1.\n\nRequired range: x > 0\n​\nlimit\nintegerdefault:10\n\nSize of a page, defaults to 10. Maximum is 100.\n\nRequired range: x > 0\nResponse\n200\napplication/json\n\nSuccessful Response\n\n​\nitems\nWebhookEndpoint · object[]required\n\nShow child attributes\n\n​\npagination\nobjectrequired\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Webhook Endpoint\nUpdate a webhook endpoint. **Scopes**: `webhooks:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Delete Webhook Endpoint - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/endpoints/delete",
    "html": "Webhooks\nDelete Webhook Endpoint\nCopy page\n\nDelete a webhook endpoint.\n\nScopes: webhooks:write\n\nDELETE\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nwebhooks\n/\nendpoints\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe webhook endpoint ID.\n\nResponse\n204\n\nWebhook endpoint deleted.\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nUpdate Webhook Endpoint\nUpdate a webhook endpoint. **Scopes**: `webhooks:write`\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  },
  {
    "title": "Update Webhook Endpoint - Polar",
    "url": "https://polar.sh/docs/api-reference/webhooks/endpoints/update",
    "html": "Webhooks\nUpdate Webhook Endpoint\nCopy page\n\nUpdate a webhook endpoint.\n\nScopes: webhooks:write\n\nPATCH\nhttps://api.polar.sh\nhttps://sandbox-api.polar.sh\n/\nv1\n/\nwebhooks\n/\nendpoints\n/\n{id}\nTry it\nAuthorizations\n​\nAuthorization\nstringheaderrequired\n\nYou can generate an Organization Access Token from your organization's settings.\n\nPath Parameters\n​\nid\nstring<uuid4>required\n\nThe webhook endpoint ID.\n\nBody\napplication/json\n\nSchema to update a webhook endpoint.\n\n​\nurl\nstring<uri> | null\n\nThe URL where the webhook events will be sent.\n\nRequired string length: 1 - 2083\nExamples:\n\n\"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\"\n\n​\nsecret\nstring | nulldeprecated\n\nThe secret used to sign the webhook events.\n\nMinimum length: 32\nExamples:\n\n\"polar_whs_ovyN6cPrTv56AApvzCaJno08SSmGJmgbWilb33N2JuK\"\n\n​\nformat\nenum<string> | null\n\nThe format of the webhook payload.\n\nAvailable options: raw, discord, slack \n​\nevents\nenum<string>[] | null\n\nThe events that will trigger the webhook.\n\nShow child attributes\n\nResponse\n200\napplication/json\n\nWebhook endpoint updated.\n\nA webhook endpoint.\n\n​\ncreated_at\nstring<date-time>required\n\nCreation timestamp of the object.\n\n​\nmodified_at\nstring<date-time> | nullrequired\n\nLast modification timestamp of the object.\n\n​\nid\nstring<uuid4>required\n\nThe ID of the object.\n\n​\nurl\nstring<uri>required\n\nThe URL where the webhook events will be sent.\n\nRequired string length: 1 - 2083\nExamples:\n\n\"https://webhook.site/cb791d80-f26e-4f8c-be88-6e56054192b0\"\n\n​\nformat\nenum<string>required\n\nThe format of the webhook payload.\n\nAvailable options: raw, discord, slack \n​\nsecret\nstringrequired\n\nThe secret used to sign the webhook events.\n\nExamples:\n\n\"polar_whs_ovyN6cPrTv56AApvzCaJno08SSmGJmgbWilb33N2JuK\"\n\n​\norganization_id\nstring<uuid4>required\n\nThe organization ID associated with the webhook endpoint.\n\n​\nevents\nenum<string>[]required\n\nThe events that will trigger the webhook.\n\nShow child attributes\n\nWas this page helpful?\n\nYes\nNo\nPrevious\nDelete Webhook Endpoint\nDelete a webhook endpoint. **Scopes**: `webhooks:write`\nNext\n⌘I\nx\ngithub\ndiscord\nPowered by Mintlify"
  }
]